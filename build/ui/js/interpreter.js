(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = require('./Token').Token;
var Lexer = require('./Lexer').Lexer;
var Interval = require('./IntervalSet').Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;

},{"./IntervalSet":7,"./Lexer":9,"./Token":15}],2:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = require('./InputStream').InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;

},{"./InputStream":6,"fs":48}],3:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = require('./Token').CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;

},{"./Token":15}],4:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = require('./Token').Token;
var BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;
},{"./BufferedTokenStream":1,"./Token":15}],5:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = require('./InputStream').InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? require("fs") : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;

},{"./InputStream":6,"fs":48}],6:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
require('./polyfills/codepointat');
require('./polyfills/fromcodepoint');

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream, decodeToUnicodeCodePoints) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;

},{"./Token":15,"./polyfills/codepointat":43,"./polyfills/fromcodepoint":44}],7:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = require('./Token').Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;

},{"./Token":15}],8:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = require('./Utils').Set;
var BitSet = require('./Utils').BitSet;
var Token = require('./Token').Token;
var ATNConfig = require('./atn/ATNConfig').ATNConfig;
var Interval = require('./IntervalSet').Interval;
var IntervalSet = require('./IntervalSet').IntervalSet;
var RuleStopState = require('./atn/ATNState').RuleStopState;
var RuleTransition = require('./atn/Transition').RuleTransition;
var NotSetTransition = require('./atn/Transition').NotSetTransition;
var WildcardTransition = require('./atn/Transition').WildcardTransition;
var AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;

var pc = require('./PredictionContext');
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;


},{"./IntervalSet":7,"./PredictionContext":12,"./Token":15,"./Utils":16,"./atn/ATNConfig":18,"./atn/ATNState":23,"./atn/Transition":31}],9:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = require('./Token').Token;
var Recognizer = require('./Recognizer').Recognizer;
var CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;
var RecognitionException  = require('./error/Errors').RecognitionException;
var LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;

},{"./CommonTokenFactory":3,"./Recognizer":13,"./Token":15,"./error/Errors":40}],10:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./Token').Token;
var ParseTreeListener = require('./tree/Tree').ParseTreeListener;
var Recognizer = require('./Recognizer').Recognizer;
var DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;
var ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;
var ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;
var TerminalNode = require('./tree/Tree').TerminalNode;
var ErrorNode = require('./tree/Tree').ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = require('./Lexer').Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;
},{"./Lexer":9,"./Recognizer":13,"./Token":15,"./atn/ATNDeserializationOptions":20,"./atn/ATNDeserializer":21,"./error/ErrorStrategy":39,"./tree/Tree":45}],11:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = require('./RuleContext').RuleContext;
var Tree = require('./tree/Tree');
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = require("./IntervalSet").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;
},{"./IntervalSet":7,"./RuleContext":14,"./tree/Tree":45}],12:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = require('./RuleContext').RuleContext;
var Hash = require('./Utils').Hash;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = {};
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache[ctx] || null;
	if (existing !== null) {
		return existing;
	}
	this.cache[ctx] = ctx;
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache[ctx] || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	if(parent !== null) {
		var hash = new Hash();
		hash.update(parent, returnState);
        hashCode = hash.finish();
	}
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = {};

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(parent in uniqueParents)) {
			uniqueParents[parent] = parent;
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents[parents[q]];
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited[context] || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited[context] = existing;
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited[context] = context;
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited[updated] = updated;
	visited[context] = updated;

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = {};
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited[context] !== null) {
			return nodes;
		}
		visited[context] = context;
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;

},{"./RuleContext":14,"./Utils":16}],13:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./Token').Token;
var ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;
var ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.7";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;

},{"./Token":15,"./error/ErrorListener":38}],14:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = require('./tree/Tree').RuleNode;
var INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;
var INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = require('./tree/Trees').Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};


},{"./atn/ATN":17,"./tree/Tree":45,"./tree/Trees":46}],15:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;

},{}],16:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict() {
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    value.updateHashCode(this);
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
}

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
}

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this[a] || null;
    return d === null ? null : (d[b] || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this[a] || null;
    if (d === null) {
        d = {};
        this[a] = d;
    }
    d[b] = o;
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace("\t", "\\t");
    s = s.replace("\n", "\\n");
    s = s.replace("\r", "\\r");
    if (escapeSpaces) {
        s = s.replace(" ", "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;
},{}],17:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = require('./../Token').Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;
},{"./../IntervalSet":7,"./../LL1Analyzer":8,"./../Token":15}],18:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = require('./ATNState').DecisionState;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;
},{"../Utils":16,"./ATNState":23,"./SemanticContext":30}],19:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = require('./ATN').ATN;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = require('./SemanticContext').SemanticContext;
var merge = require('./../PredictionContext').merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            var hash = new Hash();
            hash.update(this.configs);
			this.cachedHashCode = hash.finish();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.configs);
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;

},{"./../PredictionContext":12,"./../Utils":16,"./ATN":17,"./SemanticContext":30}],20:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;

},{}],21:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = require('./../Token').Token;
var ATN = require('./ATN').ATN;
var ATNType = require('./ATNType').ATNType;
var ATNStates = require('./ATNState');
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Interval = require('./../IntervalSet').Interval;
var ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;
var LexerActions = require('./LexerAction');
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : -1;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;
},{"./../IntervalSet":7,"./../Token":15,"./ATN":17,"./ATNDeserializationOptions":20,"./ATNState":23,"./ATNType":24,"./LexerAction":26,"./Transition":31}],22:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = {};
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;

},{"./../PredictionContext":12,"./../dfa/DFAState":35,"./ATNConfigSet":19}],23:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;

},{}],24:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;


},{}],25:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = require('./../Token').Token;
var Lexer = require('./../Lexer').Lexer;
var ATN = require('./ATN').ATN;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var DFAState = require('./../dfa/DFAState').DFAState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var RuleStopState = require('./ATNState').RuleStopState;
var LexerATNConfig = require('./ATNConfig').LexerATNConfig;
var Transition = require('./Transition').Transition;
var LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;
var LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;

},{"./../Lexer":9,"./../PredictionContext":12,"./../Token":15,"./../dfa/DFAState":35,"./../error/Errors":40,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNSimulator":22,"./ATNState":23,"./LexerActionExecutor":27,"./Transition":31}],26:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;
},{}],27:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = require("../Utils").hashStuff;
var LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;

},{"../Utils":16,"./LexerAction":26}],28:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = require('./../Utils');
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = require('./ATN').ATN;
var ATNState = require('./ATNState').ATNState;
var ATNConfig = require('./ATNConfig').ATNConfig;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var Token = require('./../Token').Token;
var DFAState = require('./../dfa/DFAState').DFAState;
var PredPrediction = require('./../dfa/DFAState').PredPrediction;
var ATNSimulator = require('./ATNSimulator').ATNSimulator;
var PredictionMode = require('./PredictionMode').PredictionMode;
var RuleContext = require('./../RuleContext').RuleContext;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var SemanticContext = require('./SemanticContext').SemanticContext;
var StarLoopEntryState = require('./ATNState').StarLoopEntryState;
var RuleStopState = require('./ATNState').RuleStopState;
var PredictionContext = require('./../PredictionContext').PredictionContext;
var Interval = require('./../IntervalSet').Interval;
var Transitions = require('./Transition');
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = require('./../error/Errors').NoViableAltException;

var SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;
var predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
			if (!t.isEpsilon && closureBusy.add(c)!==c){
				// avoid infinite recursion for EOF* and EOF+
				continue;
			}
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.

                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }

				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else if (t instanceof RuleTransition) {
                // latch when newDepth goes negative - once we step out of the entry context we can't return
                if (newDepth >= 0) {
                    newDepth += 1;
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;
},{"./../IntervalSet":7,"./../ParserRuleContext":11,"./../PredictionContext":12,"./../RuleContext":14,"./../Token":15,"./../Utils":16,"./../dfa/DFAState":35,"./../error/Errors":40,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNSimulator":22,"./ATNState":23,"./PredictionMode":29,"./SemanticContext":30,"./Transition":31}],29:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = require('./../Utils').Set;
var Map = require('./../Utils').Map;
var BitSet = require('./../Utils').BitSet;
var AltDict = require('./../Utils').AltDict;
var ATN = require('./ATN').ATN;
var RuleStopState = require('./ATNState').RuleStopState;
var ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;
var ATNConfig = require('./ATNConfig').ATNConfig;
var SemanticContext = require('./SemanticContext').SemanticContext;
var Hash = require("../Utils").Hash;
var hashStuff = require('./../Utils').hashStuff;
var equalArrays = require('./../Utils').equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;

},{"../Utils":16,"./../Utils":16,"./ATN":17,"./ATNConfig":18,"./ATNConfigSet":19,"./ATNState":23,"./SemanticContext":30}],30:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = require('./../Utils').Set;
var Hash = require('./../Utils').Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;

},{"./../Utils":16}],31:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;
var Predicate = require('./SemanticContext').Predicate;
var PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;
},{"./../IntervalSet":7,"./../Token":15,"./SemanticContext":30}],32:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = require('./ATN').ATN;
exports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;
exports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;
exports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;
exports.PredictionMode = require('./PredictionMode').PredictionMode;

},{"./ATN":17,"./ATNDeserializer":21,"./LexerATNSimulator":25,"./ParserATNSimulator":28,"./PredictionMode":29}],33:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = require("../Utils").Set;
var DFAState = require('./DFAState').DFAState;
var StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;
var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var DFASerializer = require('./DFASerializer').DFASerializer;
var LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;

},{"../Utils":16,"../atn/ATNState":23,"./../atn/ATNConfigSet":19,"./DFASerializer":34,"./DFAState":35}],34:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;


},{}],35:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;
var Utils = require('./../Utils');
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
	if(this.isAcceptState) {
        if (this.predicates !== null)
            hash.update(this.predicates);
        else
            hash.update(this.prediction);
    }
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;

},{"./../Utils":16,"./../atn/ATNConfigSet":19}],36:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = require('./DFA').DFA;
exports.DFASerializer = require('./DFASerializer').DFASerializer;
exports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;
exports.PredPrediction = require('./DFAState').PredPrediction;

},{"./DFA":33,"./DFASerializer":34,"./DFAState":35}],37:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = require('./../Utils').BitSet;
var ErrorListener = require('./ErrorListener').ErrorListener;
var Interval = require('./../IntervalSet').Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;
},{"./../IntervalSet":7,"./../Utils":16,"./ErrorListener":38}],38:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;


},{}],39:[function(require,module,exports){
//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = require('./../Token').Token;
var Errors = require('./Errors');
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = require('./../atn/ATNState').ATNState;
var Interval = require('./../IntervalSet').Interval;
var IntervalSet = require('./../IntervalSet').IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken, e.offendingToken));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;
},{"./../IntervalSet":7,"./../Token":15,"./../atn/ATNState":23,"./Errors":40}],40:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = require('./../atn/Transition').PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;

},{"./../atn/Transition":31}],41:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = require('./Errors').RecognitionException;
exports.NoViableAltException = require('./Errors').NoViableAltException;
exports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;
exports.InputMismatchException = require('./Errors').InputMismatchException;
exports.FailedPredicateException = require('./Errors').FailedPredicateException;
exports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;
exports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;
exports.ErrorListener = require('./ErrorListener').ErrorListener;

},{"./DiagnosticErrorListener":37,"./ErrorListener":38,"./ErrorStrategy":39,"./Errors":40}],42:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = require('./atn/index');
exports.codepointat = require('./polyfills/codepointat');
exports.dfa = require('./dfa/index');
exports.fromcodepoint = require('./polyfills/fromcodepoint');
exports.tree = require('./tree/index');
exports.error = require('./error/index');
exports.Token = require('./Token').Token;
exports.CharStreams = require('./CharStreams').CharStreams;
exports.CommonToken = require('./Token').CommonToken;
exports.InputStream = require('./InputStream').InputStream;
exports.FileStream = require('./FileStream').FileStream;
exports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;
exports.Lexer = require('./Lexer').Lexer;
exports.Parser = require('./Parser').Parser;
var pc = require('./PredictionContext');
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;
exports.Interval = require('./IntervalSet').Interval;
exports.Utils = require('./Utils');

},{"./CharStreams":2,"./CommonTokenStream":4,"./FileStream":5,"./InputStream":6,"./IntervalSet":7,"./Lexer":9,"./Parser":10,"./ParserRuleContext":11,"./PredictionContext":12,"./Token":15,"./Utils":16,"./atn/index":32,"./dfa/index":36,"./error/index":41,"./polyfills/codepointat":43,"./polyfills/fromcodepoint":44,"./tree/index":47}],43:[function(require,module,exports){
/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}

},{}],44:[function(require,module,exports){
/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}

},{}],45:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = require('./../Token').Token;
var Interval = require('./../IntervalSet').Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = require('../Utils.js');


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
  return this.visit(ctx.children);
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;

},{"../Utils.js":16,"./../IntervalSet":7,"./../Token":15}],46:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = require('./../Utils');
var Token = require('./../Token').Token;
var RuleNode = require('./Tree').RuleNode;
var ErrorNode = require('./Tree').ErrorNode;
var TerminalNode = require('./Tree').TerminalNode;
var ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;
var RuleContext = require('./../RuleContext').RuleContext;
var INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;
},{"./../ParserRuleContext":11,"./../RuleContext":14,"./../Token":15,"./../Utils":16,"./../atn/ATN":17,"./Tree":45}],47:[function(require,module,exports){
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = require('./Tree');
exports.Trees = require('./Trees').Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;

},{"./Tree":45,"./Trees":46}],48:[function(require,module,exports){

},{}],49:[function(require,module,exports){
const ASTNodes = require('./ASTNodes');

class ASTBuilder {
    constructor() {
        return this;
    }

    buildProgram(ctx, args) {
        let program = new ASTNodes.FUNCTION_NODE(
            ctx,
            '__main__',
            args || {},
            ctx.stmt().map(this.getStmt, this)
        );

        program.reduce = function() {
            program.body.forEach(
                stmt => stmt.reduce(program.scope)
            );

            return program.body[program.body.length - 1].text();
        };

        program.include = function(name, functionNode) {
            program.scope.putSymbol(name, functionNode);
        };

        return program;
    }

    getFuncDef(ctx) {
        return new ASTNodes.FUNCTION_NODE(
            ctx,
            ctx.NAME().getText(),
            this.getParameters(ctx.parameters()),
            this.getSuite(ctx.suite())
        );
    }

    getParameters(ctx) {

        let args = {};

        if (ctx.typedargslist()) {
            ctx.typedargslist().tfpdef().forEach(argctx =>
                args[argctx.NAME().getText()] = new ASTNodes.UNDEFINED_NODE(
                    argctx.NAME().getText()
                )
            );
        }

        return args;
    }

    getSuite(ctx) {

        //console.log('SUITE');

        if (ctx.simple_stmt()) {
            return this.getSimpleStmt(ctx.simple_stmt());
        } else {
            return ctx.stmt().map(this.getStmt, this);
        }
    }

    getStmt(ctx) {

        //console.log('STMT');

        if (ctx.simple_stmt()) {
            return this.getSimpleStmt(ctx.simple_stmt());
        } else {
            return this.getCompoundStmt(ctx.compound_stmt());
        }
    }

    getSimpleStmt(ctx) {
        //console.log('SIMPLE STMT');
        //return ctx.small_stmt().map(this.getSmallStmt, this);
        return this.getSmallStmt(ctx.small_stmt(0));
    }

    getSmallStmt(ctx) {
        //console.log('SMALL STMT');
        if (ctx.flow_stmt()) {
            return this.getFlowStmt(ctx.flow_stmt());
        } else if (ctx.expr_stmt()) {
            return this.getExprStmt(ctx.expr_stmt());
        }
    }

    getExprStmt(ctx) {
        //console.log('EXPR STMT');
        if (ctx.children.length === 1) {
            return this.getTestListStarExpr(ctx.testlist_star_expr(0))
        }

        if (ctx.children[1].getText() === '=') {
            return new ASTNodes.ASSIGN_NODE(
                ctx,
                this.getTestListStarExpr(ctx.testlist_star_expr(0)),
                this.getExprStmtRec(ctx.children.slice(2))
            )
        }
    }

    getExprStmtRec(children) {
        if (children.length === 1) {
            return this.getTestListStarExpr(children[0]);
        }

        return new ASTNodes.ASSIGN_NODE(
            children[0],
            this.getTestListStarExpr(children[0]),
            this.getExprStmtRec(children.slice(2))
        )
    }

    getTestListStarExpr(ctx) {
        if (ctx.test().length === 1) {
            return this.getTest(ctx.test(0));
        }

        return new ASTNodes.LIST_EXPR_NODE(
            ctx.test().map(this.getTest, this)
        )
    }

    getStarExpr(ctx) {
        //
    }

    getFlowStmt(ctx) {
        if (ctx.return_stmt()) {
            return this.getReturnStmt(ctx.return_stmt())
        }
    }

    getReturnStmt(ctx) {
        return new ASTNodes.RETURN_NODE(
            ctx,
            ctx.testlist() ?
                ctx.testlist().test()
                    .map(this.getTest, this) : null
        )
    }

    getExpr(ctx) {

        if (ctx.xor_expr().length === 1) {
            return this.getXorExpr(ctx.xor_expr(0))
        }

        return new ASTNodes.OR_BIT_NODE(
            ctx.xor_expr().map(this.getXorExpr, this)
        );
    }

    getXorExpr(ctx) {

        if (ctx.and_expr().length === 1) {
            return this.getAndExpr(ctx.and_expr(0))
        }

        return new ASTNodes.XOR_BIT_NODE(
            ctx.and_expr().map(this.getAndExpr, this)
        )
    }

    getAndExpr(ctx) {

        if (ctx.shift_expr().length === 1) {
            return this.getShiftExpr(ctx.shift_expr(0))
        }

        return new ASTNodes.AND_BIT_NODE(
            ctx.shift_expr().map(this.getShiftExpr, this)
        )
    }

    getShiftExpr(ctx) {

        if (!ctx.children[1]) {
            return this.getArithExpr(ctx.arith_expr(0))
        }

        return new ASTNodes.SHIFT_BIT_NODE(
            ctx.children[1] ? ctx.children[1].getText() : null,
            this.getArithExpr(ctx.arith_expr(0)),
            ctx.arith_expr(1) ? this.getArithExpr(ctx.arith_expr(1)) : null
        )
    }

    getArithExpr(ctx) {
        if (ctx.children.length === 1) {
            return this.getTerm(ctx.term(0));
        }

        switch (ctx.children[1].getText()) {
            case '+': return new ASTNodes.PLUS_BINARY_NODE([
                this.getTerm(ctx.term(0)),
                this.getArithExprRec(ctx.children.slice(2))
            ]);
            case '-': return new ASTNodes.MINUS_BINARY_NODE([
                this.getTerm(ctx.term(0)),
                this.getArithExprRec(ctx.children.slice(2))
            ]);
        }
    }

    getArithExprRec(children) {
        if (children.length === 1) {
            return this.getTerm(children[0]);
        }

        switch (children[1].getText()) {
            case '+': return new ASTNodes.PLUS_BINARY_NODE([
                this.getTerm(children[0]),
                this.getArithExprRec(children.slice(2))
            ]);
            case '-': return new ASTNodes.MINUS_BINARY_NODE([
                this.getTerm(children[0]),
                this.getArithExprRec(children.slice(2))
            ]);
        }
    }

    getTerm(ctx) {
        if (ctx.children.length === 1) {
            return this.getFactor(ctx.factor(0));
        }

        switch (ctx.children[1].getText()) {
            case '*': return this.getTermRec(
                ctx.children.slice(3),
                new ASTNodes.MUL_BINARY_NODE([
                    this.getFactor(ctx.factor(0)),
                    this.getFactor(ctx.factor(1))
                ])
            );
            case '/': return this.getTermRec(
                ctx.children.slice(3),
                new ASTNodes.DIV_BINARY_NODE([
                    this.getFactor(ctx.factor(0)),
                    this.getFactor(ctx.factor(1))
                ])
            );
            case '%': return this.getTermRec(
                ctx.children.slice(3),
                new ASTNodes.MOD_BINARY_NODE([
                    this.getFactor(ctx.factor(0)),
                    this.getFactor(ctx.factor(1))
                ])
            );
            case '//': return this.getTermRec(
                ctx.children.slice(3),
                new ASTNodes.FLOOR_DIV_BINARY_NODE([
                    this.getFactor(ctx.factor(0)),
                    this.getFactor(ctx.factor(1))
                ])
            );
        }
    }

    getTermRec(children, stmt) {
        if (!children.length) {
            return stmt;
        }

        switch (children[0].getText()) {
            case '*': return this.getTermRec(
                children.slice(2),
                new ASTNodes.MUL_BINARY_NODE([
                    stmt,
                    this.getFactor(children[1])
                ])
            );
            case '/': return this.getTermRec(
                children.slice(2),
                new ASTNodes.DIV_BINARY_NODE([
                    stmt,
                    this.getFactor(children[1])
                ])
            );
            case '%': return this.getTermRec(
                children.slice(2),
                new ASTNodes.MOD_BINARY_NODE([
                    stmt,
                    this.getFactor(children[1])
                ])
            );
            case '//': return this.getTermRec(
                children.slice(2),
                new ASTNodes.FLOOR_DIV_BINARY_NODE([
                    stmt,
                    this.getFactor(children[1])
                ])
            );
        }
    }

    getFactor(ctx) {
        switch (ctx.children[0].getText()) {
            case '+': return new ASTNodes.PLUS_UNARY_NODE(
                this.getFactor(ctx.factor())
            );
            case '-': return new ASTNodes.MINUS_UNARY_NODE(
                this.getFactor(ctx.factor())
            );
            case '~': return new ASTNodes.NOT_BIT_NODE(
                this.getFactor(ctx.factor())
            );
            default: return this.getPower(ctx.power())
        }
    }

    getPower(ctx) {
        if (ctx.children.length === 1) {
            return this.getAtomExpr(ctx.atom_expr())
        }



        return new ASTNodes.POWER_NODE(
            this.getAtomExpr(ctx.atom_expr()),
            this.getFactor(ctx.factor())
        )
    }

    getAtomExpr(ctx) {

        let atomNode = this.getAtom(ctx.atom());

        if (!ctx.trailer().length) {
            return atomNode;
        } else {
            return this.getTrailer(atomNode, ctx.trailer());
        }
    }

    getTrailer(atomNode, trailers) {
        trailers.reverse();

        let trailerCtx = trailers[0],
            childNode = this.getTrailerRec(
                atomNode,
                trailers.slice(1)
            );

        if (trailerCtx.children[0].getText() === '(') {
            return new ASTNodes.FUNCTION_CALL_NODE(
                childNode,
                this.getArgList(trailerCtx.arglist())
            )
        } else if (trailerCtx.children[0].getText() === '[') {

            let subscriptList = this.getSubscriptList(trailerCtx.subscriptlist());

            if (subscriptList.slice) {
                return new ASTNodes.SLICE_NODE(
                    childNode,
                    subscriptList.start,
                    subscriptList.end,
                    subscriptList.step
                );
            } else {
                return new ASTNodes.ELEM_NODE(
                    childNode,
                    subscriptList.start
                )
            }

        } else if (trailerCtx.NAME()) {
            return new ASTNodes.PROPERTY_NODE(
                childNode,
                trailerCtx.NAME().getText()
            )
        }
    }

    getTrailerRec(atomNode, trailers) {
        if (!trailers.length) {
            return atomNode
        } else {
            let trailerCtx = trailers[0],
                childNode = this.getTrailerRec(
                    atomNode,
                    trailers.slice(1)
                );

            if (trailerCtx.children[0].getText() === '(') {
                return new ASTNodes.FUNCTION_CALL_NODE(
                    childNode,
                    this.getArgList(trailerCtx.arglist())
                )
            } else if (trailerCtx.children[0].getText() === '[') {

                let subscriptList = this.getSubscriptList(trailerCtx.subscriptlist());

                return new ASTNodes.SUBSCRIPT_NODE(
                    childNode,
                    subscriptList.start || null,
                    subscriptList.end || null,
                    subscriptList.step || null
                );
            } else if (trailerCtx.NAME()) {
                return new ASTNodes.PROPERTY_NODE(
                    childNode,
                    trailerCtx.NAME().getText()
                )
            }
        }
    }

    getArgList(ctx) {
        return new ASTNodes.ARGLIST_NODE(
            ctx ? ctx.argument().map(this.getArgument, this) : []
        )
    }

    getArgument(ctx) {
        return this.getTest(ctx.test(0))
    }

    getSubscriptList(ctx) {
        return this.getSubscript(ctx.subscript(0));
    }

    getSubscript(ctx) {
        if (ctx.test(0) && ctx.children.length === 1) {
            return {
                slice: false,
                start: this.getTest(ctx.test(0)),
                end: null,
                step: null
            };
        }

        let start = null,
            end = null;

        if (ctx.children[0].getText() !== ':') {
            start = this.getTest(ctx.test(0));
            end = ctx.test(1) ? this.getTest(ctx.test(1)) : null;
        } else {
            if (ctx.test(0) && ctx.children[1].getText() !== ':') {
                end = this.getTest(ctx.test(0))
            }
        }

        return {
            slice: true,
            start: start,
            end: end,
            step: ctx.sliceop(0) ? this.getSliceOp(ctx.sliceop(0)) : null
        };
    }

    getSliceOp(ctx) {
        return ctx.test(0) ? this.getTest(ctx.test(0)) : null;
    }

    getAtom(ctx) {

        let cyrSymbol = ctx.children[0].getText();

        if (ctx.NAME()) {
            return new ASTNodes.IDENT_NODE(ctx.NAME().getText());
        } else if (ctx.NUMBER()) {
            return new ASTNodes.NUMERIC_NODE(ctx.NUMBER().getText());
        } else if (['True', 'False'].indexOf(cyrSymbol) !== -1) {
            return new ASTNodes.BOOLEAN_NODE(cyrSymbol === 'True')
        }  else if (cyrSymbol === 'None') {
            return new ASTNodes.NONE_NODE();
        } else if (ctx.STRING(0)) {
            return new ASTNodes.STRING_NODE(ctx.STRING(0).getText());
        } else if (cyrSymbol === '(' && ctx.testlist_comp()) {
            return this.getTestListComp(ctx.testlist_comp());
        } else if (cyrSymbol === '[') {
            return new ASTNodes.ARRAY_LIST_NODE(
                ctx.testlist_comp() ? this.getTestListComp(ctx.testlist_comp()): []
            );
        }
    }

    getTestListComp(ctx) {
        if (ctx.test().length === 1) {
            return this.getTest(ctx.test(0));
        }

        return ctx.test().map(this.getTest, this);
    }

    getCompoundStmt(ctx) {
        if (ctx.if_stmt()) {
            return this.getIfStmt(ctx.if_stmt());
        } else if (ctx.while_stmt()) {
            return this.getWhileStmt(ctx.while_stmt());
        } else if (ctx.funcdef()) {
            return this.getFuncDef(ctx.funcdef());
        }
    }

    getIfStmt(ctx) {

        let ifBlocks = [],
            elseBlock = null,
            children = ctx.children.slice(4);

        ifBlocks.push({
            condition: this.getTest(ctx.test(0)),
            stmt: this.getSuite(ctx.suite(0)),
            ctx: ctx.test(0)
        });

        while (children.length && children[0].getText() === 'elif') {
            ifBlocks.push({
                condition: this.getTest(children[1]),
                stmt: this.getSuite(children[3]),
                ctx: children[1]
            });

            children = children.slice(4);
        }

        if (children.length) {
            elseBlock = {
                stmt: this.getSuite(children[2]),
                ctx: children[0]
            };
        }

        return new ASTNodes.IF_NODE(ctx, ifBlocks, elseBlock);
    }

    getTest(ctx) {
        return this.getOrTest(ctx.or_test(0));
    }

    getOrTest(ctx) {

        if (ctx.and_test().length === 1) {
            return this.getAndTest(ctx.and_test(0))
        }

        return new ASTNodes.OR_LOGICAL_NODE(
            ctx.and_test().map(this.getAndTest, this)
        );
    }

    getAndTest(ctx) {

        if (ctx.not_test().length === 1) {
            return this.getNotTest(ctx.not_test(0))
        }

        return new ASTNodes.AND_LOGICAL_NODE(
            ctx.not_test().map(this.getNotTest, this)
        )
    }

    getNotTest(ctx) {
        if (ctx.comparison()) {
            return this.getComparison(ctx.comparison());
        } else return new ASTNodes.NOT_LOGICAL_NODE(
            this.getNotTest(ctx.not_test())
        )
    }

    getComparison(ctx) {

        if (!ctx.comp_op(0)) {
            return this.getExpr(ctx.expr(0));
        }

        return new ASTNodes.COMPARISON_NODE(
            ctx.comp_op(0) ? ctx.comp_op(0).getText() : null,
            this.getExpr(ctx.expr(0)),
            ctx.expr(1) ? this.getExpr(ctx.expr(1)) : null
        );
    }

    getWhileStmt(ctx) {
        return new ASTNodes.WHILE_NODE(
            ctx,
            this.getTest(ctx.test(0)),
            this.getSuite(ctx.suite(0))
        )
    }
}

module.exports = ASTBuilder;
},{"./ASTNodes":50}],50:[function(require,module,exports){
var Scope = require('./Scope');

class NODE {
    text() {
        return this._text;
    }

    line() {
        return this.ctx.start.line;
    }
}

class CONTROL_FLOW_NODE extends NODE {

}

class TYPE_NODE extends NODE {

}

class ITERABLE extends TYPE_NODE {
    len() {
        return this.val.length;
    }

    elem(index) {
        return this.val[index];
    }
}

class UNDEFINED_NODE extends TYPE_NODE {
    constructor(name) {

        super();

        this.name = name;
    }

    cast() {
        return this;
    }

    reduce() {
        throw new Error(`Обращение к несуществующей переменной "${this.name}"`)
    }

    text() {
        throw new Error(`Обращение к несуществующей переменной "${this.name}"`)
    }

    value() {
        throw new Error(`Обращение к несуществующей переменной "${this.name}"`)
    }
}

class IDENT_NODE extends TYPE_NODE {
    constructor(name) {

        super();

        this.name = name;
        this.scope = new Scope();
    }

    reduce(outerScope) {
        this.scope = outerScope;

        if (!this.scope.hasSymbol(this.name)) {
            this.scope.putSymbol(this.name, new UNDEFINED_NODE(this.name));
        }

        return this;
    }

    text() {
        return this.value().text();
    }

    value() {

        let result = this.scope.getSymbol(this.name);

        while (result instanceof IDENT_NODE) {
            result = result.value();
        }

        if (result instanceof UNDEFINED_NODE) {
            throw new Error(`Обращение к несуществующей переменной "${this.name}"`)
        }

        return result;
    }
}

class NUMERIC_NODE extends TYPE_NODE {
    constructor(val) {

        super();

        if (val instanceof TYPE_NODE) {
            this.val = this.cast(val).val;
        } else if (typeof val === 'number') {
            this.val = val;
        } else if (typeof val === 'string') {
            this.val = Number(val);
        } else {
            throw new Error('Невозможно создать числовой тип: ', val);
        }
    }

    cast(obj) {
        if (obj instanceof NUMERIC_NODE) {
            return obj;
        } else if (obj instanceof STRING_NODE) {
            let num = Number(obj.val);

            if (!isNaN(num)) {
                return new NUMERIC_NODE(num);
            }

            throw new Error('Невозможно преобразовать строку в число: ' + obj.val);
        } else if (obj instanceof BOOLEAN_NODE) {
            return new NUMERIC_NODE(+obj.val);
        } else if (obj instanceof NONE_NODE) {
            throw new Error('Невозможно преобразовать None в число!');
        } else if (obj instanceof FUNCTION_NODE) {
            throw new Error('Невозможно преобразовать функцию в число!');
        }
    }

    clone() {
        return new NUMERIC_NODE(this.val);
    }

    reduce() {
        return this;
    }

    value() {
        return this;
    }

    text() {
        return this.val;
    }

}

class STRING_NODE extends ITERABLE {
    constructor(val) {

        super();

        if (val instanceof TYPE_NODE) {
            this.val = this.cast(val).val;
        } else if (typeof val === 'string') {
            this.val = val.replace(/^'|'$/g, '');
        } else {
            throw new Error('Невозможно создать строковый тип: ', val);
        }
    }

    cast(obj) {
        if (obj instanceof NUMERIC_NODE) {
            return new STRING_NODE(obj.val + '');
        } else if (obj instanceof STRING_NODE) {
            return obj;
        } else if (obj instanceof BOOLEAN_NODE) {
            throw new Error('Невозможно преобразовать логический тип в строку!');
        } else if (obj instanceof NONE_NODE) {
            throw new Error('Невозможно преобразовать None в строку!');
        } else if (obj instanceof FUNCTION_NODE) {
            throw new Error('Невозможно преобразовать функцию в строку!');
        }
    }

    clone() {
        return new STRING_NODE(this.val);
    }

    elem(index) {

        if (index < 0) {
            index = this.val.length + index;
        }

        if (index >= this.val.length) {
            throw new Error('Index out of range!');
        }

        return new STRING_NODE(this.val[index] || "");
    }

    slice(start, end, step) {
        start = start < 0 ? (this.len() + start) : start;
        end = end < 0 ? (this.len() + end) : end;

        if (start > this.len()) {
            start -= start % this.len();
        }
        if (end > this.len()) {
            end -= end % this.len();
        }

        let res = [],
            i = start;

        console.log('start: ', start);
        console.log('end: ', end);
        console.log('step: ', step);

        while ((start < end) && (i < end) || (end < start) && (i > end)) {
            //console.log(this.elem(i));
            res.push(this.val[i]);
            i += step;
        }

        if (start > end) {
            res.reverse()
        }

        return new STRING_NODE(res.join(''));
    }

    value() {
        return this;
    }

    reduce() {
        return this
    }

    text() {
        return `'${this.val}'`;
    }
}

class BOOLEAN_NODE extends TYPE_NODE {
    constructor(val) {

        super();

        if (val instanceof TYPE_NODE) {
            this.val = this.cast(val).val;
        } else if (typeof val === 'boolean') {
            this.val = val;
        } else if (typeof val === 'string') {
            this.val = (val === 'True');
        } else {
            throw new Error('Невозможно создать логический тип: ', val);
        }
    }

    clone() {
        return new BOOLEAN_NODE(this.val);
    }

    cast(obj) {
        if (obj instanceof NUMERIC_NODE) {
            return new BOOLEAN_NODE(obj.val !== 0);
        } else if (obj instanceof STRING_NODE) {
            return new BOOLEAN_NODE(obj.val.trim().length !== 0);
        } else if (obj instanceof BOOLEAN_NODE) {
            return obj;
        } else if (obj instanceof NONE_NODE) {
            throw new Error('Невозможно преобразовать None в строку!');
        } else if (obj instanceof FUNCTION_NODE) {
            throw new Error('Невозможно преобразовать функцию в строку!');
        }
    }

    reduce() {
        return this
    }

    value() {
        return this;
    }

    text() {
        return this.val ? 'True' : 'False';
    }
}

class NONE_NODE extends TYPE_NODE {
    constructor() {
        super();

        this.val = 'None';
    }

    clone() {
        return new NONE_NODE();
    }

    cast() {
        return this;
    }

    reduce() {
        return this;
    }

    value() {
        return this;
    }

    text() {
        return 'None';
    }
}

class FUNCTION_NODE extends TYPE_NODE {
    constructor(ctx, name, args, body, external = null) {

        super();

        this.ctx = ctx;
        this.name = name;
        this.args = args || {};
        this.body = body || [];
        this.scope = new Scope(null, this);

        for (let i = 0; i < this.body.length; i++) {
            while (this.body[i].length) {
                this.body[i] = this.body[i][0];
            }
        }

        if (typeof external === 'function') {
            this.external = external;
        }
    }

    clone() {

        let args = {};

        for (let name in this.args) {
            args[name] = this.args[name].clone()
        }

        let body = this.body.map(stmt => stmt.clone());

        return new FUNCTION_NODE(this.name, args, body, this.external);
    }

    value() {
        return this;
    }

    reduce(outerScope) {
        outerScope.putSymbol(this.name, this);

        return this;
    }
}


class IF_NODE extends CONTROL_FLOW_NODE {
    constructor(ctx, ifBlocks, elseBlock) {

        super();

        this.ctx = ctx;
        this.ifBlocks = ifBlocks;
        this.elseBlock = elseBlock;
    }

    reduce(outerScope) {
        for (let i = 0; i < this.ifBlocks.length; i++) {

            let cond = this.ifBlocks[i].condition.reduce(outerScope),
                flag = new BOOLEAN_NODE(cond.value());

            if (i == 0) {
                this._text = `${this.ifBlocks[i].ctx.start.line}. if ${cond.text()}:`;
            } else {
                this._text += '\n' + `${this.ifBlocks[i].ctx.start.line}. elif ${cond.text()}:`;
            }

            if (flag.val) {
                return this.ifBlocks[i].stmt;
            }
        }

        if (this.elseBlock) {
            this._text += '\n' + `${this.elseBlock.ctx.symbol.line}. else:`;
            return this.elseBlock.stmt || [];
        }

        return [];
    }
}

class WHILE_NODE extends CONTROL_FLOW_NODE {
    constructor(ctx, condition, stmts) {

        super();

        this.ctx = ctx;
        this.condition = condition;
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let cond = this.condition.reduce(outerScope),
            flag = new BOOLEAN_NODE(cond.value());

        this._text = `${this.line()}. while ${cond.text()}:`;

        if (flag.val) {
            return this.stmts.concat(this);
        }

        return [];
    }
}

class ASSIGN_NODE extends NODE {
    constructor(ctx, listLeft, listRight) {

        super();

        this.ctx = ctx;
        this.listLeft = listLeft;
        this.listRight = listRight;
    }

    reduce(outerScope) {

        let res = new NONE_NODE(),
            left = this.listLeft.reduce(outerScope),
            right = this.listRight.reduce(outerScope);

        if (!left.length) left = [left];
        if (!right.length) right = [right];

        left.forEach((stmt, i) => {
            if ((stmt instanceof IDENT_NODE) && right[i]) {
                res = right[i].value();
                outerScope.putSymbol(stmt.name, res);

                this._text = `${this.line()}. ${stmt.name} = ${res.text()}`;
            }
        });

        return res;
    }


}

class OR_LOGICAL_NODE extends NODE {
    constructor(stmts) {
        super();

        this.stmts = stmts;
    }

    reduce(outerScope) {
        //console.log('REDUCE LOGICAL OR:');

        let result = new NONE_NODE();
        let strings = [];

        for (let i = 0; i < this.stmts.length; i++) {

            result = this.stmts[i].reduce(outerScope).value();

            strings.push(result.text());

            if (new BOOLEAN_NODE(result).val) {
                this._text = strings.join(' or ');
                return result;
            }
        }

        this._text = strings.join(' or ');
        return result;
    }
}

class AND_LOGICAL_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        //console.log('REDUCE LOGICAL AND:');

        let result = new NONE_NODE();
        let strings = [];

        for (let i = 0; i < this.stmts.length; i++) {

            result = this.stmts[i].reduce(outerScope).value();
            strings.push(result.text());

            if (!(new BOOLEAN_NODE(result).val)) {
                this._text = strings.join(' and ');
                return result;
            }
        }

        this._text = strings.join(' and ');
        return result;
    }
}

class NOT_LOGICAL_NODE extends NODE {
    constructor(stmt) {
        super();
        this.stmt = stmt;
    }

    reduce(outerScope) {

        let result =  new BOOLEAN_NODE(!this.stmt.reduce(outerScope).value().val);

        this._text = result.text();

        return result;
    }
}

class RETURN_NODE extends CONTROL_FLOW_NODE {
    constructor(ctx, stmts) {

        super();

        this.ctx = ctx;
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let len = this.stmts.length,
            res = len ? this.stmts[len - 1].reduce(outerScope).value() : new NONE_NODE();

        this._text = `${this.line()}. return ${res.text()}`;

        return res;
    }
}

class OR_BIT_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);
        let strings = [res.text()];

        for (let i = 1; i < this.stmts.length; i++) {

            let right = this.stmts[i].reduce(outerScope).value();

            strings.push(right.text());

            res = new NUMERIC_NODE(res.val | right.val);
        }

        this._text = strings.join(' | ');

        return res;
    }
}

class AND_BIT_NODE extends NODE {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);
        let strings = [res.text()];

        for (let i = 1; i < this.stmts.length; i++) {

            let right = this.stmts[i].reduce(outerScope).value();

            strings.push(right.text());

            res = new NUMERIC_NODE(res.val & right.val);
        }

        this._text = strings.join(' | ');
        return res;
    }
}

class XOR_BIT_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE(res.val ^ this.stmts[i].reduce(outerScope).value().val);
        }

        return res;
    }
}

class SHIFT_BIT_NODE extends NODE  {
    constructor(op, stmtLeft, stmtRight) {

        super();

        this.op = op;
        this.stmtLeft = stmtLeft;
        this.stmtRight = stmtRight;
    }

    reduce(outerScope) {
        let left = new NUMERIC_NODE(this.stmtLeft.reduce(outerScope).value().val),
            right = this.stmtRight ? new NUMERIC_NODE(this.stmtRight.reduce(outerScope).value().val) : null;

        if (right === null) {
            return left;
        }

        return this.op === '>>' ? new NUMERIC_NODE(left.val >> right.val) : new NUMERIC_NODE(left.val << right.val);
    }
}

class PLUS_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {

        let res = this.stmts[0].reduce(outerScope).value(),
            strings = [res.text()],
            Type = NUMERIC_NODE;

        if (res instanceof STRING_NODE) {
            Type = STRING_NODE
        } else if (res instanceof ARRAY_LIST_NODE) {
            Type = ARRAY_LIST_NODE;
        }

        for (let i = 1; i < this.stmts.length; i++) {

            let stmt = this.stmts[i].reduce(outerScope).value();

            if (Type === NUMERIC_NODE || Type === STRING_NODE || Type === BOOLEAN_NODE) {
                res = new Type(res.val + stmt.val).value();
            } else if (Type === ARRAY_LIST_NODE) {
                if (stmt instanceof ARRAY_LIST_NODE) {
                    res = new ARRAY_LIST_NODE(res.val.concat(stmt.val));

                    res.val = res.items;
                }
            }

            strings.push(res.text())
        }

        this._text = strings.join(' + ');

        return res;
    }
}

class MINUS_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE(res.val - this.stmts[i].reduce(outerScope).value().val);
        }

        return res;
    }
}

class MUL_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE(res.val * this.stmts[i].reduce(outerScope).value().val);
        }

        return res;
    }
}

class DIV_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE(res.val / this.stmts[i].reduce(outerScope).value().val);
        }

        return res;
    }
}

class FLOOR_DIV_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE((res.val / this.stmts[i].reduce(outerScope).value().val) >> 0);
        }

        return res;
    }
}

class MOD_BINARY_NODE extends NODE  {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        let res = new NUMERIC_NODE(this.stmts[0].reduce(outerScope).value().val);

        for (let i = 1; i < this.stmts.length; i++) {
            res = new NUMERIC_NODE(res.val % this.stmts[i].reduce(outerScope).value().val);
        }

        return res;
    }
}

class PLUS_UNARY_NODE extends NODE {
    constructor(stmt) {
        super();
        this.stmt = stmt;
    }

    reduce(outerScope) {
        return new NUMERIC_NODE( + this.stmt.reduce(outerScope).value().val );
    }
}

class MINUS_UNARY_NODE extends NODE {
    constructor(stmt) {
        super();
        this.stmt = stmt;
    }

    reduce(outerScope) {
        return new NUMERIC_NODE( - this.stmt.reduce(outerScope).value().val );
    }
}

class NOT_BIT_NODE extends NODE {
    constructor(stmt) {
        super();
        this.stmt = stmt;
    }

    reduce(outerScope) {
        return new NUMERIC_NODE( ~ this.stmt.reduce(outerScope).value().val );
    }
}

class POWER_NODE extends NODE {
    constructor(stmtLeft, stmtRight) {
        super();
        this.stmtLeft = stmtLeft;
        this.stmtRight = stmtRight;
    }

    reduce(outerScope) {
        let base = this.stmtLeft.reduce(outerScope).value(),
            count = this.stmtRight ? this.stmtRight.reduce(outerScope).value() : new NUMERIC_NODE(1);

        if (base instanceof NUMERIC_NODE && count instanceof NUMERIC_NODE) {
            return new NUMERIC_NODE(Math.pow(base.val, count.val));
        }
    }
}

class COMPARISON_NODE extends NODE {
    constructor(op, stmtLeft, stmtRight) {
        super();
        this.op = op;
        this.stmtLeft = stmtLeft;
        this.stmtRight = stmtRight;
    }

    reduce(outerScope) {
        let left = this.stmtLeft.reduce(outerScope).value(),
            right = this.stmtRight ? this.stmtRight.reduce(outerScope).value() : null;

        //console.log(`${left.text()} ${this.op} ${right.text()}`);
        if (right === null) {
            this._text = left.text();
            return left;
        }

        this._text = `${left.text()} ${this.op} ${right.text()}`;

        switch (this.op) {
            case '<': return new BOOLEAN_NODE(left.val < right.val);
            case '>': return new BOOLEAN_NODE(left.val > right.val);
            case '>=': return new BOOLEAN_NODE(left.val >= right.val);
            case '<=': return new BOOLEAN_NODE(left.val <= right.val);
            case '==': return new BOOLEAN_NODE(left.val == right.val);
            case '!=':
            case '<>': return new BOOLEAN_NODE(left.val != right.val);
        }
    }
}

class LIST_EXPR_NODE extends NODE {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        return this.stmts.map(stmt => stmt.reduce(outerScope));
    }
}

class FUNCTION_CALL_NODE extends NODE {
    constructor(ident, arglist) {
        super();

        this.ident = ident;
        this.arglist = arglist;
    }

    reduce(outerScope) {
        var functionNode = this.ident.reduce(outerScope).value();

        if (functionNode instanceof FUNCTION_NODE && functionNode) {

            let scope = new Scope(outerScope, functionNode),
                args = this.arglist.reduce(outerScope),
                argsMap = {};

            Object.keys(functionNode.args).forEach(
                (argName, index) => {
                    let symbol = args[index] || (new UNDEFINED_NODE(argName));

                    argsMap[argName] = symbol.text();

                    scope.putSymbol(argName, symbol.value());

                }
            );

            this._text = '';

            if (functionNode.ctx) {
                this._text = functionNode.line() + '. ';
            }

            if (functionNode.external) {

                this._text += `${functionNode.name}(${Object.keys(argsMap).map(
                        name => argsMap[name]
                ).join(', ')})`;

                return (functionNode.external(args.map(arg => arg.value()), scope) || (new NONE_NODE()));
            } else {
                this._text += `def ${functionNode.name}(${Object.keys(argsMap).map(
                        name => `${name} = ${argsMap[name]}`
                ).join(', ')})`;

                let queue = functionNode.body.slice(),
                    node = null;

                while (queue.length) {

                    node = queue.shift();

                    let res = node.reduce(scope);

                    //console.log(node.text());

                    if (node instanceof CONTROL_FLOW_NODE) {
                        this._text += '\n' + node.text();

                        if (node instanceof RETURN_NODE) {
                            console.log(this._text);
                            return res;
                        } else {
                            queue.unshift(...res);
                        }
                    } else {
                        this._text += '\n' + node.text();
                    }
                }

                console.log(this._text);

                return new NONE_NODE();
            }

        } else {
            throw new Error(`Невозможно вызвать несуществующую функцию "${functionNode}"!`);
        }
    }
}

class ELEM_NODE extends NODE  {
    constructor(obj, index) {
        super();
        this.obj = obj;
        this.index = index;
    }

    reduce(outerScope) {
        var obj = this.obj.reduce(outerScope).value(),
            index = this.index.reduce(outerScope).value();

        if ((obj instanceof ITERABLE) && (index instanceof NUMERIC_NODE)) {
            return obj.elem(index.val);
        }
    }
}

class SLICE_NODE extends NODE  {
    constructor(obj,start, end, step) {
        super();
        this.obj = obj;
        this.start = start;
        this.end = end;
        this.step = step;
    }

    reduce(outerScope) {
        var obj = this.obj.reduce(outerScope).value();

        if (obj instanceof ITERABLE) {

            //console.log(this.start);
            //console.log(this.end);
            //console.log(this.step);

            let length = obj.len(),
                startIndex = this.start ? this.start.reduce(outerScope).value() : new NUMERIC_NODE(0),
                endIndex = this.end ? this.end.reduce(outerScope).value() : new NUMERIC_NODE(length),
                step = this.step ? this.step.reduce(outerScope).value() : new NUMERIC_NODE(startIndex.val < endIndex.val ? 1 : -1);

            let res = obj.slice(startIndex.val, endIndex.val, step.val);

            this._text = res.text();

            return res;
        }
    }
}

class PROPERTY_NODE extends NODE  {
    constructor(obj, name) {
        super();
        this.obj = obj;
        this.name = name;
    }

    reduce(outerScope) {

    }
}

class ARRAY_LIST_NODE extends ITERABLE {
    constructor(items = []) {
        super();

        if (!(items instanceof Array)) {
            items = [items];
        }

        this.val = [];
        this.items = items;
    }

    reduce(outerScope) {
        this.val = this.items.map(
            item => item.reduce(outerScope).value()
        );

        console.log('VAL:::');
        console.log(this.val);

        return this;
    }

    clone() {
        return new ARRAY_LIST_NODE(
            JSON.parse(JSON.stringify(this.val))
        );
    }

    elem(index) {

        if (index < 0) {
            index = this.len() + index;
        }

        if ((index >= this.len()) || (index < 0)) {
            return null
        }

        console.log('VAL:::');
        console.log(this.val[index] instanceof NUMERIC_NODE);

        return this.val[index].clone();
    }

    slice(start, end, step) {
        start = start < 0 ? (this.len() + start) : start;
        end = end < 0 ? (this.len() + end) : end;

        if (start > this.len()) {
            start -= start % this.len();
        }
        if (end > this.len()) {
            end -= end % this.len();
        }

        let res = [],
            i = start;

        while ((start < end) && (i < end) || (end < start) && (i > end)) {
            let elem = this.elem(i);

            if (elem !== null) {
                res.push(elem);
            }

            i += step;
        }

        if (start > end) {
            res.reverse()
        }

        res = res.map(node => node.clone());

        let list = new ARRAY_LIST_NODE(res);
        list.val = res;

        return list;
    }

    value() {
        return this;
    }

    text() {
        return `[ ${this.val.map(elem => elem.text()).join(', ')} ]`;
    }
}

class ARGLIST_NODE extends NODE {
    constructor(stmts) {
        super();
        this.stmts = stmts;
    }

    reduce(outerScope) {
        return this.stmts.map(
            stmt => stmt.reduce(outerScope)
        );
    }
}


module.exports = {
    FUNCTION_NODE,
    IF_NODE,
    WHILE_NODE,
    ASSIGN_NODE,
    OR_LOGICAL_NODE,
    AND_LOGICAL_NODE,
    NOT_LOGICAL_NODE,
    RETURN_NODE,
    OR_BIT_NODE,
    AND_BIT_NODE,
    XOR_BIT_NODE,
    SHIFT_BIT_NODE,
    PLUS_BINARY_NODE,
    MINUS_BINARY_NODE,
    MUL_BINARY_NODE,
    DIV_BINARY_NODE,
    PLUS_UNARY_NODE,
    MINUS_UNARY_NODE,
    NOT_BIT_NODE,
    POWER_NODE,
    IDENT_NODE,
    NUMERIC_NODE,
    STRING_NODE,
    BOOLEAN_NODE,
    COMPARISON_NODE,
    MOD_BINARY_NODE,
    LIST_EXPR_NODE,
    NONE_NODE,
    FUNCTION_CALL_NODE,
    ELEM_NODE,
    SLICE_NODE,
    PROPERTY_NODE,
    ARGLIST_NODE,
    FLOOR_DIV_BINARY_NODE,
    ARRAY_LIST_NODE,
    UNDEFINED_NODE
};
},{"./Scope":56}],51:[function(require,module,exports){

const ASTNodes = require('./ASTNodes');
const Scope = require('./Scope');

function createFunction(name, argv, handler) {
    let args = {};
    argv.forEach(argName => args[argName] = new ASTNodes.UNDEFINED_NODE(argName));
    return new ASTNodes.FUNCTION_NODE(null, name, args, [], handler);
}

module.exports.len = createFunction('len', ['arr'], function(args, scope) {
    let arr = args[0],
        length = 0;

    if (arr instanceof ASTNodes.STRING_NODE) {
        length = arr.val.length;
    } else if (arr instanceof ASTNodes.ARRAY_LIST_NODE) {
        length = arr.items.length;
    }

    return new ASTNodes.NUMERIC_NODE(length);
});

module.exports.sqrt = createFunction('sqrt', ['n'], function(args, scope) {
    let n = args[0];

    if (n instanceof ASTNodes.NUMERIC_NODE) {
        return new ASTNodes.NUMERIC_NODE(Math.sqrt(n.val));
    }
});

module.exports.str = createFunction('str', ['elem'], function(args, scope) {
    let elem = args[0];

    return new ASTNodes.STRING_NODE(elem);
});
},{"./ASTNodes":50,"./Scope":56}],52:[function(require,module,exports){
// Generated from src/interpreter/Python.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');


var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\2c\u0373\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\3\2\3\2\5\2\u00fe\n\2\3\3\3\3\3\3\5\3\u0103\n\3\3\4",
    "\3\4\3\4\3\4\5\4\u0109\n\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3",
    "\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3",
    "\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3",
    "\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3",
    "\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21",
    "\3\21\3\21\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3",
    "\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27",
    "\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3",
    "\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\34\3\34\3\34",
    "\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3",
    "\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3",
    "#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&",
    "\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\5(\u01cc\n(\3(\3(\5(\u01d0",
    "\n(\3(\5(\u01d3\n(\5(\u01d5\n(\3(\3(\3)\3)\7)\u01db\n)\f)\16)\u01de",
    "\13)\3*\3*\3*\3*\3*\5*\u01e5\n*\3*\3*\5*\u01e9\n*\3+\3+\3+\3+\3+\5+",
    "\u01f0\n+\3+\3+\5+\u01f4\n+\3,\3,\7,\u01f8\n,\f,\16,\u01fb\13,\3,\6",
    ",\u01fe\n,\r,\16,\u01ff\5,\u0202\n,\3-\3-\3-\6-\u0207\n-\r-\16-\u0208",
    "\3.\3.\3.\6.\u020e\n.\r.\16.\u020f\3/\3/\3/\6/\u0215\n/\r/\16/\u0216",
    "\3\60\3\60\5\60\u021b\n\60\3\61\3\61\5\61\u021f\n\61\3\61\3\61\3\62",
    "\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3",
    "\67\3\67\38\38\39\39\3:\3:\3:\3;\3;\3<\3<\3<\3=\3=\3=\3>\3>\3?\3?\3",
    "@\3@\3A\3A\3A\3B\3B\3B\3C\3C\3D\3D\3E\3E\3F\3F\3G\3G\3G\3H\3H\3I\3I",
    "\3I\3J\3J\3J\3K\3K\3L\3L\3M\3M\3M\3N\3N\3N\3O\3O\3O\3P\3P\3P\3Q\3Q\3",
    "Q\3R\3R\3S\3S\3S\3T\3T\3T\3U\3U\3U\3V\3V\3V\3W\3W\3W\3X\3X\3X\3Y\3Y",
    "\3Y\3Z\3Z\3Z\3[\3[\3[\3\\\3\\\3\\\3]\3]\3]\3]\3^\3^\3^\3^\3_\3_\3_\3",
    "_\3`\3`\3`\3`\3a\3a\3a\5a\u02a7\na\3a\3a\3b\3b\3c\3c\3c\7c\u02b0\nc",
    "\fc\16c\u02b3\13c\3c\3c\3c\3c\7c\u02b9\nc\fc\16c\u02bc\13c\3c\5c\u02bf",
    "\nc\3d\3d\3d\3d\3d\7d\u02c6\nd\fd\16d\u02c9\13d\3d\3d\3d\3d\3d\3d\3",
    "d\3d\7d\u02d3\nd\fd\16d\u02d6\13d\3d\3d\3d\5d\u02db\nd\3e\3e\5e\u02df",
    "\ne\3f\3f\3g\3g\3g\3g\5g\u02e7\ng\3h\3h\3i\3i\3j\3j\3k\3k\3l\3l\3m\5",
    "m\u02f4\nm\3m\3m\3m\3m\5m\u02fa\nm\3n\3n\5n\u02fe\nn\3n\3n\3o\6o\u0303",
    "\no\ro\16o\u0304\3p\3p\6p\u0309\np\rp\16p\u030a\3q\3q\5q\u030f\nq\3",
    "q\6q\u0312\nq\rq\16q\u0313\3r\3r\3r\7r\u0319\nr\fr\16r\u031c\13r\3r",
    "\3r\3r\3r\7r\u0322\nr\fr\16r\u0325\13r\3r\5r\u0328\nr\3s\3s\3s\3s\3",
    "s\7s\u032f\ns\fs\16s\u0332\13s\3s\3s\3s\3s\3s\3s\3s\3s\7s\u033c\ns\f",
    "s\16s\u033f\13s\3s\3s\3s\5s\u0344\ns\3t\3t\5t\u0348\nt\3u\5u\u034b\n",
    "u\3v\5v\u034e\nv\3w\5w\u0351\nw\3x\3x\3x\3y\6y\u0357\ny\ry\16y\u0358",
    "\3z\3z\7z\u035d\nz\fz\16z\u0360\13z\3{\3{\5{\u0364\n{\3{\5{\u0367\n",
    "{\3{\3{\5{\u036b\n{\3|\5|\u036e\n|\3}\3}\5}\u0372\n}\6\u02c7\u02d4\u0330",
    "\u033d\2~\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33",
    "\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67",
    "\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65",
    "i\66k\67m8o9q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089F\u008b",
    "G\u008dH\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009bO\u009dP\u009f",
    "Q\u00a1R\u00a3S\u00a5T\u00a7U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3",
    "[\u00b5\\\u00b7]\u00b9^\u00bb_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5\2\u00c7",
    "\2\u00c9\2\u00cb\2\u00cd\2\u00cf\2\u00d1\2\u00d3\2\u00d5\2\u00d7\2\u00d9",
    "\2\u00db\2\u00dd\2\u00df\2\u00e1\2\u00e3\2\u00e5\2\u00e7\2\u00e9\2\u00eb",
    "\2\u00ed\2\u00ef\2\u00f1\2\u00f3\2\u00f5\2\u00f7\2\u00f9\2\3\2\33\b",
    "\2HHTTWWhhttww\4\2HHhh\4\2TTtt\4\2DDdd\4\2QQqq\4\2ZZzz\4\2LLll\6\2\f",
    "\f\16\17))^^\6\2\f\f\16\17$$^^\3\2^^\3\2\63;\3\2\62;\3\2\629\5\2\62",
    ";CHch\3\2\62\63\4\2GGgg\4\2--//\7\2\2\13\r\16\20(*]_\u0081\7\2\2\13",
    "\r\16\20#%]_\u0081\4\2\2]_\u0081\3\2\2\u0081\4\2\13\13\"\"\4\2\f\f\16",
    "\17\u0129\2C\\aac|\u00ac\u00ac\u00b7\u00b7\u00bc\u00bc\u00c2\u00d8\u00da",
    "\u00f8\u00fa\u0243\u0252\u02c3\u02c8\u02d3\u02e2\u02e6\u02f0\u02f0\u037c",
    "\u037c\u0388\u0388\u038a\u038c\u038e\u038e\u0390\u03a3\u03a5\u03d0\u03d2",
    "\u03f7\u03f9\u0483\u048c\u04d0\u04d2\u04fb\u0502\u0511\u0533\u0558\u055b",
    "\u055b\u0563\u0589\u05d2\u05ec\u05f2\u05f4\u0623\u063c\u0642\u064c\u0670",
    "\u0671\u0673\u06d5\u06d7\u06d7\u06e7\u06e8\u06f0\u06f1\u06fc\u06fe\u0701",
    "\u0701\u0712\u0712\u0714\u0731\u074f\u076f\u0782\u07a7\u07b3\u07b3\u0906",
    "\u093b\u093f\u093f\u0952\u0952\u095a\u0963\u097f\u097f\u0987\u098e\u0991",
    "\u0992\u0995\u09aa\u09ac\u09b2\u09b4\u09b4\u09b8\u09bb\u09bf\u09bf\u09d0",
    "\u09d0\u09de\u09df\u09e1\u09e3\u09f2\u09f3\u0a07\u0a0c\u0a11\u0a12\u0a15",
    "\u0a2a\u0a2c\u0a32\u0a34\u0a35\u0a37\u0a38\u0a3a\u0a3b\u0a5b\u0a5e\u0a60",
    "\u0a60\u0a74\u0a76\u0a87\u0a8f\u0a91\u0a93\u0a95\u0aaa\u0aac\u0ab2\u0ab4",
    "\u0ab5\u0ab7\u0abb\u0abf\u0abf\u0ad2\u0ad2\u0ae2\u0ae3\u0b07\u0b0e\u0b11",
    "\u0b12\u0b15\u0b2a\u0b2c\u0b32\u0b34\u0b35\u0b37\u0b3b\u0b3f\u0b3f\u0b5e",
    "\u0b5f\u0b61\u0b63\u0b73\u0b73\u0b85\u0b85\u0b87\u0b8c\u0b90\u0b92\u0b94",
    "\u0b97\u0b9b\u0b9c\u0b9e\u0b9e\u0ba0\u0ba1\u0ba5\u0ba6\u0baa\u0bac\u0bb0",
    "\u0bbb\u0c07\u0c0e\u0c10\u0c12\u0c14\u0c2a\u0c2c\u0c35\u0c37\u0c3b\u0c62",
    "\u0c63\u0c87\u0c8e\u0c90\u0c92\u0c94\u0caa\u0cac\u0cb5\u0cb7\u0cbb\u0cbf",
    "\u0cbf\u0ce0\u0ce0\u0ce2\u0ce3\u0d07\u0d0e\u0d10\u0d12\u0d14\u0d2a\u0d2c",
    "\u0d3b\u0d62\u0d63\u0d87\u0d98\u0d9c\u0db3\u0db5\u0dbd\u0dbf\u0dbf\u0dc2",
    "\u0dc8\u0e03\u0e32\u0e34\u0e35\u0e42\u0e48\u0e83\u0e84\u0e86\u0e86\u0e89",
    "\u0e8a\u0e8c\u0e8c\u0e8f\u0e8f\u0e96\u0e99\u0e9b\u0ea1\u0ea3\u0ea5\u0ea7",
    "\u0ea7\u0ea9\u0ea9\u0eac\u0ead\u0eaf\u0eb2\u0eb4\u0eb5\u0ebf\u0ebf\u0ec2",
    "\u0ec6\u0ec8\u0ec8\u0ede\u0edf\u0f02\u0f02\u0f42\u0f49\u0f4b\u0f6c\u0f8a",
    "\u0f8d\u1002\u1023\u1025\u1029\u102b\u102c\u1052\u1057\u10a2\u10c7\u10d2",
    "\u10fc\u10fe\u10fe\u1102\u115b\u1161\u11a4\u11aa\u11fb\u1202\u124a\u124c",
    "\u124f\u1252\u1258\u125a\u125a\u125c\u125f\u1262\u128a\u128c\u128f\u1292",
    "\u12b2\u12b4\u12b7\u12ba\u12c0\u12c2\u12c2\u12c4\u12c7\u12ca\u12d8\u12da",
    "\u1312\u1314\u1317\u131a\u135c\u1382\u1391\u13a2\u13f6\u1403\u166e\u1671",
    "\u1678\u1683\u169c\u16a2\u16ec\u16f0\u16f2\u1702\u170e\u1710\u1713\u1722",
    "\u1733\u1742\u1753\u1762\u176e\u1770\u1772\u1782\u17b5\u17d9\u17d9\u17de",
    "\u17de\u1822\u1879\u1882\u18aa\u1902\u191e\u1952\u196f\u1972\u1976\u1982",
    "\u19ab\u19c3\u19c9\u1a02\u1a18\u1d02\u1dc1\u1e02\u1e9d\u1ea2\u1efb\u1f02",
    "\u1f17\u1f1a\u1f1f\u1f22\u1f47\u1f4a\u1f4f\u1f52\u1f59\u1f5b\u1f5b\u1f5d",
    "\u1f5d\u1f5f\u1f5f\u1f61\u1f7f\u1f82\u1fb6\u1fb8\u1fbe\u1fc0\u1fc0\u1fc4",
    "\u1fc6\u1fc8\u1fce\u1fd2\u1fd5\u1fd8\u1fdd\u1fe2\u1fee\u1ff4\u1ff6\u1ff8",
    "\u1ffe\u2073\u2073\u2081\u2081\u2092\u2096\u2104\u2104\u2109\u2109\u210c",
    "\u2115\u2117\u2117\u211a\u211f\u2126\u2126\u2128\u2128\u212a\u212a\u212c",
    "\u2133\u2135\u213b\u213e\u2141\u2147\u214b\u2162\u2185\u2c02\u2c30\u2c32",
    "\u2c60\u2c82\u2ce6\u2d02\u2d27\u2d32\u2d67\u2d71\u2d71\u2d82\u2d98\u2da2",
    "\u2da8\u2daa\u2db0\u2db2\u2db8\u2dba\u2dc0\u2dc2\u2dc8\u2dca\u2dd0\u2dd2",
    "\u2dd8\u2dda\u2de0\u3007\u3009\u3023\u302b\u3033\u3037\u303a\u303e\u3043",
    "\u3098\u309d\u30a1\u30a3\u30fc\u30fe\u3101\u3107\u312e\u3133\u3190\u31a2",
    "\u31b9\u31f2\u3201\u3402\u4db7\u4e02\u9fbd\ua002\ua48e\ua802\ua803\ua805",
    "\ua807\ua809\ua80c\ua80e\ua824\uac02\ud7a5\uf902\ufa2f\ufa32\ufa6c\ufa72",
    "\ufadb\ufb02\ufb08\ufb15\ufb19\ufb1f\ufb1f\ufb21\ufb2a\ufb2c\ufb38\ufb3a",
    "\ufb3e\ufb40\ufb40\ufb42\ufb43\ufb45\ufb46\ufb48\ufbb3\ufbd5\ufd3f\ufd52",
    "\ufd91\ufd94\ufdc9\ufdf2\ufdfd\ufe72\ufe76\ufe78\ufefe\uff23\uff3c\uff43",
    "\uff5c\uff68\uffc0\uffc4\uffc9\uffcc\uffd1\uffd4\uffd9\uffdc\uffde\u0096",
    "\2\62;\u0302\u0371\u0485\u0488\u0593\u05bb\u05bd\u05bf\u05c1\u05c1\u05c3",
    "\u05c4\u05c6\u05c7\u05c9\u05c9\u0612\u0617\u064d\u0660\u0662\u066b\u0672",
    "\u0672\u06d8\u06de\u06e1\u06e6\u06e9\u06ea\u06ec\u06ef\u06f2\u06fb\u0713",
    "\u0713\u0732\u074c\u07a8\u07b2\u0903\u0905\u093e\u093e\u0940\u094f\u0953",
    "\u0956\u0964\u0965\u0968\u0971\u0983\u0985\u09be\u09be\u09c0\u09c6\u09c9",
    "\u09ca\u09cd\u09cf\u09d9\u09d9\u09e4\u09e5\u09e8\u09f1\u0a03\u0a05\u0a3e",
    "\u0a3e\u0a40\u0a44\u0a49\u0a4a\u0a4d\u0a4f\u0a68\u0a73\u0a83\u0a85\u0abe",
    "\u0abe\u0ac0\u0ac7\u0ac9\u0acb\u0acd\u0acf\u0ae4\u0ae5\u0ae8\u0af1\u0b03",
    "\u0b05\u0b3e\u0b3e\u0b40\u0b45\u0b49\u0b4a\u0b4d\u0b4f\u0b58\u0b59\u0b68",
    "\u0b71\u0b84\u0b84\u0bc0\u0bc4\u0bc8\u0bca\u0bcc\u0bcf\u0bd9\u0bd9\u0be8",
    "\u0bf1\u0c03\u0c05\u0c40\u0c46\u0c48\u0c4a\u0c4c\u0c4f\u0c57\u0c58\u0c68",
    "\u0c71\u0c84\u0c85\u0cbe\u0cbe\u0cc0\u0cc6\u0cc8\u0cca\u0ccc\u0ccf\u0cd7",
    "\u0cd8\u0ce8\u0cf1\u0d04\u0d05\u0d40\u0d45\u0d48\u0d4a\u0d4c\u0d4f\u0d59",
    "\u0d59\u0d68\u0d71\u0d84\u0d85\u0dcc\u0dcc\u0dd1\u0dd6\u0dd8\u0dd8\u0dda",
    "\u0de1\u0df4\u0df5\u0e33\u0e33\u0e36\u0e3c\u0e49\u0e50\u0e52\u0e5b\u0eb3",
    "\u0eb3\u0eb6\u0ebb\u0ebd\u0ebe\u0eca\u0ecf\u0ed2\u0edb\u0f1a\u0f1b\u0f22",
    "\u0f2b\u0f37\u0f37\u0f39\u0f39\u0f3b\u0f3b\u0f40\u0f41\u0f73\u0f86\u0f88",
    "\u0f89\u0f92\u0f99\u0f9b\u0fbe\u0fc8\u0fc8\u102e\u1034\u1038\u103b\u1042",
    "\u104b\u1058\u105b\u1361\u1361\u136b\u1373\u1714\u1716\u1734\u1736\u1754",
    "\u1755\u1774\u1775\u17b8\u17d5\u17df\u17df\u17e2\u17eb\u180d\u180f\u1812",
    "\u181b\u18ab\u18ab\u1922\u192d\u1932\u193d\u1948\u1951\u19b2\u19c2\u19ca",
    "\u19cb\u19d2\u19db\u1a19\u1a1d\u1dc2\u1dc5\u2041\u2042\u2056\u2056\u20d2",
    "\u20de\u20e3\u20e3\u20e7\u20ed\u302c\u3031\u309b\u309c\ua804\ua804\ua808",
    "\ua808\ua80d\ua80d\ua825\ua829\ufb20\ufb20\ufe02\ufe11\ufe22\ufe25\ufe35",
    "\ufe36\ufe4f\ufe51\uff12\uff1b\uff41\uff41\u0393\2\3\3\2\2\2\2\5\3\2",
    "\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2",
    "\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33",
    "\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2",
    "\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2",
    "\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3",
    "\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2",
    "\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2",
    "\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2",
    "\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2",
    "o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{",
    "\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2\2\2",
    "\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u0089\3\2\2\2\2\u008b\3\2\2\2\2\u008d",
    "\3\2\2\2\2\u008f\3\2\2\2\2\u0091\3\2\2\2\2\u0093\3\2\2\2\2\u0095\3\2",
    "\2\2\2\u0097\3\2\2\2\2\u0099\3\2\2\2\2\u009b\3\2\2\2\2\u009d\3\2\2\2",
    "\2\u009f\3\2\2\2\2\u00a1\3\2\2\2\2\u00a3\3\2\2\2\2\u00a5\3\2\2\2\2\u00a7",
    "\3\2\2\2\2\u00a9\3\2\2\2\2\u00ab\3\2\2\2\2\u00ad\3\2\2\2\2\u00af\3\2",
    "\2\2\2\u00b1\3\2\2\2\2\u00b3\3\2\2\2\2\u00b5\3\2\2\2\2\u00b7\3\2\2\2",
    "\2\u00b9\3\2\2\2\2\u00bb\3\2\2\2\2\u00bd\3\2\2\2\2\u00bf\3\2\2\2\2\u00c1",
    "\3\2\2\2\2\u00c3\3\2\2\2\3\u00fd\3\2\2\2\5\u0102\3\2\2\2\7\u0108\3\2",
    "\2\2\t\u010a\3\2\2\2\13\u010e\3\2\2\2\r\u0115\3\2\2\2\17\u011b\3\2\2",
    "\2\21\u0120\3\2\2\2\23\u0127\3\2\2\2\25\u012a\3\2\2\2\27\u0131\3\2\2",
    "\2\31\u013a\3\2\2\2\33\u0141\3\2\2\2\35\u0144\3\2\2\2\37\u0149\3\2\2",
    "\2!\u014e\3\2\2\2#\u0154\3\2\2\2%\u0158\3\2\2\2\'\u015b\3\2\2\2)\u015f",
    "\3\2\2\2+\u0167\3\2\2\2-\u016c\3\2\2\2/\u0173\3\2\2\2\61\u017a\3\2\2",
    "\2\63\u017d\3\2\2\2\65\u0181\3\2\2\2\67\u0185\3\2\2\29\u0188\3\2\2\2",
    ";\u018d\3\2\2\2=\u0192\3\2\2\2?\u0198\3\2\2\2A\u019e\3\2\2\2C\u01a4",
    "\3\2\2\2E\u01a8\3\2\2\2G\u01ad\3\2\2\2I\u01b6\3\2\2\2K\u01bc\3\2\2\2",
    "M\u01c2\3\2\2\2O\u01d4\3\2\2\2Q\u01d8\3\2\2\2S\u01e4\3\2\2\2U\u01ef",
    "\3\2\2\2W\u0201\3\2\2\2Y\u0203\3\2\2\2[\u020a\3\2\2\2]\u0211\3\2\2\2",
    "_\u021a\3\2\2\2a\u021e\3\2\2\2c\u0222\3\2\2\2e\u0224\3\2\2\2g\u0228",
    "\3\2\2\2i\u022a\3\2\2\2k\u022d\3\2\2\2m\u0230\3\2\2\2o\u0232\3\2\2\2",
    "q\u0234\3\2\2\2s\u0236\3\2\2\2u\u0239\3\2\2\2w\u023b\3\2\2\2y\u023e",
    "\3\2\2\2{\u0241\3\2\2\2}\u0243\3\2\2\2\177\u0245\3\2\2\2\u0081\u0247",
    "\3\2\2\2\u0083\u024a\3\2\2\2\u0085\u024d\3\2\2\2\u0087\u024f\3\2\2\2",
    "\u0089\u0251\3\2\2\2\u008b\u0253\3\2\2\2\u008d\u0255\3\2\2\2\u008f\u0258",
    "\3\2\2\2\u0091\u025a\3\2\2\2\u0093\u025d\3\2\2\2\u0095\u0260\3\2\2\2",
    "\u0097\u0262\3\2\2\2\u0099\u0264\3\2\2\2\u009b\u0267\3\2\2\2\u009d\u026a",
    "\3\2\2\2\u009f\u026d\3\2\2\2\u00a1\u0270\3\2\2\2\u00a3\u0273\3\2\2\2",
    "\u00a5\u0275\3\2\2\2\u00a7\u0278\3\2\2\2\u00a9\u027b\3\2\2\2\u00ab\u027e",
    "\3\2\2\2\u00ad\u0281\3\2\2\2\u00af\u0284\3\2\2\2\u00b1\u0287\3\2\2\2",
    "\u00b3\u028a\3\2\2\2\u00b5\u028d\3\2\2\2\u00b7\u0290\3\2\2\2\u00b9\u0293",
    "\3\2\2\2\u00bb\u0297\3\2\2\2\u00bd\u029b\3\2\2\2\u00bf\u029f\3\2\2\2",
    "\u00c1\u02a6\3\2\2\2\u00c3\u02aa\3\2\2\2\u00c5\u02be\3\2\2\2\u00c7\u02da",
    "\3\2\2\2\u00c9\u02de\3\2\2\2\u00cb\u02e0\3\2\2\2\u00cd\u02e6\3\2\2\2",
    "\u00cf\u02e8\3\2\2\2\u00d1\u02ea\3\2\2\2\u00d3\u02ec\3\2\2\2\u00d5\u02ee",
    "\3\2\2\2\u00d7\u02f0\3\2\2\2\u00d9\u02f9\3\2\2\2\u00db\u02fd\3\2\2\2",
    "\u00dd\u0302\3\2\2\2\u00df\u0306\3\2\2\2\u00e1\u030c\3\2\2\2\u00e3\u0327",
    "\3\2\2\2\u00e5\u0343\3\2\2\2\u00e7\u0347\3\2\2\2\u00e9\u034a\3\2\2\2",
    "\u00eb\u034d\3\2\2\2\u00ed\u0350\3\2\2\2\u00ef\u0352\3\2\2\2\u00f1\u0356",
    "\3\2\2\2\u00f3\u035a\3\2\2\2\u00f5\u0361\3\2\2\2\u00f7\u036d\3\2\2\2",
    "\u00f9\u0371\3\2\2\2\u00fb\u00fe\5S*\2\u00fc\u00fe\5U+\2\u00fd\u00fb",
    "\3\2\2\2\u00fd\u00fc\3\2\2\2\u00fe\4\3\2\2\2\u00ff\u0103\5\7\4\2\u0100",
    "\u0103\5_\60\2\u0101\u0103\5a\61\2\u0102\u00ff\3\2\2\2\u0102\u0100\3",
    "\2\2\2\u0102\u0101\3\2\2\2\u0103\6\3\2\2\2\u0104\u0109\5W,\2\u0105\u0109",
    "\5Y-\2\u0106\u0109\5[.\2\u0107\u0109\5]/\2\u0108\u0104\3\2\2\2\u0108",
    "\u0105\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0107\3\2\2\2\u0109\b\3\2\2",
    "\2\u010a\u010b\7f\2\2\u010b\u010c\7g\2\2\u010c\u010d\7h\2\2\u010d\n",
    "\3\2\2\2\u010e\u010f\7t\2\2\u010f\u0110\7g\2\2\u0110\u0111\7v\2\2\u0111",
    "\u0112\7w\2\2\u0112\u0113\7t\2\2\u0113\u0114\7p\2\2\u0114\f\3\2\2\2",
    "\u0115\u0116\7t\2\2\u0116\u0117\7c\2\2\u0117\u0118\7k\2\2\u0118\u0119",
    "\7u\2\2\u0119\u011a\7g\2\2\u011a\16\3\2\2\2\u011b\u011c\7h\2\2\u011c",
    "\u011d\7t\2\2\u011d\u011e\7q\2\2\u011e\u011f\7o\2\2\u011f\20\3\2\2\2",
    "\u0120\u0121\7k\2\2\u0121\u0122\7o\2\2\u0122\u0123\7r\2\2\u0123\u0124",
    "\7q\2\2\u0124\u0125\7t\2\2\u0125\u0126\7v\2\2\u0126\22\3\2\2\2\u0127",
    "\u0128\7c\2\2\u0128\u0129\7u\2\2\u0129\24\3\2\2\2\u012a\u012b\7i\2\2",
    "\u012b\u012c\7n\2\2\u012c\u012d\7q\2\2\u012d\u012e\7d\2\2\u012e\u012f",
    "\7c\2\2\u012f\u0130\7n\2\2\u0130\26\3\2\2\2\u0131\u0132\7p\2\2\u0132",
    "\u0133\7q\2\2\u0133\u0134\7p\2\2\u0134\u0135\7n\2\2\u0135\u0136\7q\2",
    "\2\u0136\u0137\7e\2\2\u0137\u0138\7c\2\2\u0138\u0139\7n\2\2\u0139\30",
    "\3\2\2\2\u013a\u013b\7c\2\2\u013b\u013c\7u\2\2\u013c\u013d\7u\2\2\u013d",
    "\u013e\7g\2\2\u013e\u013f\7t\2\2\u013f\u0140\7v\2\2\u0140\32\3\2\2\2",
    "\u0141\u0142\7k\2\2\u0142\u0143\7h\2\2\u0143\34\3\2\2\2\u0144\u0145",
    "\7g\2\2\u0145\u0146\7n\2\2\u0146\u0147\7k\2\2\u0147\u0148\7h\2\2\u0148",
    "\36\3\2\2\2\u0149\u014a\7g\2\2\u014a\u014b\7n\2\2\u014b\u014c\7u\2\2",
    "\u014c\u014d\7g\2\2\u014d \3\2\2\2\u014e\u014f\7y\2\2\u014f\u0150\7",
    "j\2\2\u0150\u0151\7k\2\2\u0151\u0152\7n\2\2\u0152\u0153\7g\2\2\u0153",
    "\"\3\2\2\2\u0154\u0155\7h\2\2\u0155\u0156\7q\2\2\u0156\u0157\7t\2\2",
    "\u0157$\3\2\2\2\u0158\u0159\7k\2\2\u0159\u015a\7p\2\2\u015a&\3\2\2\2",
    "\u015b\u015c\7v\2\2\u015c\u015d\7t\2\2\u015d\u015e\7{\2\2\u015e(\3\2",
    "\2\2\u015f\u0160\7h\2\2\u0160\u0161\7k\2\2\u0161\u0162\7p\2\2\u0162",
    "\u0163\7c\2\2\u0163\u0164\7n\2\2\u0164\u0165\7n\2\2\u0165\u0166\7{\2",
    "\2\u0166*\3\2\2\2\u0167\u0168\7y\2\2\u0168\u0169\7k\2\2\u0169\u016a",
    "\7v\2\2\u016a\u016b\7j\2\2\u016b,\3\2\2\2\u016c\u016d\7g\2\2\u016d\u016e",
    "\7z\2\2\u016e\u016f\7e\2\2\u016f\u0170\7g\2\2\u0170\u0171\7r\2\2\u0171",
    "\u0172\7v\2\2\u0172.\3\2\2\2\u0173\u0174\7n\2\2\u0174\u0175\7c\2\2\u0175",
    "\u0176\7o\2\2\u0176\u0177\7d\2\2\u0177\u0178\7f\2\2\u0178\u0179\7c\2",
    "\2\u0179\60\3\2\2\2\u017a\u017b\7q\2\2\u017b\u017c\7t\2\2\u017c\62\3",
    "\2\2\2\u017d\u017e\7c\2\2\u017e\u017f\7p\2\2\u017f\u0180\7f\2\2\u0180",
    "\64\3\2\2\2\u0181\u0182\7p\2\2\u0182\u0183\7q\2\2\u0183\u0184\7v\2\2",
    "\u0184\66\3\2\2\2\u0185\u0186\7k\2\2\u0186\u0187\7u\2\2\u01878\3\2\2",
    "\2\u0188\u0189\7P\2\2\u0189\u018a\7q\2\2\u018a\u018b\7p\2\2\u018b\u018c",
    "\7g\2\2\u018c:\3\2\2\2\u018d\u018e\7V\2\2\u018e\u018f\7t\2\2\u018f\u0190",
    "\7w\2\2\u0190\u0191\7g\2\2\u0191<\3\2\2\2\u0192\u0193\7H\2\2\u0193\u0194",
    "\7c\2\2\u0194\u0195\7n\2\2\u0195\u0196\7u\2\2\u0196\u0197\7g\2\2\u0197",
    ">\3\2\2\2\u0198\u0199\7e\2\2\u0199\u019a\7n\2\2\u019a\u019b\7c\2\2\u019b",
    "\u019c\7u\2\2\u019c\u019d\7u\2\2\u019d@\3\2\2\2\u019e\u019f\7{\2\2\u019f",
    "\u01a0\7k\2\2\u01a0\u01a1\7g\2\2\u01a1\u01a2\7n\2\2\u01a2\u01a3\7f\2",
    "\2\u01a3B\3\2\2\2\u01a4\u01a5\7f\2\2\u01a5\u01a6\7g\2\2\u01a6\u01a7",
    "\7n\2\2\u01a7D\3\2\2\2\u01a8\u01a9\7r\2\2\u01a9\u01aa\7c\2\2\u01aa\u01ab",
    "\7u\2\2\u01ab\u01ac\7u\2\2\u01acF\3\2\2\2\u01ad\u01ae\7e\2\2\u01ae\u01af",
    "\7q\2\2\u01af\u01b0\7p\2\2\u01b0\u01b1\7v\2\2\u01b1\u01b2\7k\2\2\u01b2",
    "\u01b3\7p\2\2\u01b3\u01b4\7w\2\2\u01b4\u01b5\7g\2\2\u01b5H\3\2\2\2\u01b6",
    "\u01b7\7d\2\2\u01b7\u01b8\7t\2\2\u01b8\u01b9\7g\2\2\u01b9\u01ba\7c\2",
    "\2\u01ba\u01bb\7m\2\2\u01bbJ\3\2\2\2\u01bc\u01bd\7c\2\2\u01bd\u01be",
    "\7u\2\2\u01be\u01bf\7{\2\2\u01bf\u01c0\7p\2\2\u01c0\u01c1\7e\2\2\u01c1",
    "L\3\2\2\2\u01c2\u01c3\7c\2\2\u01c3\u01c4\7y\2\2\u01c4\u01c5\7c\2\2\u01c5",
    "\u01c6\7k\2\2\u01c6\u01c7\7v\2\2\u01c7N\3\2\2\2\u01c8\u01c9\6(\2\2\u01c9",
    "\u01d5\5\u00f1y\2\u01ca\u01cc\7\17\2\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc",
    "\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01d0\7\f\2\2\u01ce\u01d0\4\16\17",
    "\2\u01cf\u01cb\3\2\2\2\u01cf\u01ce\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1",
    "\u01d3\5\u00f1y\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d5",
    "\3\2\2\2\u01d4\u01c8\3\2\2\2\u01d4\u01cf\3\2\2\2\u01d5\u01d6\3\2\2\2",
    "\u01d6\u01d7\b(\2\2\u01d7P\3\2\2\2\u01d8\u01dc\5\u00f7|\2\u01d9\u01db",
    "\5\u00f9}\2\u01da\u01d9\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da\3\2",
    "\2\2\u01dc\u01dd\3\2\2\2\u01ddR\3\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01e5",
    "\t\2\2\2\u01e0\u01e1\t\3\2\2\u01e1\u01e5\t\4\2\2\u01e2\u01e3\t\4\2\2",
    "\u01e3\u01e5\t\3\2\2\u01e4\u01df\3\2\2\2\u01e4\u01e0\3\2\2\2\u01e4\u01e2",
    "\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e9\5\u00c5",
    "c\2\u01e7\u01e9\5\u00c7d\2\u01e8\u01e6\3\2\2\2\u01e8\u01e7\3\2\2\2\u01e9",
    "T\3\2\2\2\u01ea\u01f0\t\5\2\2\u01eb\u01ec\t\5\2\2\u01ec\u01f0\t\4\2",
    "\2\u01ed\u01ee\t\4\2\2\u01ee\u01f0\t\5\2\2\u01ef\u01ea\3\2\2\2\u01ef",
    "\u01eb\3\2\2\2\u01ef\u01ed\3\2\2\2\u01f0\u01f3\3\2\2\2\u01f1\u01f4\5",
    "\u00e3r\2\u01f2\u01f4\5\u00e5s\2\u01f3\u01f1\3\2\2\2\u01f3\u01f2\3\2",
    "\2\2\u01f4V\3\2\2\2\u01f5\u01f9\5\u00cfh\2\u01f6\u01f8\5\u00d1i\2\u01f7",
    "\u01f6\3\2\2\2\u01f8\u01fb\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3",
    "\2\2\2\u01fa\u0202\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fc\u01fe\7\62\2\2",
    "\u01fd\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200",
    "\3\2\2\2\u0200\u0202\3\2\2\2\u0201\u01f5\3\2\2\2\u0201\u01fd\3\2\2\2",
    "\u0202X\3\2\2\2\u0203\u0204\7\62\2\2\u0204\u0206\t\6\2\2\u0205\u0207",
    "\5\u00d3j\2\u0206\u0205\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0206\3\2",
    "\2\2\u0208\u0209\3\2\2\2\u0209Z\3\2\2\2\u020a\u020b\7\62\2\2\u020b\u020d",
    "\t\7\2\2\u020c\u020e\5\u00d5k\2\u020d\u020c\3\2\2\2\u020e\u020f\3\2",
    "\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3\2\2\2\u0210\\\3\2\2\2\u0211\u0212",
    "\7\62\2\2\u0212\u0214\t\5\2\2\u0213\u0215\5\u00d7l\2\u0214\u0213\3\2",
    "\2\2\u0215\u0216\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217",
    "^\3\2\2\2\u0218\u021b\5\u00d9m\2\u0219\u021b\5\u00dbn\2\u021a\u0218",
    "\3\2\2\2\u021a\u0219\3\2\2\2\u021b`\3\2\2\2\u021c\u021f\5_\60\2\u021d",
    "\u021f\5\u00ddo\2\u021e\u021c\3\2\2\2\u021e\u021d\3\2\2\2\u021f\u0220",
    "\3\2\2\2\u0220\u0221\t\b\2\2\u0221b\3\2\2\2\u0222\u0223\7\60\2\2\u0223",
    "d\3\2\2\2\u0224\u0225\7\60\2\2\u0225\u0226\7\60\2\2\u0226\u0227\7\60",
    "\2\2\u0227f\3\2\2\2\u0228\u0229\7,\2\2\u0229h\3\2\2\2\u022a\u022b\7",
    "*\2\2\u022b\u022c\b\65\3\2\u022cj\3\2\2\2\u022d\u022e\7+\2\2\u022e\u022f",
    "\b\66\4\2\u022fl\3\2\2\2\u0230\u0231\7.\2\2\u0231n\3\2\2\2\u0232\u0233",
    "\7<\2\2\u0233p\3\2\2\2\u0234\u0235\7=\2\2\u0235r\3\2\2\2\u0236\u0237",
    "\7,\2\2\u0237\u0238\7,\2\2\u0238t\3\2\2\2\u0239\u023a\7?\2\2\u023av",
    "\3\2\2\2\u023b\u023c\7]\2\2\u023c\u023d\b<\5\2\u023dx\3\2\2\2\u023e",
    "\u023f\7_\2\2\u023f\u0240\b=\6\2\u0240z\3\2\2\2\u0241\u0242\7~\2\2\u0242",
    "|\3\2\2\2\u0243\u0244\7`\2\2\u0244~\3\2\2\2\u0245\u0246\7(\2\2\u0246",
    "\u0080\3\2\2\2\u0247\u0248\7>\2\2\u0248\u0249\7>\2\2\u0249\u0082\3\2",
    "\2\2\u024a\u024b\7@\2\2\u024b\u024c\7@\2\2\u024c\u0084\3\2\2\2\u024d",
    "\u024e\7-\2\2\u024e\u0086\3\2\2\2\u024f\u0250\7/\2\2\u0250\u0088\3\2",
    "\2\2\u0251\u0252\7\61\2\2\u0252\u008a\3\2\2\2\u0253\u0254\7\'\2\2\u0254",
    "\u008c\3\2\2\2\u0255\u0256\7\61\2\2\u0256\u0257\7\61\2\2\u0257\u008e",
    "\3\2\2\2\u0258\u0259\7\u0080\2\2\u0259\u0090\3\2\2\2\u025a\u025b\7}",
    "\2\2\u025b\u025c\bI\7\2\u025c\u0092\3\2\2\2\u025d\u025e\7\177\2\2\u025e",
    "\u025f\bJ\b\2\u025f\u0094\3\2\2\2\u0260\u0261\7>\2\2\u0261\u0096\3\2",
    "\2\2\u0262\u0263\7@\2\2\u0263\u0098\3\2\2\2\u0264\u0265\7?\2\2\u0265",
    "\u0266\7?\2\2\u0266\u009a\3\2\2\2\u0267\u0268\7@\2\2\u0268\u0269\7?",
    "\2\2\u0269\u009c\3\2\2\2\u026a\u026b\7>\2\2\u026b\u026c\7?\2\2\u026c",
    "\u009e\3\2\2\2\u026d\u026e\7>\2\2\u026e\u026f\7@\2\2\u026f\u00a0\3\2",
    "\2\2\u0270\u0271\7#\2\2\u0271\u0272\7?\2\2\u0272\u00a2\3\2\2\2\u0273",
    "\u0274\7B\2\2\u0274\u00a4\3\2\2\2\u0275\u0276\7/\2\2\u0276\u0277\7@",
    "\2\2\u0277\u00a6\3\2\2\2\u0278\u0279\7-\2\2\u0279\u027a\7?\2\2\u027a",
    "\u00a8\3\2\2\2\u027b\u027c\7/\2\2\u027c\u027d\7?\2\2\u027d\u00aa\3\2",
    "\2\2\u027e\u027f\7,\2\2\u027f\u0280\7?\2\2\u0280\u00ac\3\2\2\2\u0281",
    "\u0282\7B\2\2\u0282\u0283\7?\2\2\u0283\u00ae\3\2\2\2\u0284\u0285\7\61",
    "\2\2\u0285\u0286\7?\2\2\u0286\u00b0\3\2\2\2\u0287\u0288\7\'\2\2\u0288",
    "\u0289\7?\2\2\u0289\u00b2\3\2\2\2\u028a\u028b\7(\2\2\u028b\u028c\7?",
    "\2\2\u028c\u00b4\3\2\2\2\u028d\u028e\7~\2\2\u028e\u028f\7?\2\2\u028f",
    "\u00b6\3\2\2\2\u0290\u0291\7`\2\2\u0291\u0292\7?\2\2\u0292\u00b8\3\2",
    "\2\2\u0293\u0294\7>\2\2\u0294\u0295\7>\2\2\u0295\u0296\7?\2\2\u0296",
    "\u00ba\3\2\2\2\u0297\u0298\7@\2\2\u0298\u0299\7@\2\2\u0299\u029a\7?",
    "\2\2\u029a\u00bc\3\2\2\2\u029b\u029c\7,\2\2\u029c\u029d\7,\2\2\u029d",
    "\u029e\7?\2\2\u029e\u00be\3\2\2\2\u029f\u02a0\7\61\2\2\u02a0\u02a1\7",
    "\61\2\2\u02a1\u02a2\7?\2\2\u02a2\u00c0\3\2\2\2\u02a3\u02a7\5\u00f1y",
    "\2\u02a4\u02a7\5\u00f3z\2\u02a5\u02a7\5\u00f5{\2\u02a6\u02a3\3\2\2\2",
    "\u02a6\u02a4\3\2\2\2\u02a6\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9",
    "\ba\t\2\u02a9\u00c2\3\2\2\2\u02aa\u02ab\13\2\2\2\u02ab\u00c4\3\2\2\2",
    "\u02ac\u02b1\7)\2\2\u02ad\u02b0\5\u00cdg\2\u02ae\u02b0\n\t\2\2\u02af",
    "\u02ad\3\2\2\2\u02af\u02ae\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3",
    "\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4",
    "\u02bf\7)\2\2\u02b5\u02ba\7$\2\2\u02b6\u02b9\5\u00cdg\2\u02b7\u02b9",
    "\n\n\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9\u02bc\3\2\2\2",
    "\u02ba\u02b8\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02ba",
    "\3\2\2\2\u02bd\u02bf\7$\2\2\u02be\u02ac\3\2\2\2\u02be\u02b5\3\2\2\2",
    "\u02bf\u00c6\3\2\2\2\u02c0\u02c1\7)\2\2\u02c1\u02c2\7)\2\2\u02c2\u02c3",
    "\7)\2\2\u02c3\u02c7\3\2\2\2\u02c4\u02c6\5\u00c9e\2\u02c5\u02c4\3\2\2",
    "\2\u02c6\u02c9\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8",
    "\u02ca\3\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02cb\7)\2\2\u02cb\u02cc\7",
    ")\2\2\u02cc\u02db\7)\2\2\u02cd\u02ce\7$\2\2\u02ce\u02cf\7$\2\2\u02cf",
    "\u02d0\7$\2\2\u02d0\u02d4\3\2\2\2\u02d1\u02d3\5\u00c9e\2\u02d2\u02d1",
    "\3\2\2\2\u02d3\u02d6\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d4\u02d2\3\2\2\2",
    "\u02d5\u02d7\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d7\u02d8\7$\2\2\u02d8\u02d9",
    "\7$\2\2\u02d9\u02db\7$\2\2\u02da\u02c0\3\2\2\2\u02da\u02cd\3\2\2\2\u02db",
    "\u00c8\3\2\2\2\u02dc\u02df\5\u00cbf\2\u02dd\u02df\5\u00cdg\2\u02de\u02dc",
    "\3\2\2\2\u02de\u02dd\3\2\2\2\u02df\u00ca\3\2\2\2\u02e0\u02e1\n\13\2",
    "\2\u02e1\u00cc\3\2\2\2\u02e2\u02e3\7^\2\2\u02e3\u02e7\13\2\2\2\u02e4",
    "\u02e5\7^\2\2\u02e5\u02e7\5O(\2\u02e6\u02e2\3\2\2\2\u02e6\u02e4\3\2",
    "\2\2\u02e7\u00ce\3\2\2\2\u02e8\u02e9\t\f\2\2\u02e9\u00d0\3\2\2\2\u02ea",
    "\u02eb\t\r\2\2\u02eb\u00d2\3\2\2\2\u02ec\u02ed\t\16\2\2\u02ed\u00d4",
    "\3\2\2\2\u02ee\u02ef\t\17\2\2\u02ef\u00d6\3\2\2\2\u02f0\u02f1\t\20\2",
    "\2\u02f1\u00d8\3\2\2\2\u02f2\u02f4\5\u00ddo\2\u02f3\u02f2\3\2\2\2\u02f3",
    "\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02fa\5\u00dfp\2\u02f6\u02f7",
    "\5\u00ddo\2\u02f7\u02f8\7\60\2\2\u02f8\u02fa\3\2\2\2\u02f9\u02f3\3\2",
    "\2\2\u02f9\u02f6\3\2\2\2\u02fa\u00da\3\2\2\2\u02fb\u02fe\5\u00ddo\2",
    "\u02fc\u02fe\5\u00d9m\2\u02fd\u02fb\3\2\2\2\u02fd\u02fc\3\2\2\2\u02fe",
    "\u02ff\3\2\2\2\u02ff\u0300\5\u00e1q\2\u0300\u00dc\3\2\2\2\u0301\u0303",
    "\5\u00d1i\2\u0302\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304\u0302\3\2",
    "\2\2\u0304\u0305\3\2\2\2\u0305\u00de\3\2\2\2\u0306\u0308\7\60\2\2\u0307",
    "\u0309\5\u00d1i\2\u0308\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u0308",
    "\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u00e0\3\2\2\2\u030c\u030e\t\21\2",
    "\2\u030d\u030f\t\22\2\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f",
    "\u0311\3\2\2\2\u0310\u0312\5\u00d1i\2\u0311\u0310\3\2\2\2\u0312\u0313",
    "\3\2\2\2\u0313\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u00e2\3\2\2\2",
    "\u0315\u031a\7)\2\2\u0316\u0319\5\u00e9u\2\u0317\u0319\5\u00efx\2\u0318",
    "\u0316\3\2\2\2\u0318\u0317\3\2\2\2\u0319\u031c\3\2\2\2\u031a\u0318\3",
    "\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d\3\2\2\2\u031c\u031a\3\2\2\2\u031d",
    "\u0328\7)\2\2\u031e\u0323\7$\2\2\u031f\u0322\5\u00ebv\2\u0320\u0322",
    "\5\u00efx\2\u0321\u031f\3\2\2\2\u0321\u0320\3\2\2\2\u0322\u0325\3\2",
    "\2\2\u0323\u0321\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325",
    "\u0323\3\2\2\2\u0326\u0328\7$\2\2\u0327\u0315\3\2\2\2\u0327\u031e\3",
    "\2\2\2\u0328\u00e4\3\2\2\2\u0329\u032a\7)\2\2\u032a\u032b\7)\2\2\u032b",
    "\u032c\7)\2\2\u032c\u0330\3\2\2\2\u032d\u032f\5\u00e7t\2\u032e\u032d",
    "\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u0331\3\2\2\2\u0330\u032e\3\2\2\2",
    "\u0331\u0333\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0334\7)\2\2\u0334\u0335",
    "\7)\2\2\u0335\u0344\7)\2\2\u0336\u0337\7$\2\2\u0337\u0338\7$\2\2\u0338",
    "\u0339\7$\2\2\u0339\u033d\3\2\2\2\u033a\u033c\5\u00e7t\2\u033b\u033a",
    "\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u033e\3\2\2\2\u033d\u033b\3\2\2\2",
    "\u033e\u0340\3\2\2\2\u033f\u033d\3\2\2\2\u0340\u0341\7$\2\2\u0341\u0342",
    "\7$\2\2\u0342\u0344\7$\2\2\u0343\u0329\3\2\2\2\u0343\u0336\3\2\2\2\u0344",
    "\u00e6\3\2\2\2\u0345\u0348\5\u00edw\2\u0346\u0348\5\u00efx\2\u0347\u0345",
    "\3\2\2\2\u0347\u0346\3\2\2\2\u0348\u00e8\3\2\2\2\u0349\u034b\t\23\2",
    "\2\u034a\u0349\3\2\2\2\u034b\u00ea\3\2\2\2\u034c\u034e\t\24\2\2\u034d",
    "\u034c\3\2\2\2\u034e\u00ec\3\2\2\2\u034f\u0351\t\25\2\2\u0350\u034f",
    "\3\2\2\2\u0351\u00ee\3\2\2\2\u0352\u0353\7^\2\2\u0353\u0354\t\26\2\2",
    "\u0354\u00f0\3\2\2\2\u0355\u0357\t\27\2\2\u0356\u0355\3\2\2\2\u0357",
    "\u0358\3\2\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u00f2\3",
    "\2\2\2\u035a\u035e\7%\2\2\u035b\u035d\n\30\2\2\u035c\u035b\3\2\2\2\u035d",
    "\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u00f4\3",
    "\2\2\2\u0360\u035e\3\2\2\2\u0361\u0363\7^\2\2\u0362\u0364\5\u00f1y\2",
    "\u0363\u0362\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u036a\3\2\2\2\u0365\u0367",
    "\7\17\2\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2",
    "\2\u0368\u036b\7\f\2\2\u0369\u036b\4\16\17\2\u036a\u0366\3\2\2\2\u036a",
    "\u0369\3\2\2\2\u036b\u00f6\3\2\2\2\u036c\u036e\t\31\2\2\u036d\u036c",
    "\3\2\2\2\u036e\u00f8\3\2\2\2\u036f\u0372\5\u00f7|\2\u0370\u0372\t\32",
    "\2\2\u0371\u036f\3\2\2\2\u0371\u0370\3\2\2\2\u0372\u00fa\3\2\2\2<\2",
    "\u00fd\u0102\u0108\u01cb\u01cf\u01d2\u01d4\u01dc\u01e4\u01e8\u01ef\u01f3",
    "\u01f9\u01ff\u0201\u0208\u020f\u0216\u021a\u021e\u02a6\u02af\u02b1\u02b8",
    "\u02ba\u02be\u02c7\u02d4\u02da\u02de\u02e6\u02f3\u02f9\u02fd\u0304\u030a",
    "\u030e\u0313\u0318\u031a\u0321\u0323\u0327\u0330\u033d\u0343\u0347\u034a",
    "\u034d\u0350\u0358\u035e\u0363\u0366\u036a\u036d\u0371\n\3(\2\3\65\3",
    "\3\66\4\3<\5\3=\6\3I\7\3J\b\b\2\2"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function PythonLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

PythonLexer.prototype = Object.create(antlr4.Lexer.prototype);
PythonLexer.prototype.constructor = PythonLexer;

PythonLexer.EOF = antlr4.Token.EOF;
PythonLexer.STRING = 1;
PythonLexer.NUMBER = 2;
PythonLexer.INTEGER = 3;
PythonLexer.DEF = 4;
PythonLexer.RETURN = 5;
PythonLexer.RAISE = 6;
PythonLexer.FROM = 7;
PythonLexer.IMPORT = 8;
PythonLexer.AS = 9;
PythonLexer.GLOBAL = 10;
PythonLexer.NONLOCAL = 11;
PythonLexer.ASSERT = 12;
PythonLexer.IF = 13;
PythonLexer.ELIF = 14;
PythonLexer.ELSE = 15;
PythonLexer.WHILE = 16;
PythonLexer.FOR = 17;
PythonLexer.IN = 18;
PythonLexer.TRY = 19;
PythonLexer.FINALLY = 20;
PythonLexer.WITH = 21;
PythonLexer.EXCEPT = 22;
PythonLexer.LAMBDA = 23;
PythonLexer.OR = 24;
PythonLexer.AND = 25;
PythonLexer.NOT = 26;
PythonLexer.IS = 27;
PythonLexer.NONE = 28;
PythonLexer.TRUE = 29;
PythonLexer.FALSE = 30;
PythonLexer.CLASS = 31;
PythonLexer.YIELD = 32;
PythonLexer.DEL = 33;
PythonLexer.PASS = 34;
PythonLexer.CONTINUE = 35;
PythonLexer.BREAK = 36;
PythonLexer.ASYNC = 37;
PythonLexer.AWAIT = 38;
PythonLexer.NEWLINE = 39;
PythonLexer.NAME = 40;
PythonLexer.STRING_LITERAL = 41;
PythonLexer.BYTES_LITERAL = 42;
PythonLexer.DECIMAL_INTEGER = 43;
PythonLexer.OCT_INTEGER = 44;
PythonLexer.HEX_INTEGER = 45;
PythonLexer.BIN_INTEGER = 46;
PythonLexer.FLOAT_NUMBER = 47;
PythonLexer.IMAG_NUMBER = 48;
PythonLexer.DOT = 49;
PythonLexer.ELLIPSIS = 50;
PythonLexer.STAR = 51;
PythonLexer.OPEN_PAREN = 52;
PythonLexer.CLOSE_PAREN = 53;
PythonLexer.COMMA = 54;
PythonLexer.COLON = 55;
PythonLexer.SEMI_COLON = 56;
PythonLexer.POWER = 57;
PythonLexer.ASSIGN = 58;
PythonLexer.OPEN_BRACK = 59;
PythonLexer.CLOSE_BRACK = 60;
PythonLexer.OR_OP = 61;
PythonLexer.XOR = 62;
PythonLexer.AND_OP = 63;
PythonLexer.LEFT_SHIFT = 64;
PythonLexer.RIGHT_SHIFT = 65;
PythonLexer.ADD = 66;
PythonLexer.MINUS = 67;
PythonLexer.DIV = 68;
PythonLexer.MOD = 69;
PythonLexer.IDIV = 70;
PythonLexer.NOT_OP = 71;
PythonLexer.OPEN_BRACE = 72;
PythonLexer.CLOSE_BRACE = 73;
PythonLexer.LESS_THAN = 74;
PythonLexer.GREATER_THAN = 75;
PythonLexer.EQUALS = 76;
PythonLexer.GT_EQ = 77;
PythonLexer.LT_EQ = 78;
PythonLexer.NOT_EQ_1 = 79;
PythonLexer.NOT_EQ_2 = 80;
PythonLexer.AT = 81;
PythonLexer.ARROW = 82;
PythonLexer.ADD_ASSIGN = 83;
PythonLexer.SUB_ASSIGN = 84;
PythonLexer.MULT_ASSIGN = 85;
PythonLexer.AT_ASSIGN = 86;
PythonLexer.DIV_ASSIGN = 87;
PythonLexer.MOD_ASSIGN = 88;
PythonLexer.AND_ASSIGN = 89;
PythonLexer.OR_ASSIGN = 90;
PythonLexer.XOR_ASSIGN = 91;
PythonLexer.LEFT_SHIFT_ASSIGN = 92;
PythonLexer.RIGHT_SHIFT_ASSIGN = 93;
PythonLexer.POWER_ASSIGN = 94;
PythonLexer.IDIV_ASSIGN = 95;
PythonLexer.SKIP_ = 96;
PythonLexer.UNKNOWN_CHAR = 97;
PythonLexer.INDENT = 98;
PythonLexer.DEDENT = 99;


PythonLexer.modeNames = [ "DEFAULT_MODE" ];

PythonLexer.literalNames = [ 'null', 'null', 'null', 'null', "'def'", "'return'", 
                             "'raise'", "'from'", "'import'", "'as'", "'global'", 
                             "'nonlocal'", "'assert'", "'if'", "'elif'", 
                             "'else'", "'while'", "'for'", "'in'", "'try'", 
                             "'finally'", "'with'", "'except'", "'lambda'", 
                             "'or'", "'and'", "'not'", "'is'", "'None'", 
                             "'True'", "'False'", "'class'", "'yield'", 
                             "'del'", "'pass'", "'continue'", "'break'", 
                             "'async'", "'await'", 'null', 'null', 'null', 
                             'null', 'null', 'null', 'null', 'null', 'null', 
                             'null', "'.'", "'...'", "'*'", "'('", "')'", 
                             "','", "':'", "';'", "'**'", "'='", "'['", 
                             "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                             "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
                             "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                             "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", 
                             "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", 
                             "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                             "'//='" ];

PythonLexer.symbolicNames = [ 'null', "STRING", "NUMBER", "INTEGER", "DEF", 
                              "RETURN", "RAISE", "FROM", "IMPORT", "AS", 
                              "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                              "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", 
                              "WITH", "EXCEPT", "LAMBDA", "OR", "AND", "NOT", 
                              "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", 
                              "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", 
                              "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", 
                              "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                              "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                              "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", 
                              "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                              "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", 
                              "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", 
                              "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", 
                              "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                              "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", 
                              "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                              "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
                              "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                              "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                              "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                              "SKIP_", "UNKNOWN_CHAR" ];

PythonLexer.ruleNames = [ "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", 
                          "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", 
                          "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", 
                          "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", 
                          "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", 
                          "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", 
                          "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", 
                          "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                          "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                          "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                          "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", 
                          "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                          "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                          "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", 
                          "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", 
                          "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
                          "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", 
                          "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                          "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                          "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                          "SKIP_", "UNKNOWN_CHAR", "SHORT_STRING", "LONG_STRING", 
                          "LONG_STRING_ITEM", "LONG_STRING_CHAR", "STRING_ESCAPE_SEQ", 
                          "NON_ZERO_DIGIT", "DIGIT", "OCT_DIGIT", "HEX_DIGIT", 
                          "BIN_DIGIT", "POINT_FLOAT", "EXPONENT_FLOAT", 
                          "INT_PART", "FRACTION", "EXPONENT", "SHORT_BYTES", 
                          "LONG_BYTES", "LONG_BYTES_ITEM", "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", 
                          "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", "LONG_BYTES_CHAR", 
                          "BYTES_ESCAPE_SEQ", "SPACES", "COMMENT", "LINE_JOINING", 
                          "ID_START", "ID_CONTINUE" ];

PythonLexer.grammarFileName = "Python.g4";


    var tokens = [];

    var indents = [];

    var opened = 0;

    var lastToken = null;

    // @Override
    PythonLexer.prototype.emitToken = function (t) {
        antlr4.Lexer.prototype.emitToken.call(this, t);
        tokens.push(t);
    };

    // @Override
    PythonLexer.prototype.nextToken = function () {
        if (this._input.LA(1) == PythonLexer.EOF && indents.length) {
            for (var i = tokens.length - 1; i >= 0; i--) {
                if (tokens[i].type == PythonLexer.EOF) {
                    tokens.splice(i, 1);
                }
            }

            this.emitToken(this.commonToken(PythonLexer.NEWLINE, "\n"));

            while (indents.length) {
                this.emitToken(this.createDedent());
                indents.pop();
            }

            this.emitToken(this.commonToken(PythonLexer.EOF, "<EOF>"));
        }

        var next = antlr4.Lexer.prototype.nextToken.call(this);

        if (next.channel == antlr4.Token.DEFAULT_CHANNEL) {
            this.lastToken = next;
        }

        return tokens.length ? tokens.shift() : next;
    };

    PythonLexer.prototype.createDedent = function() {
        var dedent = this.commonToken(PythonLexer.DEDENT, "");
        dedent.line = this.lastToken.line;
        return dedent;
    };

    PythonLexer.prototype.commonToken = function(type, text) {
        var stop = this.getCharIndex() - 1,
            start = text.length ? (stop - text.length + 1) : stop;

        return new antlr4.CommonToken(this._tokenFactorySourcePair, type, antlr4.Lexer.DEFAULT_TOKEN_CHANNEL, start, stop);
    };

    // https://docs.python.org/3.1/reference/lexical_analysis.html#indentation
    function getIndentationCount(spaces) {
        var count = 0;

        spaces.split('').every(function (ch) {
            switch (ch) {
                case '\t':
                    count += 8 - (count % 8);
                    return false;
                default:
                    count++;
                    return true;
            }
        });

        return count;
    }

    PythonLexer.prototype.atStartOfInput = function() {
        return this.column == 0 && this.line == 1;
    };


PythonLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 38:
		this.NEWLINE_action(localctx, actionIndex);
		break;
	case 51:
		this.OPEN_PAREN_action(localctx, actionIndex);
		break;
	case 52:
		this.CLOSE_PAREN_action(localctx, actionIndex);
		break;
	case 58:
		this.OPEN_BRACK_action(localctx, actionIndex);
		break;
	case 59:
		this.CLOSE_BRACK_action(localctx, actionIndex);
		break;
	case 71:
		this.OPEN_BRACE_action(localctx, actionIndex);
		break;
	case 72:
		this.CLOSE_BRACE_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};

PythonLexer.prototype.NEWLINE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:

				var newLine = this.text.replace(/[^\r\n\f]+/g, ""),
		            spaces = this.text.replace(/[\r\n\f]+/g, ""),
		            next = this._input.LA(1);

		        if (opened > 0 || next == '\r' || next == '\n' || next == '\f' || next == '#') {
		            this.skip();
		        }
		        else {
		            this.emitToken(this.commonToken(PythonLexer.NEWLINE, newLine));
		            var indent = getIndentationCount(spaces),
		                previous = indents.length ? indents[indents.length - 1] : 0;
		            if (indent === previous) {
		                this.skip();
		            }
		            else if (indent > previous) {
		                indents.push(indent);
		                this.emitToken(this.commonToken(PythonLexer.INDENT, spaces));
		            }
		            else {
		                while (indents.length && indents[indents.length - 1] > indent) {
		                    this.emitToken(this.createDedent());
		                    indents.pop();
		                }
		            }
		        }
		   
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.OPEN_PAREN_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		opened++;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.CLOSE_PAREN_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		opened--;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.OPEN_BRACK_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 3:
		opened++;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.CLOSE_BRACK_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 4:
		opened--;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.OPEN_BRACE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 5:
		opened++;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

PythonLexer.prototype.CLOSE_BRACE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 6:
		opened--;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
PythonLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 38:
			return this.NEWLINE_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

PythonLexer.prototype.NEWLINE_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.atStartOfInput();
		default:
			throw "No predicate with index:" + predIndex;
	}
};



exports.PythonLexer = PythonLexer;


},{"antlr4/index":42}],53:[function(require,module,exports){
// Generated from src/interpreter/Python.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ASTNodes = require('./ASTNodes');

// This class defines a complete listener for a parse tree produced by PythonParser.
function PythonListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

PythonListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
PythonListener.prototype.constructor = PythonListener;

// Enter a parse tree produced by PythonParser#single_input.
PythonListener.prototype.enterSingle_input = function(ctx) { console.log('enterSingle_input');
};

// Exit a parse tree produced by PythonParser#single_input.
PythonListener.prototype.exitSingle_input = function(ctx) { console.log('exitSingle_input');
};


// Enter a parse tree produced by PythonParser#file_input.
PythonListener.prototype.enterFile_input = function(ctx) { console.log('enterFile_input');
};

// Exit a parse tree produced by PythonParser#file_input.
PythonListener.prototype.exitFile_input = function(ctx) { console.log('exitFile_input');
};


// Enter a parse tree produced by PythonParser#eval_input.
PythonListener.prototype.enterEval_input = function(ctx) { console.log('enterEval_input');
};

// Exit a parse tree produced by PythonParser#eval_input.
PythonListener.prototype.exitEval_input = function(ctx) { console.log('exitEval_input');
};


// Enter a parse tree produced by PythonParser#decorator.
PythonListener.prototype.enterDecorator = function(ctx) { console.log('enterDecorator');
};

// Exit a parse tree produced by PythonParser#decorator.
PythonListener.prototype.exitDecorator = function(ctx) { console.log('exitDecorator');
};


// Enter a parse tree produced by PythonParser#decorators.
PythonListener.prototype.enterDecorators = function(ctx) { console.log('enterDecorators');
};

// Exit a parse tree produced by PythonParser#decorators.
PythonListener.prototype.exitDecorators = function(ctx) { console.log('exitDecorators');
};


// Enter a parse tree produced by PythonParser#decorated.
PythonListener.prototype.enterDecorated = function(ctx) { console.log('enterDecorated');
};

// Exit a parse tree produced by PythonParser#decorated.
PythonListener.prototype.exitDecorated = function(ctx) { console.log('exitDecorated');
};


// Enter a parse tree produced by PythonParser#async_funcdef.
PythonListener.prototype.enterAsync_funcdef = function(ctx) { console.log('enterAsync_funcdef');
};

// Exit a parse tree produced by PythonParser#async_funcdef.
PythonListener.prototype.exitAsync_funcdef = function(ctx) { console.log('exitAsync_funcdef');
};


// Enter a parse tree produced by PythonParser#funcdef.
PythonListener.prototype.enterFuncdef = function(ctx) { console.log('enterFuncdef');
	return new ASTNodes.FUNCTION_NODE(
		ctx.NAME().getText(),
		this.enterParameters(ctx.parameters)
	);
};

// Exit a parse tree produced by PythonParser#funcdef.
PythonListener.prototype.exitFuncdef = function(ctx) {
};


// Enter a parse tree produced by PythonParser#parameters.
PythonListener.prototype.enterParameters = function(ctx) { console.log('enterParameters');
};

// Exit a parse tree produced by PythonParser#parameters.
PythonListener.prototype.exitParameters = function(ctx) { console.log('exitParameters');
};


// Enter a parse tree produced by PythonParser#typedargslist.
PythonListener.prototype.enterTypedargslist = function(ctx) { console.log('enterTypedargslist');
};

// Exit a parse tree produced by PythonParser#typedargslist.
PythonListener.prototype.exitTypedargslist = function(ctx) { console.log('exitTypedargslist');
};


// Enter a parse tree produced by PythonParser#tfpdef.
PythonListener.prototype.enterTfpdef = function(ctx) {
	console.log('enterTfpdef');
};

// Exit a parse tree produced by PythonParser#tfpdef.
PythonListener.prototype.exitTfpdef = function(ctx) { console.log('exitTfpdef');
};


// Enter a parse tree produced by PythonParser#varargslist.
PythonListener.prototype.enterVarargslist = function(ctx) { console.log('enterVarargslist');
};

// Exit a parse tree produced by PythonParser#varargslist.
PythonListener.prototype.exitVarargslist = function(ctx) { console.log('exitVarargslist');
};


// Enter a parse tree produced by PythonParser#vfpdef.
PythonListener.prototype.enterVfpdef = function(ctx) { console.log('enterVfpdef');
};

// Exit a parse tree produced by PythonParser#vfpdef.
PythonListener.prototype.exitVfpdef = function(ctx) { console.log('exitVfpdef');
};


// Enter a parse tree produced by PythonParser#stmt.
PythonListener.prototype.enterStmt = function(ctx) { console.log('enterStmt');
};

// Exit a parse tree produced by PythonParser#stmt.
PythonListener.prototype.exitStmt = function(ctx) { console.log('exitStmt');
};


// Enter a parse tree produced by PythonParser#simple_stmt.
PythonListener.prototype.enterSimple_stmt = function(ctx) { console.log('enterSimple_stmt');
};

// Exit a parse tree produced by PythonParser#simple_stmt.
PythonListener.prototype.exitSimple_stmt = function(ctx) { console.log('exitSimple_stmt');
};


// Enter a parse tree produced by PythonParser#small_stmt.
PythonListener.prototype.enterSmall_stmt = function(ctx) { console.log('enterSmall_stmt');
};

// Exit a parse tree produced by PythonParser#small_stmt.
PythonListener.prototype.exitSmall_stmt = function(ctx) { console.log('exitSmall_stmt');
};


// Enter a parse tree produced by PythonParser#expr_stmt.
PythonListener.prototype.enterExpr_stmt = function(ctx) { console.log('enterExpr_stmt');
};

// Exit a parse tree produced by PythonParser#expr_stmt.
PythonListener.prototype.exitExpr_stmt = function(ctx) { console.log('exitExpr_stmt');
};


// Enter a parse tree produced by PythonParser#annassign.
PythonListener.prototype.enterAnnassign = function(ctx) { console.log('enterAnnassign');
};

// Exit a parse tree produced by PythonParser#annassign.
PythonListener.prototype.exitAnnassign = function(ctx) { console.log('exitAnnassign');
};


// Enter a parse tree produced by PythonParser#testlist_star_expr.
PythonListener.prototype.enterTestlist_star_expr = function(ctx) { console.log('enterTestlist_star_expr');
};

// Exit a parse tree produced by PythonParser#testlist_star_expr.
PythonListener.prototype.exitTestlist_star_expr = function(ctx) { console.log('exitTestlist_star_expr');
};


// Enter a parse tree produced by PythonParser#augassign.
PythonListener.prototype.enterAugassign = function(ctx) { console.log('enterAugassign');
};

// Exit a parse tree produced by PythonParser#augassign.
PythonListener.prototype.exitAugassign = function(ctx) { console.log('exitAugassign');
};


// Enter a parse tree produced by PythonParser#del_stmt.
PythonListener.prototype.enterDel_stmt = function(ctx) { console.log('enterDel_stmt');
};

// Exit a parse tree produced by PythonParser#del_stmt.
PythonListener.prototype.exitDel_stmt = function(ctx) { console.log('exitDel_stmt');
};


// Enter a parse tree produced by PythonParser#pass_stmt.
PythonListener.prototype.enterPass_stmt = function(ctx) { console.log('enterPass_stmt');
};

// Exit a parse tree produced by PythonParser#pass_stmt.
PythonListener.prototype.exitPass_stmt = function(ctx) { console.log('exitPass_stmt');
};


// Enter a parse tree produced by PythonParser#flow_stmt.
PythonListener.prototype.enterFlow_stmt = function(ctx) { console.log('enterFlow_stmt');
};

// Exit a parse tree produced by PythonParser#flow_stmt.
PythonListener.prototype.exitFlow_stmt = function(ctx) { console.log('exitFlow_stmt');
};


// Enter a parse tree produced by PythonParser#break_stmt.
PythonListener.prototype.enterBreak_stmt = function(ctx) { console.log('enterBreak_stmt');
};

// Exit a parse tree produced by PythonParser#break_stmt.
PythonListener.prototype.exitBreak_stmt = function(ctx) { console.log('exitBreak_stmt');
};


// Enter a parse tree produced by PythonParser#continue_stmt.
PythonListener.prototype.enterContinue_stmt = function(ctx) { console.log('enterContinue_stmt');
};

// Exit a parse tree produced by PythonParser#continue_stmt.
PythonListener.prototype.exitContinue_stmt = function(ctx) { console.log('exitContinue_stmt');
};


// Enter a parse tree produced by PythonParser#return_stmt.
PythonListener.prototype.enterReturn_stmt = function(ctx) { console.log('enterReturn_stmt');
};

// Exit a parse tree produced by PythonParser#return_stmt.
PythonListener.prototype.exitReturn_stmt = function(ctx) { console.log('exitReturn_stmt');
};


// Enter a parse tree produced by PythonParser#yield_stmt.
PythonListener.prototype.enterYield_stmt = function(ctx) { console.log('enterYield_stmt');
};

// Exit a parse tree produced by PythonParser#yield_stmt.
PythonListener.prototype.exitYield_stmt = function(ctx) { console.log('exitYield_stmt');
};


// Enter a parse tree produced by PythonParser#raise_stmt.
PythonListener.prototype.enterRaise_stmt = function(ctx) { console.log('enterRaise_stmt');
};

// Exit a parse tree produced by PythonParser#raise_stmt.
PythonListener.prototype.exitRaise_stmt = function(ctx) { console.log('exitRaise_stmt');
};


// Enter a parse tree produced by PythonParser#import_stmt.
PythonListener.prototype.enterImport_stmt = function(ctx) { console.log('enterImport_stmt');
};

// Exit a parse tree produced by PythonParser#import_stmt.
PythonListener.prototype.exitImport_stmt = function(ctx) { console.log('exitImport_stmt');
};


// Enter a parse tree produced by PythonParser#import_name.
PythonListener.prototype.enterImport_name = function(ctx) { console.log('enterImport_name');
};

// Exit a parse tree produced by PythonParser#import_name.
PythonListener.prototype.exitImport_name = function(ctx) { console.log('exitImport_name');
};


// Enter a parse tree produced by PythonParser#import_from.
PythonListener.prototype.enterImport_from = function(ctx) { console.log('enterImport_from');
};

// Exit a parse tree produced by PythonParser#import_from.
PythonListener.prototype.exitImport_from = function(ctx) { console.log('exitImport_from');
};


// Enter a parse tree produced by PythonParser#import_as_name.
PythonListener.prototype.enterImport_as_name = function(ctx) { console.log('enterImport_as_name');
};

// Exit a parse tree produced by PythonParser#import_as_name.
PythonListener.prototype.exitImport_as_name = function(ctx) { console.log('exitImport_as_name');
};


// Enter a parse tree produced by PythonParser#dotted_as_name.
PythonListener.prototype.enterDotted_as_name = function(ctx) { console.log('enterDotted_as_name');
};

// Exit a parse tree produced by PythonParser#dotted_as_name.
PythonListener.prototype.exitDotted_as_name = function(ctx) { console.log('exitDotted_as_name');
};


// Enter a parse tree produced by PythonParser#import_as_names.
PythonListener.prototype.enterImport_as_names = function(ctx) { console.log('enterImport_as_names');
};

// Exit a parse tree produced by PythonParser#import_as_names.
PythonListener.prototype.exitImport_as_names = function(ctx) { console.log('exitImport_as_names');
};


// Enter a parse tree produced by PythonParser#dotted_as_names.
PythonListener.prototype.enterDotted_as_names = function(ctx) { console.log('enterDotted_as_names');
};

// Exit a parse tree produced by PythonParser#dotted_as_names.
PythonListener.prototype.exitDotted_as_names = function(ctx) { console.log('exitDotted_as_names');
};


// Enter a parse tree produced by PythonParser#dotted_name.
PythonListener.prototype.enterDotted_name = function(ctx) { console.log('enterDotted_name');
};

// Exit a parse tree produced by PythonParser#dotted_name.
PythonListener.prototype.exitDotted_name = function(ctx) { console.log('exitDotted_name');
};


// Enter a parse tree produced by PythonParser#global_stmt.
PythonListener.prototype.enterGlobal_stmt = function(ctx) { console.log('enterGlobal_stmt');
};

// Exit a parse tree produced by PythonParser#global_stmt.
PythonListener.prototype.exitGlobal_stmt = function(ctx) { console.log('exitGlobal_stmt');
};


// Enter a parse tree produced by PythonParser#nonlocal_stmt.
PythonListener.prototype.enterNonlocal_stmt = function(ctx) { console.log('enterNonlocal_stmt');
};

// Exit a parse tree produced by PythonParser#nonlocal_stmt.
PythonListener.prototype.exitNonlocal_stmt = function(ctx) { console.log('exitNonlocal_stmt');
};


// Enter a parse tree produced by PythonParser#assert_stmt.
PythonListener.prototype.enterAssert_stmt = function(ctx) { console.log('enterAssert_stmt');
};

// Exit a parse tree produced by PythonParser#assert_stmt.
PythonListener.prototype.exitAssert_stmt = function(ctx) { console.log('exitAssert_stmt');
};


// Enter a parse tree produced by PythonParser#compound_stmt.
PythonListener.prototype.enterCompound_stmt = function(ctx) { console.log('enterCompound_stmt');
};

// Exit a parse tree produced by PythonParser#compound_stmt.
PythonListener.prototype.exitCompound_stmt = function(ctx) { console.log('exitCompound_stmt');
};


// Enter a parse tree produced by PythonParser#async_stmt.
PythonListener.prototype.enterAsync_stmt = function(ctx) { console.log('enterAsync_stmt');
};

// Exit a parse tree produced by PythonParser#async_stmt.
PythonListener.prototype.exitAsync_stmt = function(ctx) { console.log('exitAsync_stmt');
};


// Enter a parse tree produced by PythonParser#if_stmt.
PythonListener.prototype.enterIf_stmt = function(ctx) { console.log('enterIf_stmt');
};

// Exit a parse tree produced by PythonParser#if_stmt.
PythonListener.prototype.exitIf_stmt = function(ctx) { console.log('exitIf_stmt');
};


// Enter a parse tree produced by PythonParser#while_stmt.
PythonListener.prototype.enterWhile_stmt = function(ctx) { console.log('enterWhile_stmt');
};

// Exit a parse tree produced by PythonParser#while_stmt.
PythonListener.prototype.exitWhile_stmt = function(ctx) { console.log('exitWhile_stmt');
};


// Enter a parse tree produced by PythonParser#for_stmt.
PythonListener.prototype.enterFor_stmt = function(ctx) { console.log('enterFor_stmt');
};

// Exit a parse tree produced by PythonParser#for_stmt.
PythonListener.prototype.exitFor_stmt = function(ctx) { console.log('exitFor_stmt');
};


// Enter a parse tree produced by PythonParser#try_stmt.
PythonListener.prototype.enterTry_stmt = function(ctx) { console.log('enterTry_stmt');
};

// Exit a parse tree produced by PythonParser#try_stmt.
PythonListener.prototype.exitTry_stmt = function(ctx) { console.log('exitTry_stmt');
};


// Enter a parse tree produced by PythonParser#with_stmt.
PythonListener.prototype.enterWith_stmt = function(ctx) { console.log('enterWith_stmt');
};

// Exit a parse tree produced by PythonParser#with_stmt.
PythonListener.prototype.exitWith_stmt = function(ctx) { console.log('exitWith_stmt');
};


// Enter a parse tree produced by PythonParser#with_item.
PythonListener.prototype.enterWith_item = function(ctx) { console.log('enterWith_item');
};

// Exit a parse tree produced by PythonParser#with_item.
PythonListener.prototype.exitWith_item = function(ctx) { console.log('exitWith_item');
};


// Enter a parse tree produced by PythonParser#except_clause.
PythonListener.prototype.enterExcept_clause = function(ctx) { console.log('enterExcept_clause');
};

// Exit a parse tree produced by PythonParser#except_clause.
PythonListener.prototype.exitExcept_clause = function(ctx) { console.log('exitExcept_clause');
};


// Enter a parse tree produced by PythonParser#suite.
PythonListener.prototype.enterSuite = function(ctx) { console.log('enterSuite');
};

// Exit a parse tree produced by PythonParser#suite.
PythonListener.prototype.exitSuite = function(ctx) { console.log('exitSuite');
};


// Enter a parse tree produced by PythonParser#test.
PythonListener.prototype.enterTest = function(ctx) { console.log('enterTest');
};

// Exit a parse tree produced by PythonParser#test.
PythonListener.prototype.exitTest = function(ctx) { console.log('exitTest');
};


// Enter a parse tree produced by PythonParser#test_nocond.
PythonListener.prototype.enterTest_nocond = function(ctx) { console.log('enterTest_nocond');
};

// Exit a parse tree produced by PythonParser#test_nocond.
PythonListener.prototype.exitTest_nocond = function(ctx) { console.log('exitTest_nocond');
};


// Enter a parse tree produced by PythonParser#lambdef.
PythonListener.prototype.enterLambdef = function(ctx) { console.log('enterLambdef');
};

// Exit a parse tree produced by PythonParser#lambdef.
PythonListener.prototype.exitLambdef = function(ctx) { console.log('exitLambdef');
};


// Enter a parse tree produced by PythonParser#lambdef_nocond.
PythonListener.prototype.enterLambdef_nocond = function(ctx) { console.log('enterLambdef_nocond');
};

// Exit a parse tree produced by PythonParser#lambdef_nocond.
PythonListener.prototype.exitLambdef_nocond = function(ctx) { console.log('exitLambdef_nocond');
};


// Enter a parse tree produced by PythonParser#or_test.
PythonListener.prototype.enterOr_test = function(ctx) { console.log('enterOr_test');
};

// Exit a parse tree produced by PythonParser#or_test.
PythonListener.prototype.exitOr_test = function(ctx) { console.log('exitOr_test');
};


// Enter a parse tree produced by PythonParser#and_test.
PythonListener.prototype.enterAnd_test = function(ctx) { console.log('enterAnd_test');
};

// Exit a parse tree produced by PythonParser#and_test.
PythonListener.prototype.exitAnd_test = function(ctx) { console.log('exitAnd_test');
};


// Enter a parse tree produced by PythonParser#not_test.
PythonListener.prototype.enterNot_test = function(ctx) { console.log('enterNot_test');
};

// Exit a parse tree produced by PythonParser#not_test.
PythonListener.prototype.exitNot_test = function(ctx) { console.log('exitNot_test');
};


// Enter a parse tree produced by PythonParser#comparison.
PythonListener.prototype.enterComparison = function(ctx) { console.log('enterComparison');
};

// Exit a parse tree produced by PythonParser#comparison.
PythonListener.prototype.exitComparison = function(ctx) { console.log('exitComparison');
};


// Enter a parse tree produced by PythonParser#comp_op.
PythonListener.prototype.enterComp_op = function(ctx) { console.log('enterComp_op');
};

// Exit a parse tree produced by PythonParser#comp_op.
PythonListener.prototype.exitComp_op = function(ctx) { console.log('exitComp_op');
};


// Enter a parse tree produced by PythonParser#star_expr.
PythonListener.prototype.enterStar_expr = function(ctx) { console.log('enterStar_expr');
};

// Exit a parse tree produced by PythonParser#star_expr.
PythonListener.prototype.exitStar_expr = function(ctx) { console.log('exitStar_expr');
};


// Enter a parse tree produced by PythonParser#expr.
PythonListener.prototype.enterExpr = function(ctx) { console.log('enterExpr');
};

// Exit a parse tree produced by PythonParser#expr.
PythonListener.prototype.exitExpr = function(ctx) { console.log('exitExpr');
};


// Enter a parse tree produced by PythonParser#xor_expr.
PythonListener.prototype.enterXor_expr = function(ctx) { console.log('enterXor_expr');
};

// Exit a parse tree produced by PythonParser#xor_expr.
PythonListener.prototype.exitXor_expr = function(ctx) { console.log('exitXor_expr');
};


// Enter a parse tree produced by PythonParser#and_expr.
PythonListener.prototype.enterAnd_expr = function(ctx) { console.log('enterAnd_expr');
};

// Exit a parse tree produced by PythonParser#and_expr.
PythonListener.prototype.exitAnd_expr = function(ctx) { console.log('exitAnd_expr');
};


// Enter a parse tree produced by PythonParser#shift_expr.
PythonListener.prototype.enterShift_expr = function(ctx) { console.log('enterShift_expr');
};

// Exit a parse tree produced by PythonParser#shift_expr.
PythonListener.prototype.exitShift_expr = function(ctx) { console.log('exitShift_expr');
};


// Enter a parse tree produced by PythonParser#arith_expr.
PythonListener.prototype.enterArith_expr = function(ctx) { console.log('enterArith_expr');
};

// Exit a parse tree produced by PythonParser#arith_expr.
PythonListener.prototype.exitArith_expr = function(ctx) { console.log('exitArith_expr');
};


// Enter a parse tree produced by PythonParser#term.
PythonListener.prototype.enterTerm = function(ctx) { console.log('enterTerm');
};

// Exit a parse tree produced by PythonParser#term.
PythonListener.prototype.exitTerm = function(ctx) { console.log('exitTerm');
};


// Enter a parse tree produced by PythonParser#factor.
PythonListener.prototype.enterFactor = function(ctx) { console.log('enterFactor');
};

// Exit a parse tree produced by PythonParser#factor.
PythonListener.prototype.exitFactor = function(ctx) { console.log('exitFactor');
};


// Enter a parse tree produced by PythonParser#power.
PythonListener.prototype.enterPower = function(ctx) { console.log('enterPower');
};

// Exit a parse tree produced by PythonParser#power.
PythonListener.prototype.exitPower = function(ctx) { console.log('exitPower');
};


// Enter a parse tree produced by PythonParser#atom_expr.
PythonListener.prototype.enterAtom_expr = function(ctx) { console.log('enterAtom_expr');
};

// Exit a parse tree produced by PythonParser#atom_expr.
PythonListener.prototype.exitAtom_expr = function(ctx) { console.log('exitAtom_expr');
};


// Enter a parse tree produced by PythonParser#atom.
PythonListener.prototype.enterAtom = function(ctx) { console.log('enterAtom');
};

// Exit a parse tree produced by PythonParser#atom.
PythonListener.prototype.exitAtom = function(ctx) { console.log('exitAtom');
};


// Enter a parse tree produced by PythonParser#testlist_comp.
PythonListener.prototype.enterTestlist_comp = function(ctx) { console.log('enterTestlist_comp');
};

// Exit a parse tree produced by PythonParser#testlist_comp.
PythonListener.prototype.exitTestlist_comp = function(ctx) { console.log('exitTestlist_comp');
};


// Enter a parse tree produced by PythonParser#trailer.
PythonListener.prototype.enterTrailer = function(ctx) { console.log('enterTrailer');
};

// Exit a parse tree produced by PythonParser#trailer.
PythonListener.prototype.exitTrailer = function(ctx) { console.log('exitTrailer');
};


// Enter a parse tree produced by PythonParser#subscriptlist.
PythonListener.prototype.enterSubscriptlist = function(ctx) { console.log('enterSubscriptlist');
};

// Exit a parse tree produced by PythonParser#subscriptlist.
PythonListener.prototype.exitSubscriptlist = function(ctx) { console.log('exitSubscriptlist');
};


// Enter a parse tree produced by PythonParser#subscript.
PythonListener.prototype.enterSubscript = function(ctx) { console.log('enterSubscript');
};

// Exit a parse tree produced by PythonParser#subscript.
PythonListener.prototype.exitSubscript = function(ctx) { console.log('exitSubscript');
};


// Enter a parse tree produced by PythonParser#sliceop.
PythonListener.prototype.enterSliceop = function(ctx) { console.log('enterSliceop');
};

// Exit a parse tree produced by PythonParser#sliceop.
PythonListener.prototype.exitSliceop = function(ctx) { console.log('exitSliceop');
};


// Enter a parse tree produced by PythonParser#exprlist.
PythonListener.prototype.enterExprlist = function(ctx) { console.log('enterExprlist');
};

// Exit a parse tree produced by PythonParser#exprlist.
PythonListener.prototype.exitExprlist = function(ctx) { console.log('exitExprlist');
};


// Enter a parse tree produced by PythonParser#testlist.
PythonListener.prototype.enterTestlist = function(ctx) { console.log('enterTestlist');
};

// Exit a parse tree produced by PythonParser#testlist.
PythonListener.prototype.exitTestlist = function(ctx) { console.log('exitTestlist');
};


// Enter a parse tree produced by PythonParser#dictorsetmaker.
PythonListener.prototype.enterDictorsetmaker = function(ctx) { console.log('enterDictorsetmaker');
};

// Exit a parse tree produced by PythonParser#dictorsetmaker.
PythonListener.prototype.exitDictorsetmaker = function(ctx) { console.log('exitDictorsetmaker');
};


// Enter a parse tree produced by PythonParser#classdef.
PythonListener.prototype.enterClassdef = function(ctx) { console.log('enterClassdef');
};

// Exit a parse tree produced by PythonParser#classdef.
PythonListener.prototype.exitClassdef = function(ctx) { console.log('exitClassdef');
};


// Enter a parse tree produced by PythonParser#arglist.
PythonListener.prototype.enterArglist = function(ctx) { console.log('enterArglist');
};

// Exit a parse tree produced by PythonParser#arglist.
PythonListener.prototype.exitArglist = function(ctx) { console.log('exitArglist');
};


// Enter a parse tree produced by PythonParser#argument.
PythonListener.prototype.enterArgument = function(ctx) { console.log('enterArgument');
};

// Exit a parse tree produced by PythonParser#argument.
PythonListener.prototype.exitArgument = function(ctx) { console.log('exitArgument');
};


// Enter a parse tree produced by PythonParser#comp_iter.
PythonListener.prototype.enterComp_iter = function(ctx) { console.log('enterComp_iter');
};

// Exit a parse tree produced by PythonParser#comp_iter.
PythonListener.prototype.exitComp_iter = function(ctx) { console.log('exitComp_iter');
};


// Enter a parse tree produced by PythonParser#comp_for.
PythonListener.prototype.enterComp_for = function(ctx) { console.log('enterComp_for');
};

// Exit a parse tree produced by PythonParser#comp_for.
PythonListener.prototype.exitComp_for = function(ctx) { console.log('exitComp_for');
};


// Enter a parse tree produced by PythonParser#comp_if.
PythonListener.prototype.enterComp_if = function(ctx) { console.log('enterComp_if');
};

// Exit a parse tree produced by PythonParser#comp_if.
PythonListener.prototype.exitComp_if = function(ctx) { console.log('exitComp_if');
};


// Enter a parse tree produced by PythonParser#encoding_decl.
PythonListener.prototype.enterEncoding_decl = function(ctx) { console.log('enterEncoding_decl');
};

// Exit a parse tree produced by PythonParser#encoding_decl.
PythonListener.prototype.exitEncoding_decl = function(ctx) { console.log('exitEncoding_decl');
};


// Enter a parse tree produced by PythonParser#yield_expr.
PythonListener.prototype.enterYield_expr = function(ctx) { console.log('enterYield_expr');
};

// Exit a parse tree produced by PythonParser#yield_expr.
PythonListener.prototype.exitYield_expr = function(ctx) { console.log('exitYield_expr');
};


// Enter a parse tree produced by PythonParser#yield_arg.
PythonListener.prototype.enterYield_arg = function(ctx) { console.log('enterYield_arg');
};

// Exit a parse tree produced by PythonParser#yield_arg.
PythonListener.prototype.exitYield_arg = function(ctx) { console.log('exitYield_arg');
};



exports.PythonListener = PythonListener;
},{"./ASTNodes":50,"antlr4/index":42}],54:[function(require,module,exports){
// Generated from src/interpreter/Python.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PythonListener = require('./PythonListener').PythonListener;
var PythonVisitor = require('./PythonVisitor').PythonVisitor;

var grammarFileName = "Python.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3e\u0453\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4",
    "\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t",
    "\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27",
    "\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4",
    "\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t",
    "\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t",
    "\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t",
    "8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC",
    "\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4",
    "O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\3\2\3\2\3\2\3\2",
    "\3\2\5\2\u00b4\n\2\3\3\3\3\7\3\u00b8\n\3\f\3\16\3\u00bb\13\3\3\3\3\3",
    "\3\4\3\4\7\4\u00c1\n\4\f\4\16\4\u00c4\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5",
    "\5\u00cc\n\5\3\5\5\5\u00cf\n\5\3\5\3\5\3\6\6\6\u00d4\n\6\r\6\16\6\u00d5",
    "\3\7\3\7\3\7\3\7\5\7\u00dc\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\5\t\u00e6",
    "\n\t\3\t\3\t\3\t\3\t\3\n\3\n\5\n\u00ee\n\n\3\n\3\n\3\13\3\13\3\13\5",
    "\13\u00f5\n\13\3\13\3\13\3\13\3\13\5\13\u00fb\n\13\7\13\u00fd\n\13\f",
    "\13\16\13\u0100\13\13\3\13\3\13\3\13\5\13\u0105\n\13\3\13\3\13\3\13",
    "\3\13\5\13\u010b\n\13\7\13\u010d\n\13\f\13\16\13\u0110\13\13\3\13\3",
    "\13\3\13\3\13\5\13\u0116\n\13\5\13\u0118\n\13\5\13\u011a\n\13\3\13\3",
    "\13\3\13\5\13\u011f\n\13\5\13\u0121\n\13\5\13\u0123\n\13\3\13\3\13\5",
    "\13\u0127\n\13\3\13\3\13\3\13\3\13\5\13\u012d\n\13\7\13\u012f\n\13\f",
    "\13\16\13\u0132\13\13\3\13\3\13\3\13\3\13\5\13\u0138\n\13\5\13\u013a",
    "\n\13\5\13\u013c\n\13\3\13\3\13\3\13\5\13\u0141\n\13\5\13\u0143\n\13",
    "\3\f\3\f\3\f\5\f\u0148\n\f\3\r\3\r\3\r\5\r\u014d\n\r\3\r\3\r\3\r\3\r",
    "\5\r\u0153\n\r\7\r\u0155\n\r\f\r\16\r\u0158\13\r\3\r\3\r\3\r\5\r\u015d",
    "\n\r\3\r\3\r\3\r\3\r\5\r\u0163\n\r\7\r\u0165\n\r\f\r\16\r\u0168\13\r",
    "\3\r\3\r\3\r\3\r\5\r\u016e\n\r\5\r\u0170\n\r\5\r\u0172\n\r\3\r\3\r\3",
    "\r\5\r\u0177\n\r\5\r\u0179\n\r\5\r\u017b\n\r\3\r\3\r\5\r\u017f\n\r\3",
    "\r\3\r\3\r\3\r\5\r\u0185\n\r\7\r\u0187\n\r\f\r\16\r\u018a\13\r\3\r\3",
    "\r\3\r\3\r\5\r\u0190\n\r\5\r\u0192\n\r\5\r\u0194\n\r\3\r\3\r\3\r\5\r",
    "\u0199\n\r\5\r\u019b\n\r\3\16\3\16\3\17\3\17\5\17\u01a1\n\17\3\20\3",
    "\20\3\20\7\20\u01a6\n\20\f\20\16\20\u01a9\13\20\3\20\5\20\u01ac\n\20",
    "\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01b8\n\21\3",
    "\22\3\22\3\22\3\22\3\22\5\22\u01bf\n\22\3\22\3\22\3\22\5\22\u01c4\n",
    "\22\7\22\u01c6\n\22\f\22\16\22\u01c9\13\22\5\22\u01cb\n\22\3\23\3\23",
    "\3\23\3\23\5\23\u01d1\n\23\3\24\3\24\5\24\u01d5\n\24\3\24\3\24\3\24",
    "\5\24\u01da\n\24\7\24\u01dc\n\24\f\24\16\24\u01df\13\24\3\24\5\24\u01e2",
    "\n\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5",
    "\30\u01f0\n\30\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u01f8\n\33\3\34\3",
    "\34\3\35\3\35\3\35\3\35\5\35\u0200\n\35\5\35\u0202\n\35\3\36\3\36\5",
    "\36\u0206\n\36\3\37\3\37\3\37\3 \3 \7 \u020d\n \f \16 \u0210\13 \3 ",
    "\3 \6 \u0214\n \r \16 \u0215\5 \u0218\n \3 \3 \3 \3 \3 \3 \3 \5 \u0221",
    "\n \3!\3!\3!\5!\u0226\n!\3\"\3\"\3\"\5\"\u022b\n\"\3#\3#\3#\7#\u0230",
    "\n#\f#\16#\u0233\13#\3#\5#\u0236\n#\3$\3$\3$\7$\u023b\n$\f$\16$\u023e",
    "\13$\3%\3%\3%\7%\u0243\n%\f%\16%\u0246\13%\3&\3&\3&\3&\7&\u024c\n&\f",
    "&\16&\u024f\13&\3\'\3\'\3\'\3\'\7\'\u0255\n\'\f\'\16\'\u0258\13\'\3",
    "(\3(\3(\3(\5(\u025e\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0269\n)\3*\3*",
    "\3*\3*\5*\u026f\n*\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u027a\n+\f+\16+\u027d",
    "\13+\3+\3+\3+\5+\u0282\n+\3,\3,\3,\3,\3,\3,\3,\5,\u028b\n,\3-\3-\3-",
    "\3-\3-\3-\3-\3-\3-\5-\u0296\n-\3.\3.\3.\3.\3.\3.\3.\6.\u029f\n.\r.\16",
    ".\u02a0\3.\3.\3.\5.\u02a6\n.\3.\3.\3.\5.\u02ab\n.\3.\3.\3.\5.\u02b0",
    "\n.\3/\3/\3/\3/\7/\u02b6\n/\f/\16/\u02b9\13/\3/\3/\3/\3\60\3\60\3\60",
    "\5\60\u02c1\n\60\3\61\3\61\3\61\3\61\5\61\u02c7\n\61\5\61\u02c9\n\61",
    "\3\62\3\62\3\62\3\62\6\62\u02cf\n\62\r\62\16\62\u02d0\3\62\3\62\5\62",
    "\u02d5\n\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u02dd\n\63\3\63\5\63",
    "\u02e0\n\63\3\64\3\64\5\64\u02e4\n\64\3\65\3\65\5\65\u02e8\n\65\3\65",
    "\3\65\3\65\3\66\3\66\5\66\u02ef\n\66\3\66\3\66\3\66\3\67\3\67\3\67\7",
    "\67\u02f7\n\67\f\67\16\67\u02fa\13\67\38\38\38\78\u02ff\n8\f8\168\u0302",
    "\138\39\39\39\59\u0307\n9\3:\3:\3:\3:\7:\u030d\n:\f:\16:\u0310\13:\3",
    ";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u031f\n;\3<\3<\3<\3=\3=\3=",
    "\7=\u0327\n=\f=\16=\u032a\13=\3>\3>\3>\7>\u032f\n>\f>\16>\u0332\13>",
    "\3?\3?\3?\7?\u0337\n?\f?\16?\u033a\13?\3@\3@\3@\7@\u033f\n@\f@\16@\u0342",
    "\13@\3A\3A\3A\7A\u0347\nA\fA\16A\u034a\13A\3B\3B\3B\7B\u034f\nB\fB\16",
    "B\u0352\13B\3C\3C\3C\5C\u0357\nC\3D\3D\3D\5D\u035c\nD\3E\5E\u035f\n",
    "E\3E\3E\7E\u0363\nE\fE\16E\u0366\13E\3F\3F\3F\5F\u036b\nF\3F\3F\3F\5",
    "F\u0370\nF\3F\3F\3F\5F\u0375\nF\3F\3F\3F\3F\6F\u037b\nF\rF\16F\u037c",
    "\3F\3F\3F\3F\5F\u0383\nF\3G\3G\5G\u0387\nG\3G\3G\3G\3G\5G\u038d\nG\7",
    "G\u038f\nG\fG\16G\u0392\13G\3G\5G\u0395\nG\5G\u0397\nG\3H\3H\5H\u039b",
    "\nH\3H\3H\3H\3H\3H\3H\3H\5H\u03a4\nH\3I\3I\3I\7I\u03a9\nI\fI\16I\u03ac",
    "\13I\3I\5I\u03af\nI\3J\3J\5J\u03b3\nJ\3J\3J\5J\u03b7\nJ\3J\5J\u03ba",
    "\nJ\5J\u03bc\nJ\3K\3K\5K\u03c0\nK\3L\3L\5L\u03c4\nL\3L\3L\3L\5L\u03c9",
    "\nL\7L\u03cb\nL\fL\16L\u03ce\13L\3L\5L\u03d1\nL\3M\3M\3M\7M\u03d6\n",
    "M\fM\16M\u03d9\13M\3M\5M\u03dc\nM\3N\3N\3N\3N\3N\3N\5N\u03e4\nN\3N\3",
    "N\3N\3N\3N\3N\3N\3N\5N\u03ee\nN\7N\u03f0\nN\fN\16N\u03f3\13N\3N\5N\u03f6",
    "\nN\5N\u03f8\nN\3N\3N\5N\u03fc\nN\3N\3N\3N\3N\5N\u0402\nN\7N\u0404\n",
    "N\fN\16N\u0407\13N\3N\5N\u040a\nN\5N\u040c\nN\5N\u040e\nN\3O\3O\3O\3",
    "O\5O\u0414\nO\3O\5O\u0417\nO\3O\3O\3O\3P\3P\3P\7P\u041f\nP\fP\16P\u0422",
    "\13P\3P\5P\u0425\nP\3Q\3Q\5Q\u0429\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0433",
    "\nQ\3R\3R\5R\u0437\nR\3S\5S\u043a\nS\3S\3S\3S\3S\3S\5S\u0441\nS\3T\3",
    "T\3T\5T\u0446\nT\3U\3U\3V\3V\5V\u044c\nV\3W\3W\3W\5W\u0451\nW\3W\2\2",
    "X\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@B",
    "DFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a",
    "\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2",
    "\u00a4\u00a6\u00a8\u00aa\u00ac\2\b\3\2Ua\3\2\63\64\3\2BC\3\2DE\5\2\65",
    "\65FHSS\4\2DEII\u04d0\2\u00b3\3\2\2\2\4\u00b9\3\2\2\2\6\u00be\3\2\2",
    "\2\b\u00c7\3\2\2\2\n\u00d3\3\2\2\2\f\u00d7\3\2\2\2\16\u00dd\3\2\2\2",
    "\20\u00e0\3\2\2\2\22\u00eb\3\2\2\2\24\u0142\3\2\2\2\26\u0144\3\2\2\2",
    "\30\u019a\3\2\2\2\32\u019c\3\2\2\2\34\u01a0\3\2\2\2\36\u01a2\3\2\2\2",
    " \u01b7\3\2\2\2\"\u01b9\3\2\2\2$\u01cc\3\2\2\2&\u01d4\3\2\2\2(\u01e3",
    "\3\2\2\2*\u01e5\3\2\2\2,\u01e8\3\2\2\2.\u01ef\3\2\2\2\60\u01f1\3\2\2",
    "\2\62\u01f3\3\2\2\2\64\u01f5\3\2\2\2\66\u01f9\3\2\2\28\u01fb\3\2\2\2",
    ":\u0205\3\2\2\2<\u0207\3\2\2\2>\u020a\3\2\2\2@\u0222\3\2\2\2B\u0227",
    "\3\2\2\2D\u022c\3\2\2\2F\u0237\3\2\2\2H\u023f\3\2\2\2J\u0247\3\2\2\2",
    "L\u0250\3\2\2\2N\u0259\3\2\2\2P\u0268\3\2\2\2R\u026a\3\2\2\2T\u0270",
    "\3\2\2\2V\u0283\3\2\2\2X\u028c\3\2\2\2Z\u0297\3\2\2\2\\\u02b1\3\2\2",
    "\2^\u02bd\3\2\2\2`\u02c2\3\2\2\2b\u02d4\3\2\2\2d\u02df\3\2\2\2f\u02e3",
    "\3\2\2\2h\u02e5\3\2\2\2j\u02ec\3\2\2\2l\u02f3\3\2\2\2n\u02fb\3\2\2\2",
    "p\u0306\3\2\2\2r\u0308\3\2\2\2t\u031e\3\2\2\2v\u0320\3\2\2\2x\u0323",
    "\3\2\2\2z\u032b\3\2\2\2|\u0333\3\2\2\2~\u033b\3\2\2\2\u0080\u0343\3",
    "\2\2\2\u0082\u034b\3\2\2\2\u0084\u0356\3\2\2\2\u0086\u0358\3\2\2\2\u0088",
    "\u035e\3\2\2\2\u008a\u0382\3\2\2\2\u008c\u0386\3\2\2\2\u008e\u03a3\3",
    "\2\2\2\u0090\u03a5\3\2\2\2\u0092\u03bb\3\2\2\2\u0094\u03bd\3\2\2\2\u0096",
    "\u03c3\3\2\2\2\u0098\u03d2\3\2\2\2\u009a\u040d\3\2\2\2\u009c\u040f\3",
    "\2\2\2\u009e\u041b\3\2\2\2\u00a0\u0432\3\2\2\2\u00a2\u0436\3\2\2\2\u00a4",
    "\u0439\3\2\2\2\u00a6\u0442\3\2\2\2\u00a8\u0447\3\2\2\2\u00aa\u0449\3",
    "\2\2\2\u00ac\u0450\3\2\2\2\u00ae\u00b4\7)\2\2\u00af\u00b4\5\36\20\2",
    "\u00b0\u00b1\5P)\2\u00b1\u00b2\7)\2\2\u00b2\u00b4\3\2\2\2\u00b3\u00ae",
    "\3\2\2\2\u00b3\u00af\3\2\2\2\u00b3\u00b0\3\2\2\2\u00b4\3\3\2\2\2\u00b5",
    "\u00b8\7)\2\2\u00b6\u00b8\5\34\17\2\u00b7\u00b5\3\2\2\2\u00b7\u00b6",
    "\3\2\2\2\u00b8\u00bb\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2",
    "\u00ba\u00bc\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc\u00bd\7\2\2\3\u00bd\5",
    "\3\2\2\2\u00be\u00c2\5\u0098M\2\u00bf\u00c1\7)\2\2\u00c0\u00bf\3\2\2",
    "\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3",
    "\u00c5\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00c6\7\2\2\3\u00c6\7\3\2\2",
    "\2\u00c7\u00c8\7S\2\2\u00c8\u00ce\5H%\2\u00c9\u00cb\7\66\2\2\u00ca\u00cc",
    "\5\u009eP\2\u00cb\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\3\2",
    "\2\2\u00cd\u00cf\7\67\2\2\u00ce\u00c9\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf",
    "\u00d0\3\2\2\2\u00d0\u00d1\7)\2\2\u00d1\t\3\2\2\2\u00d2\u00d4\5\b\5",
    "\2\u00d3\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5",
    "\u00d6\3\2\2\2\u00d6\13\3\2\2\2\u00d7\u00db\5\n\6\2\u00d8\u00dc\5\u009c",
    "O\2\u00d9\u00dc\5\20\t\2\u00da\u00dc\5\16\b\2\u00db\u00d8\3\2\2\2\u00db",
    "\u00d9\3\2\2\2\u00db\u00da\3\2\2\2\u00dc\r\3\2\2\2\u00dd\u00de\7\'\2",
    "\2\u00de\u00df\5\20\t\2\u00df\17\3\2\2\2\u00e0\u00e1\7\6\2\2\u00e1\u00e2",
    "\7*\2\2\u00e2\u00e5\5\22\n\2\u00e3\u00e4\7T\2\2\u00e4\u00e6\5d\63\2",
    "\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8",
    "\79\2\2\u00e8\u00e9\5b\62\2\u00e9\u00ea\b\t\1\2\u00ea\21\3\2\2\2\u00eb",
    "\u00ed\7\66\2\2\u00ec\u00ee\5\24\13\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee",
    "\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f0\7\67\2\2\u00f0\23\3\2\2\2\u00f1",
    "\u00f4\5\26\f\2\u00f2\u00f3\7<\2\2\u00f3\u00f5\5d\63\2\u00f4\u00f2\3",
    "\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00fe\3\2\2\2\u00f6\u00f7\78\2\2\u00f7",
    "\u00fa\5\26\f\2\u00f8\u00f9\7<\2\2\u00f9\u00fb\5d\63\2\u00fa\u00f8\3",
    "\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd\3\2\2\2\u00fc\u00f6\3\2\2\2\u00fd",
    "\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0122\3",
    "\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0120\78\2\2\u0102\u0104\7\65\2\2\u0103",
    "\u0105\5\26\f\2\u0104\u0103\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u010e",
    "\3\2\2\2\u0106\u0107\78\2\2\u0107\u010a\5\26\f\2\u0108\u0109\7<\2\2",
    "\u0109\u010b\5d\63\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010d",
    "\3\2\2\2\u010c\u0106\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2",
    "\u010e\u010f\3\2\2\2\u010f\u0119\3\2\2\2\u0110\u010e\3\2\2\2\u0111\u0117",
    "\78\2\2\u0112\u0113\7;\2\2\u0113\u0115\5\26\f\2\u0114\u0116\78\2\2\u0115",
    "\u0114\3\2\2\2\u0115\u0116\3\2\2\2\u0116\u0118\3\2\2\2\u0117\u0112\3",
    "\2\2\2\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u0111\3\2\2\2\u0119",
    "\u011a\3\2\2\2\u011a\u0121\3\2\2\2\u011b\u011c\7;\2\2\u011c\u011e\5",
    "\26\f\2\u011d\u011f\78\2\2\u011e\u011d\3\2\2\2\u011e\u011f\3\2\2\2\u011f",
    "\u0121\3\2\2\2\u0120\u0102\3\2\2\2\u0120\u011b\3\2\2\2\u0120\u0121\3",
    "\2\2\2\u0121\u0123\3\2\2\2\u0122\u0101\3\2\2\2\u0122\u0123\3\2\2\2\u0123",
    "\u0143\3\2\2\2\u0124\u0126\7\65\2\2\u0125\u0127\5\26\f\2\u0126\u0125",
    "\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0130\3\2\2\2\u0128\u0129\78\2\2",
    "\u0129\u012c\5\26\f\2\u012a\u012b\7<\2\2\u012b\u012d\5d\63\2\u012c\u012a",
    "\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012f\3\2\2\2\u012e\u0128\3\2\2\2",
    "\u012f\u0132\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u013b",
    "\3\2\2\2\u0132\u0130\3\2\2\2\u0133\u0139\78\2\2\u0134\u0135\7;\2\2\u0135",
    "\u0137\5\26\f\2\u0136\u0138\78\2\2\u0137\u0136\3\2\2\2\u0137\u0138\3",
    "\2\2\2\u0138\u013a\3\2\2\2\u0139\u0134\3\2\2\2\u0139\u013a\3\2\2\2\u013a",
    "\u013c\3\2\2\2\u013b\u0133\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u0143\3",
    "\2\2\2\u013d\u013e\7;\2\2\u013e\u0140\5\26\f\2\u013f\u0141\78\2\2\u0140",
    "\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0143\3\2\2\2\u0142\u00f1\3",
    "\2\2\2\u0142\u0124\3\2\2\2\u0142\u013d\3\2\2\2\u0143\25\3\2\2\2\u0144",
    "\u0147\7*\2\2\u0145\u0146\79\2\2\u0146\u0148\5d\63\2\u0147\u0145\3\2",
    "\2\2\u0147\u0148\3\2\2\2\u0148\27\3\2\2\2\u0149\u014c\5\32\16\2\u014a",
    "\u014b\7<\2\2\u014b\u014d\5d\63\2\u014c\u014a\3\2\2\2\u014c\u014d\3",
    "\2\2\2\u014d\u0156\3\2\2\2\u014e\u014f\78\2\2\u014f\u0152\5\32\16\2",
    "\u0150\u0151\7<\2\2\u0151\u0153\5d\63\2\u0152\u0150\3\2\2\2\u0152\u0153",
    "\3\2\2\2\u0153\u0155\3\2\2\2\u0154\u014e\3\2\2\2\u0155\u0158\3\2\2\2",
    "\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u017a\3\2\2\2\u0158\u0156",
    "\3\2\2\2\u0159\u0178\78\2\2\u015a\u015c\7\65\2\2\u015b\u015d\5\32\16",
    "\2\u015c\u015b\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0166\3\2\2\2\u015e",
    "\u015f\78\2\2\u015f\u0162\5\32\16\2\u0160\u0161\7<\2\2\u0161\u0163\5",
    "d\63\2\u0162\u0160\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0165\3\2\2\2\u0164",
    "\u015e\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3",
    "\2\2\2\u0167\u0171\3\2\2\2\u0168\u0166\3\2\2\2\u0169\u016f\78\2\2\u016a",
    "\u016b\7;\2\2\u016b\u016d\5\32\16\2\u016c\u016e\78\2\2\u016d\u016c\3",
    "\2\2\2\u016d\u016e\3\2\2\2\u016e\u0170\3\2\2\2\u016f\u016a\3\2\2\2\u016f",
    "\u0170\3\2\2\2\u0170\u0172\3\2\2\2\u0171\u0169\3\2\2\2\u0171\u0172\3",
    "\2\2\2\u0172\u0179\3\2\2\2\u0173\u0174\7;\2\2\u0174\u0176\5\32\16\2",
    "\u0175\u0177\78\2\2\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179",
    "\3\2\2\2\u0178\u015a\3\2\2\2\u0178\u0173\3\2\2\2\u0178\u0179\3\2\2\2",
    "\u0179\u017b\3\2\2\2\u017a\u0159\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u019b",
    "\3\2\2\2\u017c\u017e\7\65\2\2\u017d\u017f\5\32\16\2\u017e\u017d\3\2",
    "\2\2\u017e\u017f\3\2\2\2\u017f\u0188\3\2\2\2\u0180\u0181\78\2\2\u0181",
    "\u0184\5\32\16\2\u0182\u0183\7<\2\2\u0183\u0185\5d\63\2\u0184\u0182",
    "\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\3\2\2\2\u0186\u0180\3\2\2\2",
    "\u0187\u018a\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u0193",
    "\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u0191\78\2\2\u018c\u018d\7;\2\2\u018d",
    "\u018f\5\32\16\2\u018e\u0190\78\2\2\u018f\u018e\3\2\2\2\u018f\u0190",
    "\3\2\2\2\u0190\u0192\3\2\2\2\u0191\u018c\3\2\2\2\u0191\u0192\3\2\2\2",
    "\u0192\u0194\3\2\2\2\u0193\u018b\3\2\2\2\u0193\u0194\3\2\2\2\u0194\u019b",
    "\3\2\2\2\u0195\u0196\7;\2\2\u0196\u0198\5\32\16\2\u0197\u0199\78\2\2",
    "\u0198\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019b\3\2\2\2\u019a\u0149",
    "\3\2\2\2\u019a\u017c\3\2\2\2\u019a\u0195\3\2\2\2\u019b\31\3\2\2\2\u019c",
    "\u019d\7*\2\2\u019d\33\3\2\2\2\u019e\u01a1\5\36\20\2\u019f\u01a1\5P",
    ")\2\u01a0\u019e\3\2\2\2\u01a0\u019f\3\2\2\2\u01a1\35\3\2\2\2\u01a2\u01a7",
    "\5 \21\2\u01a3\u01a4\7:\2\2\u01a4\u01a6\5 \21\2\u01a5\u01a3\3\2\2\2",
    "\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01ab",
    "\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ac\7:\2\2\u01ab\u01aa\3\2\2\2",
    "\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae\7)\2\2\u01ae\37",
    "\3\2\2\2\u01af\u01b8\5\"\22\2\u01b0\u01b8\5*\26\2\u01b1\u01b8\5,\27",
    "\2\u01b2\u01b8\5.\30\2\u01b3\u01b8\5:\36\2\u01b4\u01b8\5J&\2\u01b5\u01b8",
    "\5L\'\2\u01b6\u01b8\5N(\2\u01b7\u01af\3\2\2\2\u01b7\u01b0\3\2\2\2\u01b7",
    "\u01b1\3\2\2\2\u01b7\u01b2\3\2\2\2\u01b7\u01b3\3\2\2\2\u01b7\u01b4\3",
    "\2\2\2\u01b7\u01b5\3\2\2\2\u01b7\u01b6\3\2\2\2\u01b8!\3\2\2\2\u01b9",
    "\u01ca\5&\24\2\u01ba\u01cb\5$\23\2\u01bb\u01be\5(\25\2\u01bc\u01bf\5",
    "\u00aaV\2\u01bd\u01bf\5\u0098M\2\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2",
    "\2\2\u01bf\u01cb\3\2\2\2\u01c0\u01c3\7<\2\2\u01c1\u01c4\5\u00aaV\2\u01c2",
    "\u01c4\5&\24\2\u01c3\u01c1\3\2\2\2\u01c3\u01c2\3\2\2\2\u01c4\u01c6\3",
    "\2\2\2\u01c5\u01c0\3\2\2\2\u01c6\u01c9\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7",
    "\u01c8\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01ba\3",
    "\2\2\2\u01ca\u01bb\3\2\2\2\u01ca\u01c7\3\2\2\2\u01cb#\3\2\2\2\u01cc",
    "\u01cd\79\2\2\u01cd\u01d0\5d\63\2\u01ce\u01cf\7<\2\2\u01cf\u01d1\5d",
    "\63\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1%\3\2\2\2\u01d2\u01d5",
    "\5d\63\2\u01d3\u01d5\5v<\2\u01d4\u01d2\3\2\2\2\u01d4\u01d3\3\2\2\2\u01d5",
    "\u01dd\3\2\2\2\u01d6\u01d9\78\2\2\u01d7\u01da\5d\63\2\u01d8\u01da\5",
    "v<\2\u01d9\u01d7\3\2\2\2\u01d9\u01d8\3\2\2\2\u01da\u01dc\3\2\2\2\u01db",
    "\u01d6\3\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3",
    "\2\2\2\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e2\78\2\2\u01e1",
    "\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\'\3\2\2\2\u01e3\u01e4\t\2\2",
    "\2\u01e4)\3\2\2\2\u01e5\u01e6\7#\2\2\u01e6\u01e7\5\u0096L\2\u01e7+\3",
    "\2\2\2\u01e8\u01e9\7$\2\2\u01e9-\3\2\2\2\u01ea\u01f0\5\60\31\2\u01eb",
    "\u01f0\5\62\32\2\u01ec\u01f0\5\64\33\2\u01ed\u01f0\58\35\2\u01ee\u01f0",
    "\5\66\34\2\u01ef\u01ea\3\2\2\2\u01ef\u01eb\3\2\2\2\u01ef\u01ec\3\2\2",
    "\2\u01ef\u01ed\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0/\3\2\2\2\u01f1\u01f2",
    "\7&\2\2\u01f2\61\3\2\2\2\u01f3\u01f4\7%\2\2\u01f4\63\3\2\2\2\u01f5\u01f7",
    "\7\7\2\2\u01f6\u01f8\5\u0098M\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2",
    "\2\2\u01f8\65\3\2\2\2\u01f9\u01fa\5\u00aaV\2\u01fa\67\3\2\2\2\u01fb",
    "\u0201\7\b\2\2\u01fc\u01ff\5d\63\2\u01fd\u01fe\7\t\2\2\u01fe\u0200\5",
    "d\63\2\u01ff\u01fd\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2\u0201",
    "\u01fc\3\2\2\2\u0201\u0202\3\2\2\2\u02029\3\2\2\2\u0203\u0206\5<\37",
    "\2\u0204\u0206\5> \2\u0205\u0203\3\2\2\2\u0205\u0204\3\2\2\2\u0206;",
    "\3\2\2\2\u0207\u0208\7\n\2\2\u0208\u0209\5F$\2\u0209=\3\2\2\2\u020a",
    "\u0217\7\t\2\2\u020b\u020d\t\3\2\2\u020c\u020b\3\2\2\2\u020d\u0210\3",
    "\2\2\2\u020e\u020c\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211\3\2\2\2\u0210",
    "\u020e\3\2\2\2\u0211\u0218\5H%\2\u0212\u0214\t\3\2\2\u0213\u0212\3\2",
    "\2\2\u0214\u0215\3\2\2\2\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216",
    "\u0218\3\2\2\2\u0217\u020e\3\2\2\2\u0217\u0213\3\2\2\2\u0218\u0219\3",
    "\2\2\2\u0219\u0220\7\n\2\2\u021a\u0221\7\65\2\2\u021b\u021c\7\66\2\2",
    "\u021c\u021d\5D#\2\u021d\u021e\7\67\2\2\u021e\u0221\3\2\2\2\u021f\u0221",
    "\5D#\2\u0220\u021a\3\2\2\2\u0220\u021b\3\2\2\2\u0220\u021f\3\2\2\2\u0221",
    "?\3\2\2\2\u0222\u0225\7*\2\2\u0223\u0224\7\13\2\2\u0224\u0226\7*\2\2",
    "\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226A\3\2\2\2\u0227\u022a",
    "\5H%\2\u0228\u0229\7\13\2\2\u0229\u022b\7*\2\2\u022a\u0228\3\2\2\2\u022a",
    "\u022b\3\2\2\2\u022bC\3\2\2\2\u022c\u0231\5@!\2\u022d\u022e\78\2\2\u022e",
    "\u0230\5@!\2\u022f\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2",
    "\2\2\u0231\u0232\3\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0234",
    "\u0236\78\2\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236E\3\2\2\2",
    "\u0237\u023c\5B\"\2\u0238\u0239\78\2\2\u0239\u023b\5B\"\2\u023a\u0238",
    "\3\2\2\2\u023b\u023e\3\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2",
    "\u023dG\3\2\2\2\u023e\u023c\3\2\2\2\u023f\u0244\7*\2\2\u0240\u0241\7",
    "\63\2\2\u0241\u0243\7*\2\2\u0242\u0240\3\2\2\2\u0243\u0246\3\2\2\2\u0244",
    "\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245I\3\2\2\2\u0246\u0244\3\2\2",
    "\2\u0247\u0248\7\f\2\2\u0248\u024d\7*\2\2\u0249\u024a\78\2\2\u024a\u024c",
    "\7*\2\2\u024b\u0249\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2",
    "\u024d\u024e\3\2\2\2\u024eK\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0251",
    "\7\r\2\2\u0251\u0256\7*\2\2\u0252\u0253\78\2\2\u0253\u0255\7*\2\2\u0254",
    "\u0252\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0257\3",
    "\2\2\2\u0257M\3\2\2\2\u0258\u0256\3\2\2\2\u0259\u025a\7\16\2\2\u025a",
    "\u025d\5d\63\2\u025b\u025c\78\2\2\u025c\u025e\5d\63\2\u025d\u025b\3",
    "\2\2\2\u025d\u025e\3\2\2\2\u025eO\3\2\2\2\u025f\u0269\5T+\2\u0260\u0269",
    "\5V,\2\u0261\u0269\5X-\2\u0262\u0269\5Z.\2\u0263\u0269\5\\/\2\u0264",
    "\u0269\5\20\t\2\u0265\u0269\5\u009cO\2\u0266\u0269\5\f\7\2\u0267\u0269",
    "\5R*\2\u0268\u025f\3\2\2\2\u0268\u0260\3\2\2\2\u0268\u0261\3\2\2\2\u0268",
    "\u0262\3\2\2\2\u0268\u0263\3\2\2\2\u0268\u0264\3\2\2\2\u0268\u0265\3",
    "\2\2\2\u0268\u0266\3\2\2\2\u0268\u0267\3\2\2\2\u0269Q\3\2\2\2\u026a",
    "\u026e\7\'\2\2\u026b\u026f\5\20\t\2\u026c\u026f\5\\/\2\u026d\u026f\5",
    "X-\2\u026e\u026b\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026d\3\2\2\2\u026f",
    "S\3\2\2\2\u0270\u0271\7\17\2\2\u0271\u0272\5d\63\2\u0272\u0273\79\2",
    "\2\u0273\u027b\5b\62\2\u0274\u0275\7\20\2\2\u0275\u0276\5d\63\2\u0276",
    "\u0277\79\2\2\u0277\u0278\5b\62\2\u0278\u027a\3\2\2\2\u0279\u0274\3",
    "\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2\u027c",
    "\u0281\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u027f\7\21\2\2\u027f\u0280",
    "\79\2\2\u0280\u0282\5b\62\2\u0281\u027e\3\2\2\2\u0281\u0282\3\2\2\2",
    "\u0282U\3\2\2\2\u0283\u0284\7\22\2\2\u0284\u0285\5d\63\2\u0285\u0286",
    "\79\2\2\u0286\u028a\5b\62\2\u0287\u0288\7\21\2\2\u0288\u0289\79\2\2",
    "\u0289\u028b\5b\62\2\u028a\u0287\3\2\2\2\u028a\u028b\3\2\2\2\u028bW",
    "\3\2\2\2\u028c\u028d\7\23\2\2\u028d\u028e\5\u0096L\2\u028e\u028f\7\24",
    "\2\2\u028f\u0290\5\u0098M\2\u0290\u0291\79\2\2\u0291\u0295\5b\62\2\u0292",
    "\u0293\7\21\2\2\u0293\u0294\79\2\2\u0294\u0296\5b\62\2\u0295\u0292\3",
    "\2\2\2\u0295\u0296\3\2\2\2\u0296Y\3\2\2\2\u0297\u0298\7\25\2\2\u0298",
    "\u0299\79\2\2\u0299\u02af\5b\62\2\u029a\u029b\5`\61\2\u029b\u029c\7",
    "9\2\2\u029c\u029d\5b\62\2\u029d\u029f\3\2\2\2\u029e\u029a\3\2\2\2\u029f",
    "\u02a0\3\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1\u02a5\3",
    "\2\2\2\u02a2\u02a3\7\21\2\2\u02a3\u02a4\79\2\2\u02a4\u02a6\5b\62\2\u02a5",
    "\u02a2\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02aa\3\2\2\2\u02a7\u02a8\7",
    "\26\2\2\u02a8\u02a9\79\2\2\u02a9\u02ab\5b\62\2\u02aa\u02a7\3\2\2\2\u02aa",
    "\u02ab\3\2\2\2\u02ab\u02b0\3\2\2\2\u02ac\u02ad\7\26\2\2\u02ad\u02ae",
    "\79\2\2\u02ae\u02b0\5b\62\2\u02af\u029e\3\2\2\2\u02af\u02ac\3\2\2\2",
    "\u02b0[\3\2\2\2\u02b1\u02b2\7\27\2\2\u02b2\u02b7\5^\60\2\u02b3\u02b4",
    "\78\2\2\u02b4\u02b6\5^\60\2\u02b5\u02b3\3\2\2\2\u02b6\u02b9\3\2\2\2",
    "\u02b7\u02b5\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2\u02b9\u02b7",
    "\3\2\2\2\u02ba\u02bb\79\2\2\u02bb\u02bc\5b\62\2\u02bc]\3\2\2\2\u02bd",
    "\u02c0\5d\63\2\u02be\u02bf\7\13\2\2\u02bf\u02c1\5x=\2\u02c0\u02be\3",
    "\2\2\2\u02c0\u02c1\3\2\2\2\u02c1_\3\2\2\2\u02c2\u02c8\7\30\2\2\u02c3",
    "\u02c6\5d\63\2\u02c4\u02c5\7\13\2\2\u02c5\u02c7\7*\2\2\u02c6\u02c4\3",
    "\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02c9\3\2\2\2\u02c8\u02c3\3\2\2\2\u02c8",
    "\u02c9\3\2\2\2\u02c9a\3\2\2\2\u02ca\u02d5\5\36\20\2\u02cb\u02cc\7)\2",
    "\2\u02cc\u02ce\7d\2\2\u02cd\u02cf\5\34\17\2\u02ce\u02cd\3\2\2\2\u02cf",
    "\u02d0\3\2\2\2\u02d0\u02ce\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3",
    "\2\2\2\u02d2\u02d3\7e\2\2\u02d3\u02d5\3\2\2\2\u02d4\u02ca\3\2\2\2\u02d4",
    "\u02cb\3\2\2\2\u02d5c\3\2\2\2\u02d6\u02dc\5l\67\2\u02d7\u02d8\7\17\2",
    "\2\u02d8\u02d9\5l\67\2\u02d9\u02da\7\21\2\2\u02da\u02db\5d\63\2\u02db",
    "\u02dd\3\2\2\2\u02dc\u02d7\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02e0\3",
    "\2\2\2\u02de\u02e0\5h\65\2\u02df\u02d6\3\2\2\2\u02df\u02de\3\2\2\2\u02e0",
    "e\3\2\2\2\u02e1\u02e4\5l\67\2\u02e2\u02e4\5j\66\2\u02e3\u02e1\3\2\2",
    "\2\u02e3\u02e2\3\2\2\2\u02e4g\3\2\2\2\u02e5\u02e7\7\31\2\2\u02e6\u02e8",
    "\5\30\r\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\3\2\2",
    "\2\u02e9\u02ea\79\2\2\u02ea\u02eb\5d\63\2\u02ebi\3\2\2\2\u02ec\u02ee",
    "\7\31\2\2\u02ed\u02ef\5\30\r\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2",
    "\2\u02ef\u02f0\3\2\2\2\u02f0\u02f1\79\2\2\u02f1\u02f2\5f\64\2\u02f2",
    "k\3\2\2\2\u02f3\u02f8\5n8\2\u02f4\u02f5\7\32\2\2\u02f5\u02f7\5n8\2\u02f6",
    "\u02f4\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3",
    "\2\2\2\u02f9m\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fb\u0300\5p9\2\u02fc\u02fd",
    "\7\33\2\2\u02fd\u02ff\5p9\2\u02fe\u02fc\3\2\2\2\u02ff\u0302\3\2\2\2",
    "\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301o\3\2\2\2\u0302\u0300",
    "\3\2\2\2\u0303\u0304\7\34\2\2\u0304\u0307\5p9\2\u0305\u0307\5r:\2\u0306",
    "\u0303\3\2\2\2\u0306\u0305\3\2\2\2\u0307q\3\2\2\2\u0308\u030e\5x=\2",
    "\u0309\u030a\5t;\2\u030a\u030b\5x=\2\u030b\u030d\3\2\2\2\u030c\u0309",
    "\3\2\2\2\u030d\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2",
    "\u030fs\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u031f\7L\2\2\u0312\u031f\7",
    "M\2\2\u0313\u031f\7N\2\2\u0314\u031f\7O\2\2\u0315\u031f\7P\2\2\u0316",
    "\u031f\7Q\2\2\u0317\u031f\7R\2\2\u0318\u031f\7\24\2\2\u0319\u031a\7",
    "\34\2\2\u031a\u031f\7\24\2\2\u031b\u031f\7\35\2\2\u031c\u031d\7\35\2",
    "\2\u031d\u031f\7\34\2\2\u031e\u0311\3\2\2\2\u031e\u0312\3\2\2\2\u031e",
    "\u0313\3\2\2\2\u031e\u0314\3\2\2\2\u031e\u0315\3\2\2\2\u031e\u0316\3",
    "\2\2\2\u031e\u0317\3\2\2\2\u031e\u0318\3\2\2\2\u031e\u0319\3\2\2\2\u031e",
    "\u031b\3\2\2\2\u031e\u031c\3\2\2\2\u031fu\3\2\2\2\u0320\u0321\7\65\2",
    "\2\u0321\u0322\5x=\2\u0322w\3\2\2\2\u0323\u0328\5z>\2\u0324\u0325\7",
    "?\2\2\u0325\u0327\5z>\2\u0326\u0324\3\2\2\2\u0327\u032a\3\2\2\2\u0328",
    "\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329y\3\2\2\2\u032a\u0328\3\2\2",
    "\2\u032b\u0330\5|?\2\u032c\u032d\7@\2\2\u032d\u032f\5|?\2\u032e\u032c",
    "\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e\3\2\2\2\u0330\u0331\3\2\2\2",
    "\u0331{\3\2\2\2\u0332\u0330\3\2\2\2\u0333\u0338\5~@\2\u0334\u0335\7",
    "A\2\2\u0335\u0337\5~@\2\u0336\u0334\3\2\2\2\u0337\u033a\3\2\2\2\u0338",
    "\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339}\3\2\2\2\u033a\u0338\3\2\2",
    "\2\u033b\u0340\5\u0080A\2\u033c\u033d\t\4\2\2\u033d\u033f\5\u0080A\2",
    "\u033e\u033c\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341",
    "\3\2\2\2\u0341\177\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0348\5\u0082B",
    "\2\u0344\u0345\t\5\2\2\u0345\u0347\5\u0082B\2\u0346\u0344\3\2\2\2\u0347",
    "\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u0081\3",
    "\2\2\2\u034a\u0348\3\2\2\2\u034b\u0350\5\u0084C\2\u034c\u034d\t\6\2",
    "\2\u034d\u034f\5\u0084C\2\u034e\u034c\3\2\2\2\u034f\u0352\3\2\2\2\u0350",
    "\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0083\3\2\2\2\u0352\u0350\3",
    "\2\2\2\u0353\u0354\t\7\2\2\u0354\u0357\5\u0084C\2\u0355\u0357\5\u0086",
    "D\2\u0356\u0353\3\2\2\2\u0356\u0355\3\2\2\2\u0357\u0085\3\2\2\2\u0358",
    "\u035b\5\u0088E\2\u0359\u035a\7;\2\2\u035a\u035c\5\u0084C\2\u035b\u0359",
    "\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0087\3\2\2\2\u035d\u035f\7(\2\2",
    "\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0364",
    "\5\u008aF\2\u0361\u0363\5\u008eH\2\u0362\u0361\3\2\2\2\u0363\u0366\3",
    "\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0089\3\2\2\2\u0366",
    "\u0364\3\2\2\2\u0367\u036a\7\66\2\2\u0368\u036b\5\u00aaV\2\u0369\u036b",
    "\5\u008cG\2\u036a\u0368\3\2\2\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2",
    "\2\2\u036b\u036c\3\2\2\2\u036c\u0383\7\67\2\2\u036d\u036f\7=\2\2\u036e",
    "\u0370\5\u008cG\2\u036f\u036e\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0371",
    "\3\2\2\2\u0371\u0383\7>\2\2\u0372\u0374\7J\2\2\u0373\u0375\5\u009aN",
    "\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376",
    "\u0383\7K\2\2\u0377\u0383\7*\2\2\u0378\u0383\7\4\2\2\u0379\u037b\7\3",
    "\2\2\u037a\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037a\3\2\2\2\u037c",
    "\u037d\3\2\2\2\u037d\u0383\3\2\2\2\u037e\u0383\7\64\2\2\u037f\u0383",
    "\7\36\2\2\u0380\u0383\7\37\2\2\u0381\u0383\7 \2\2\u0382\u0367\3\2\2",
    "\2\u0382\u036d\3\2\2\2\u0382\u0372\3\2\2\2\u0382\u0377\3\2\2\2\u0382",
    "\u0378\3\2\2\2\u0382\u037a\3\2\2\2\u0382\u037e\3\2\2\2\u0382\u037f\3",
    "\2\2\2\u0382\u0380\3\2\2\2\u0382\u0381\3\2\2\2\u0383\u008b\3\2\2\2\u0384",
    "\u0387\5d\63\2\u0385\u0387\5v<\2\u0386\u0384\3\2\2\2\u0386\u0385\3\2",
    "\2\2\u0387\u0396\3\2\2\2\u0388\u0397\5\u00a4S\2\u0389\u038c\78\2\2\u038a",
    "\u038d\5d\63\2\u038b\u038d\5v<\2\u038c\u038a\3\2\2\2\u038c\u038b\3\2",
    "\2\2\u038d\u038f\3\2\2\2\u038e\u0389\3\2\2\2\u038f\u0392\3\2\2\2\u0390",
    "\u038e\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3",
    "\2\2\2\u0393\u0395\78\2\2\u0394\u0393\3\2\2\2\u0394\u0395\3\2\2\2\u0395",
    "\u0397\3\2\2\2\u0396\u0388\3\2\2\2\u0396\u0390\3\2\2\2\u0397\u008d\3",
    "\2\2\2\u0398\u039a\7\66\2\2\u0399\u039b\5\u009eP\2\u039a\u0399\3\2\2",
    "\2\u039a\u039b\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u03a4\7\67\2\2\u039d",
    "\u039e\7=\2\2\u039e\u039f\5\u0090I\2\u039f\u03a0\7>\2\2\u03a0\u03a4",
    "\3\2\2\2\u03a1\u03a2\7\63\2\2\u03a2\u03a4\7*\2\2\u03a3\u0398\3\2\2\2",
    "\u03a3\u039d\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u008f\3\2\2\2\u03a5\u03aa",
    "\5\u0092J\2\u03a6\u03a7\78\2\2\u03a7\u03a9\5\u0092J\2\u03a8\u03a6\3",
    "\2\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab",
    "\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ad\u03af\78\2\2\u03ae\u03ad\3",
    "\2\2\2\u03ae\u03af\3\2\2\2\u03af\u0091\3\2\2\2\u03b0\u03bc\5d\63\2\u03b1",
    "\u03b3\5d\63\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3",
    "\2\2\2\u03b4\u03b6\79\2\2\u03b5\u03b7\5d\63\2\u03b6\u03b5\3\2\2\2\u03b6",
    "\u03b7\3\2\2\2\u03b7\u03b9\3\2\2\2\u03b8\u03ba\5\u0094K\2\u03b9\u03b8",
    "\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bc\3\2\2\2\u03bb\u03b0\3\2\2\2",
    "\u03bb\u03b2\3\2\2\2\u03bc\u0093\3\2\2\2\u03bd\u03bf\79\2\2\u03be\u03c0",
    "\5d\63\2\u03bf\u03be\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u0095\3\2\2\2",
    "\u03c1\u03c4\5x=\2\u03c2\u03c4\5v<\2\u03c3\u03c1\3\2\2\2\u03c3\u03c2",
    "\3\2\2\2\u03c4\u03cc\3\2\2\2\u03c5\u03c8\78\2\2\u03c6\u03c9\5x=\2\u03c7",
    "\u03c9\5v<\2\u03c8\u03c6\3\2\2\2\u03c8\u03c7\3\2\2\2\u03c9\u03cb\3\2",
    "\2\2\u03ca\u03c5\3\2\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc",
    "\u03cd\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d1\7",
    "8\2\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u0097\3\2\2\2\u03d2",
    "\u03d7\5d\63\2\u03d3\u03d4\78\2\2\u03d4\u03d6\5d\63\2\u03d5\u03d3\3",
    "\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8",
    "\u03db\3\2\2\2\u03d9\u03d7\3\2\2\2\u03da\u03dc\78\2\2\u03db\u03da\3",
    "\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u0099\3\2\2\2\u03dd\u03de\5d\63\2\u03de",
    "\u03df\79\2\2\u03df\u03e0\5d\63\2\u03e0\u03e4\3\2\2\2\u03e1\u03e2\7",
    ";\2\2\u03e2\u03e4\5x=\2\u03e3\u03dd\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4",
    "\u03f7\3\2\2\2\u03e5\u03f8\5\u00a4S\2\u03e6\u03ed\78\2\2\u03e7\u03e8",
    "\5d\63\2\u03e8\u03e9\79\2\2\u03e9\u03ea\5d\63\2\u03ea\u03ee\3\2\2\2",
    "\u03eb\u03ec\7;\2\2\u03ec\u03ee\5x=\2\u03ed\u03e7\3\2\2\2\u03ed\u03eb",
    "\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03e6\3\2\2\2\u03f0\u03f3\3\2\2\2",
    "\u03f1\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3\u03f1",
    "\3\2\2\2\u03f4\u03f6\78\2\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2",
    "\u03f6\u03f8\3\2\2\2\u03f7\u03e5\3\2\2\2\u03f7\u03f1\3\2\2\2\u03f8\u040e",
    "\3\2\2\2\u03f9\u03fc\5d\63\2\u03fa\u03fc\5v<\2\u03fb\u03f9\3\2\2\2\u03fb",
    "\u03fa\3\2\2\2\u03fc\u040b\3\2\2\2\u03fd\u040c\5\u00a4S\2\u03fe\u0401",
    "\78\2\2\u03ff\u0402\5d\63\2\u0400\u0402\5v<\2\u0401\u03ff\3\2\2\2\u0401",
    "\u0400\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u03fe\3\2\2\2\u0404\u0407\3",
    "\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0409\3\2\2\2\u0407",
    "\u0405\3\2\2\2\u0408\u040a\78\2\2\u0409\u0408\3\2\2\2\u0409\u040a\3",
    "\2\2\2\u040a\u040c\3\2\2\2\u040b\u03fd\3\2\2\2\u040b\u0405\3\2\2\2\u040c",
    "\u040e\3\2\2\2\u040d\u03e3\3\2\2\2\u040d\u03fb\3\2\2\2\u040e\u009b\3",
    "\2\2\2\u040f\u0410\7!\2\2\u0410\u0416\7*\2\2\u0411\u0413\7\66\2\2\u0412",
    "\u0414\5\u009eP\2\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415",
    "\3\2\2\2\u0415\u0417\7\67\2\2\u0416\u0411\3\2\2\2\u0416\u0417\3\2\2",
    "\2\u0417\u0418\3\2\2\2\u0418\u0419\79\2\2\u0419\u041a\5b\62\2\u041a",
    "\u009d\3\2\2\2\u041b\u0420\5\u00a0Q\2\u041c\u041d\78\2\2\u041d\u041f",
    "\5\u00a0Q\2\u041e\u041c\3\2\2\2\u041f\u0422\3\2\2\2\u0420\u041e\3\2",
    "\2\2\u0420\u0421\3\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0423",
    "\u0425\78\2\2\u0424\u0423\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u009f\3",
    "\2\2\2\u0426\u0428\5d\63\2\u0427\u0429\5\u00a4S\2\u0428\u0427\3\2\2",
    "\2\u0428\u0429\3\2\2\2\u0429\u0433\3\2\2\2\u042a\u042b\5d\63\2\u042b",
    "\u042c\7<\2\2\u042c\u042d\5d\63\2\u042d\u0433\3\2\2\2\u042e\u042f\7",
    ";\2\2\u042f\u0433\5d\63\2\u0430\u0431\7\65\2\2\u0431\u0433\5d\63\2\u0432",
    "\u0426\3\2\2\2\u0432\u042a\3\2\2\2\u0432\u042e\3\2\2\2\u0432\u0430\3",
    "\2\2\2\u0433\u00a1\3\2\2\2\u0434\u0437\5\u00a4S\2\u0435\u0437\5\u00a6",
    "T\2\u0436\u0434\3\2\2\2\u0436\u0435\3\2\2\2\u0437\u00a3\3\2\2\2\u0438",
    "\u043a\7\'\2\2\u0439\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\3",
    "\2\2\2\u043b\u043c\7\23\2\2\u043c\u043d\5\u0096L\2\u043d\u043e\7\24",
    "\2\2\u043e\u0440\5l\67\2\u043f\u0441\5\u00a2R\2\u0440\u043f\3\2\2\2",
    "\u0440\u0441\3\2\2\2\u0441\u00a5\3\2\2\2\u0442\u0443\7\17\2\2\u0443",
    "\u0445\5f\64\2\u0444\u0446\5\u00a2R\2\u0445\u0444\3\2\2\2\u0445\u0446",
    "\3\2\2\2\u0446\u00a7\3\2\2\2\u0447\u0448\7*\2\2\u0448\u00a9\3\2\2\2",
    "\u0449\u044b\7\"\2\2\u044a\u044c\5\u00acW\2\u044b\u044a\3\2\2\2\u044b",
    "\u044c\3\2\2\2\u044c\u00ab\3\2\2\2\u044d\u044e\7\t\2\2\u044e\u0451\5",
    "d\63\2\u044f\u0451\5\u0098M\2\u0450\u044d\3\2\2\2\u0450\u044f\3\2\2",
    "\2\u0451\u00ad\3\2\2\2\u00a8\u00b3\u00b7\u00b9\u00c2\u00cb\u00ce\u00d5",
    "\u00db\u00e5\u00ed\u00f4\u00fa\u00fe\u0104\u010a\u010e\u0115\u0117\u0119",
    "\u011e\u0120\u0122\u0126\u012c\u0130\u0137\u0139\u013b\u0140\u0142\u0147",
    "\u014c\u0152\u0156\u015c\u0162\u0166\u016d\u016f\u0171\u0176\u0178\u017a",
    "\u017e\u0184\u0188\u018f\u0191\u0193\u0198\u019a\u01a0\u01a7\u01ab\u01b7",
    "\u01be\u01c3\u01c7\u01ca\u01d0\u01d4\u01d9\u01dd\u01e1\u01ef\u01f7\u01ff",
    "\u0201\u0205\u020e\u0215\u0217\u0220\u0225\u022a\u0231\u0235\u023c\u0244",
    "\u024d\u0256\u025d\u0268\u026e\u027b\u0281\u028a\u0295\u02a0\u02a5\u02aa",
    "\u02af\u02b7\u02c0\u02c6\u02c8\u02d0\u02d4\u02dc\u02df\u02e3\u02e7\u02ee",
    "\u02f8\u0300\u0306\u030e\u031e\u0328\u0330\u0338\u0340\u0348\u0350\u0356",
    "\u035b\u035e\u0364\u036a\u036f\u0374\u037c\u0382\u0386\u038c\u0390\u0394",
    "\u0396\u039a\u03a3\u03aa\u03ae\u03b2\u03b6\u03b9\u03bb\u03bf\u03c3\u03c8",
    "\u03cc\u03d0\u03d7\u03db\u03e3\u03ed\u03f1\u03f5\u03f7\u03fb\u0401\u0405",
    "\u0409\u040b\u040d\u0413\u0416\u0420\u0424\u0428\u0432\u0436\u0439\u0440",
    "\u0445\u044b\u0450"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', 'null', "'def'", "'return'", 
                     "'raise'", "'from'", "'import'", "'as'", "'global'", 
                     "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", 
                     "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", 
                     "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", 
                     "'None'", "'True'", "'False'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', "'.'", "'...'", 
                     "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", 
                     "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//='" ];

var symbolicNames = [ 'null', "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", 
                      "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", 
                      "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                      "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", 
                      "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
                      "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", 
                      "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                      "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                      "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", 
                      "INDENT", "DEDENT" ];

var ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg" ];

function PythonParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PythonParser.prototype = Object.create(antlr4.Parser.prototype);
PythonParser.prototype.constructor = PythonParser;

Object.defineProperty(PythonParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PythonParser.EOF = antlr4.Token.EOF;
PythonParser.STRING = 1;
PythonParser.NUMBER = 2;
PythonParser.INTEGER = 3;
PythonParser.DEF = 4;
PythonParser.RETURN = 5;
PythonParser.RAISE = 6;
PythonParser.FROM = 7;
PythonParser.IMPORT = 8;
PythonParser.AS = 9;
PythonParser.GLOBAL = 10;
PythonParser.NONLOCAL = 11;
PythonParser.ASSERT = 12;
PythonParser.IF = 13;
PythonParser.ELIF = 14;
PythonParser.ELSE = 15;
PythonParser.WHILE = 16;
PythonParser.FOR = 17;
PythonParser.IN = 18;
PythonParser.TRY = 19;
PythonParser.FINALLY = 20;
PythonParser.WITH = 21;
PythonParser.EXCEPT = 22;
PythonParser.LAMBDA = 23;
PythonParser.OR = 24;
PythonParser.AND = 25;
PythonParser.NOT = 26;
PythonParser.IS = 27;
PythonParser.NONE = 28;
PythonParser.TRUE = 29;
PythonParser.FALSE = 30;
PythonParser.CLASS = 31;
PythonParser.YIELD = 32;
PythonParser.DEL = 33;
PythonParser.PASS = 34;
PythonParser.CONTINUE = 35;
PythonParser.BREAK = 36;
PythonParser.ASYNC = 37;
PythonParser.AWAIT = 38;
PythonParser.NEWLINE = 39;
PythonParser.NAME = 40;
PythonParser.STRING_LITERAL = 41;
PythonParser.BYTES_LITERAL = 42;
PythonParser.DECIMAL_INTEGER = 43;
PythonParser.OCT_INTEGER = 44;
PythonParser.HEX_INTEGER = 45;
PythonParser.BIN_INTEGER = 46;
PythonParser.FLOAT_NUMBER = 47;
PythonParser.IMAG_NUMBER = 48;
PythonParser.DOT = 49;
PythonParser.ELLIPSIS = 50;
PythonParser.STAR = 51;
PythonParser.OPEN_PAREN = 52;
PythonParser.CLOSE_PAREN = 53;
PythonParser.COMMA = 54;
PythonParser.COLON = 55;
PythonParser.SEMI_COLON = 56;
PythonParser.POWER = 57;
PythonParser.ASSIGN = 58;
PythonParser.OPEN_BRACK = 59;
PythonParser.CLOSE_BRACK = 60;
PythonParser.OR_OP = 61;
PythonParser.XOR = 62;
PythonParser.AND_OP = 63;
PythonParser.LEFT_SHIFT = 64;
PythonParser.RIGHT_SHIFT = 65;
PythonParser.ADD = 66;
PythonParser.MINUS = 67;
PythonParser.DIV = 68;
PythonParser.MOD = 69;
PythonParser.IDIV = 70;
PythonParser.NOT_OP = 71;
PythonParser.OPEN_BRACE = 72;
PythonParser.CLOSE_BRACE = 73;
PythonParser.LESS_THAN = 74;
PythonParser.GREATER_THAN = 75;
PythonParser.EQUALS = 76;
PythonParser.GT_EQ = 77;
PythonParser.LT_EQ = 78;
PythonParser.NOT_EQ_1 = 79;
PythonParser.NOT_EQ_2 = 80;
PythonParser.AT = 81;
PythonParser.ARROW = 82;
PythonParser.ADD_ASSIGN = 83;
PythonParser.SUB_ASSIGN = 84;
PythonParser.MULT_ASSIGN = 85;
PythonParser.AT_ASSIGN = 86;
PythonParser.DIV_ASSIGN = 87;
PythonParser.MOD_ASSIGN = 88;
PythonParser.AND_ASSIGN = 89;
PythonParser.OR_ASSIGN = 90;
PythonParser.XOR_ASSIGN = 91;
PythonParser.LEFT_SHIFT_ASSIGN = 92;
PythonParser.RIGHT_SHIFT_ASSIGN = 93;
PythonParser.POWER_ASSIGN = 94;
PythonParser.IDIV_ASSIGN = 95;
PythonParser.SKIP_ = 96;
PythonParser.UNKNOWN_CHAR = 97;
PythonParser.INDENT = 98;
PythonParser.DEDENT = 99;

PythonParser.RULE_single_input = 0;
PythonParser.RULE_file_input = 1;
PythonParser.RULE_eval_input = 2;
PythonParser.RULE_decorator = 3;
PythonParser.RULE_decorators = 4;
PythonParser.RULE_decorated = 5;
PythonParser.RULE_async_funcdef = 6;
PythonParser.RULE_funcdef = 7;
PythonParser.RULE_parameters = 8;
PythonParser.RULE_typedargslist = 9;
PythonParser.RULE_tfpdef = 10;
PythonParser.RULE_varargslist = 11;
PythonParser.RULE_vfpdef = 12;
PythonParser.RULE_stmt = 13;
PythonParser.RULE_simple_stmt = 14;
PythonParser.RULE_small_stmt = 15;
PythonParser.RULE_expr_stmt = 16;
PythonParser.RULE_annassign = 17;
PythonParser.RULE_testlist_star_expr = 18;
PythonParser.RULE_augassign = 19;
PythonParser.RULE_del_stmt = 20;
PythonParser.RULE_pass_stmt = 21;
PythonParser.RULE_flow_stmt = 22;
PythonParser.RULE_break_stmt = 23;
PythonParser.RULE_continue_stmt = 24;
PythonParser.RULE_return_stmt = 25;
PythonParser.RULE_yield_stmt = 26;
PythonParser.RULE_raise_stmt = 27;
PythonParser.RULE_import_stmt = 28;
PythonParser.RULE_import_name = 29;
PythonParser.RULE_import_from = 30;
PythonParser.RULE_import_as_name = 31;
PythonParser.RULE_dotted_as_name = 32;
PythonParser.RULE_import_as_names = 33;
PythonParser.RULE_dotted_as_names = 34;
PythonParser.RULE_dotted_name = 35;
PythonParser.RULE_global_stmt = 36;
PythonParser.RULE_nonlocal_stmt = 37;
PythonParser.RULE_assert_stmt = 38;
PythonParser.RULE_compound_stmt = 39;
PythonParser.RULE_async_stmt = 40;
PythonParser.RULE_if_stmt = 41;
PythonParser.RULE_while_stmt = 42;
PythonParser.RULE_for_stmt = 43;
PythonParser.RULE_try_stmt = 44;
PythonParser.RULE_with_stmt = 45;
PythonParser.RULE_with_item = 46;
PythonParser.RULE_except_clause = 47;
PythonParser.RULE_suite = 48;
PythonParser.RULE_test = 49;
PythonParser.RULE_test_nocond = 50;
PythonParser.RULE_lambdef = 51;
PythonParser.RULE_lambdef_nocond = 52;
PythonParser.RULE_or_test = 53;
PythonParser.RULE_and_test = 54;
PythonParser.RULE_not_test = 55;
PythonParser.RULE_comparison = 56;
PythonParser.RULE_comp_op = 57;
PythonParser.RULE_star_expr = 58;
PythonParser.RULE_expr = 59;
PythonParser.RULE_xor_expr = 60;
PythonParser.RULE_and_expr = 61;
PythonParser.RULE_shift_expr = 62;
PythonParser.RULE_arith_expr = 63;
PythonParser.RULE_term = 64;
PythonParser.RULE_factor = 65;
PythonParser.RULE_power = 66;
PythonParser.RULE_atom_expr = 67;
PythonParser.RULE_atom = 68;
PythonParser.RULE_testlist_comp = 69;
PythonParser.RULE_trailer = 70;
PythonParser.RULE_subscriptlist = 71;
PythonParser.RULE_subscript = 72;
PythonParser.RULE_sliceop = 73;
PythonParser.RULE_exprlist = 74;
PythonParser.RULE_testlist = 75;
PythonParser.RULE_dictorsetmaker = 76;
PythonParser.RULE_classdef = 77;
PythonParser.RULE_arglist = 78;
PythonParser.RULE_argument = 79;
PythonParser.RULE_comp_iter = 80;
PythonParser.RULE_comp_for = 81;
PythonParser.RULE_comp_if = 82;
PythonParser.RULE_encoding_decl = 83;
PythonParser.RULE_yield_expr = 84;
PythonParser.RULE_yield_arg = 85;

function Single_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_single_input;
    return this;
}

Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;

Single_inputContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

Single_inputContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

Single_inputContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

Single_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSingle_input(this);
	}
};

Single_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSingle_input(this);
	}
};

Single_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSingle_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Single_inputContext = Single_inputContext;

PythonParser.prototype.single_input = function() {

    var localctx = new Single_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PythonParser.RULE_single_input);
    try {
        this.state = 177;
        switch(this._input.LA(1)) {
        case PythonParser.NEWLINE:
            this.enterOuterAlt(localctx, 1);
            this.state = 172;
            this.match(PythonParser.NEWLINE);
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 173;
            this.simple_stmt();
            break;
        case PythonParser.DEF:
        case PythonParser.IF:
        case PythonParser.WHILE:
        case PythonParser.FOR:
        case PythonParser.TRY:
        case PythonParser.WITH:
        case PythonParser.CLASS:
        case PythonParser.ASYNC:
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 3);
            this.state = 174;
            this.compound_stmt();
            this.state = 175;
            this.match(PythonParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_file_input;
    return this;
}

File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;

File_inputContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

File_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NEWLINE);
    } else {
        return this.getToken(PythonParser.NEWLINE, i);
    }
};


File_inputContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

File_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFile_input(this);
	}
};

File_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFile_input(this);
	}
};

File_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFile_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.File_inputContext = File_inputContext;

PythonParser.prototype.file_input = function() {

    var localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PythonParser.RULE_file_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.DEF) | (1 << PythonParser.RETURN) | (1 << PythonParser.RAISE) | (1 << PythonParser.FROM) | (1 << PythonParser.IMPORT) | (1 << PythonParser.GLOBAL) | (1 << PythonParser.NONLOCAL) | (1 << PythonParser.ASSERT) | (1 << PythonParser.IF) | (1 << PythonParser.WHILE) | (1 << PythonParser.FOR) | (1 << PythonParser.TRY) | (1 << PythonParser.WITH) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE) | (1 << PythonParser.CLASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PythonParser.YIELD - 32)) | (1 << (PythonParser.DEL - 32)) | (1 << (PythonParser.PASS - 32)) | (1 << (PythonParser.CONTINUE - 32)) | (1 << (PythonParser.BREAK - 32)) | (1 << (PythonParser.ASYNC - 32)) | (1 << (PythonParser.AWAIT - 32)) | (1 << (PythonParser.NEWLINE - 32)) | (1 << (PythonParser.NAME - 32)) | (1 << (PythonParser.ELLIPSIS - 32)) | (1 << (PythonParser.STAR - 32)) | (1 << (PythonParser.OPEN_PAREN - 32)) | (1 << (PythonParser.OPEN_BRACK - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)) | (1 << (PythonParser.OPEN_BRACE - 66)) | (1 << (PythonParser.AT - 66)))) !== 0)) {
            this.state = 181;
            switch(this._input.LA(1)) {
            case PythonParser.NEWLINE:
                this.state = 179;
                this.match(PythonParser.NEWLINE);
                break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.DEF:
            case PythonParser.RETURN:
            case PythonParser.RAISE:
            case PythonParser.FROM:
            case PythonParser.IMPORT:
            case PythonParser.GLOBAL:
            case PythonParser.NONLOCAL:
            case PythonParser.ASSERT:
            case PythonParser.IF:
            case PythonParser.WHILE:
            case PythonParser.FOR:
            case PythonParser.TRY:
            case PythonParser.WITH:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.CLASS:
            case PythonParser.YIELD:
            case PythonParser.DEL:
            case PythonParser.PASS:
            case PythonParser.CONTINUE:
            case PythonParser.BREAK:
            case PythonParser.ASYNC:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.STAR:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
            case PythonParser.AT:
                this.state = 180;
                this.stmt();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 186;
        this.match(PythonParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Eval_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_eval_input;
    return this;
}

Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;

Eval_inputContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Eval_inputContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

Eval_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NEWLINE);
    } else {
        return this.getToken(PythonParser.NEWLINE, i);
    }
};


Eval_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterEval_input(this);
	}
};

Eval_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitEval_input(this);
	}
};

Eval_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitEval_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Eval_inputContext = Eval_inputContext;

PythonParser.prototype.eval_input = function() {

    var localctx = new Eval_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PythonParser.RULE_eval_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.testlist();
        this.state = 192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.NEWLINE) {
            this.state = 189;
            this.match(PythonParser.NEWLINE);
            this.state = 194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 195;
        this.match(PythonParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorator;
    return this;
}

DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;

DecoratorContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

DecoratorContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

DecoratorContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

DecoratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorator(this);
	}
};

DecoratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorator(this);
	}
};

DecoratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratorContext = DecoratorContext;

PythonParser.prototype.decorator = function() {

    var localctx = new DecoratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PythonParser.RULE_decorator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.match(PythonParser.AT);
        this.state = 198;
        this.dotted_name();
        this.state = 204;
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 199;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 201;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 200;
                this.arglist();
            }

            this.state = 203;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 206;
        this.match(PythonParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorators;
    return this;
}

DecoratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorsContext.prototype.constructor = DecoratorsContext;

DecoratorsContext.prototype.decorator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecoratorContext);
    } else {
        return this.getTypedRuleContext(DecoratorContext,i);
    }
};

DecoratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorators(this);
	}
};

DecoratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorators(this);
	}
};

DecoratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratorsContext = DecoratorsContext;

PythonParser.prototype.decorators = function() {

    var localctx = new DecoratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PythonParser.RULE_decorators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 208;
            this.decorator();
            this.state = 211; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PythonParser.AT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorated;
    return this;
}

DecoratedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratedContext.prototype.constructor = DecoratedContext;

DecoratedContext.prototype.decorators = function() {
    return this.getTypedRuleContext(DecoratorsContext,0);
};

DecoratedContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

DecoratedContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

DecoratedContext.prototype.async_funcdef = function() {
    return this.getTypedRuleContext(Async_funcdefContext,0);
};

DecoratedContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorated(this);
	}
};

DecoratedContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorated(this);
	}
};

DecoratedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratedContext = DecoratedContext;

PythonParser.prototype.decorated = function() {

    var localctx = new DecoratedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PythonParser.RULE_decorated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 213;
        this.decorators();
        this.state = 217;
        switch(this._input.LA(1)) {
        case PythonParser.CLASS:
            this.state = 214;
            this.classdef();
            break;
        case PythonParser.DEF:
            this.state = 215;
            this.funcdef();
            break;
        case PythonParser.ASYNC:
            this.state = 216;
            this.async_funcdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_funcdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_async_funcdef;
    return this;
}

Async_funcdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_funcdefContext.prototype.constructor = Async_funcdefContext;

Async_funcdefContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Async_funcdefContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_funcdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAsync_funcdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Async_funcdefContext = Async_funcdefContext;

PythonParser.prototype.async_funcdef = function() {

    var localctx = new Async_funcdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PythonParser.RULE_async_funcdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.match(PythonParser.ASYNC);
        this.state = 220;
        this.funcdef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_funcdef;
    return this;
}

FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;

FuncdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

FuncdefContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FuncdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

FuncdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

FuncdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFuncdef(this);
	}
};

FuncdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFuncdef(this);
	}
};

FuncdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFuncdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.FuncdefContext = FuncdefContext;

PythonParser.prototype.funcdef = function() {

    var localctx = new FuncdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PythonParser.RULE_funcdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(PythonParser.DEF);
        this.state = 223;
        this.match(PythonParser.NAME);
        this.state = 224;
        this.parameters();
        this.state = 227;
        _la = this._input.LA(1);
        if(_la===PythonParser.ARROW) {
            this.state = 225;
            this.match(PythonParser.ARROW);
            this.state = 226;
            this.test();
        }

        this.state = 229;
        this.match(PythonParser.COLON);
        this.state = 230;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.typedargslist = function() {
    return this.getTypedRuleContext(TypedargslistContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitParameters(this);
	}
};

ParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ParametersContext = ParametersContext;

PythonParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PythonParser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 233;
        this.match(PythonParser.OPEN_PAREN);
        this.state = 235;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 234;
            this.typedargslist();
        }

        this.state = 237;
        this.match(PythonParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_typedargslist;
    return this;
}

TypedargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedargslistContext.prototype.constructor = TypedargslistContext;

TypedargslistContext.prototype.tfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TfpdefContext);
    } else {
        return this.getTypedRuleContext(TfpdefContext,i);
    }
};

TypedargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TypedargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTypedargslist(this);
	}
};

TypedargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTypedargslist(this);
	}
};

TypedargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTypedargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TypedargslistContext = TypedargslistContext;

PythonParser.prototype.typedargslist = function() {

    var localctx = new TypedargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PythonParser.RULE_typedargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 320;
        switch(this._input.LA(1)) {
        case PythonParser.NAME:
            this.state = 239;
            this.tfpdef();
            this.state = 242;
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 240;
                this.match(PythonParser.ASSIGN);
                this.state = 241;
                this.test();
            }

            this.state = 252;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 244;
                    this.match(PythonParser.COMMA);
                    this.state = 245;
                    this.tfpdef();
                    this.state = 248;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 246;
                        this.match(PythonParser.ASSIGN);
                        this.state = 247;
                        this.test();
                    }
             
                }
                this.state = 254;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
            }

            this.state = 288;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 255;
                this.match(PythonParser.COMMA);
                this.state = 286;
                switch (this._input.LA(1)) {
                case PythonParser.STAR:
                	this.state = 256;
                	this.match(PythonParser.STAR);
                	this.state = 258;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.NAME) {
                	    this.state = 257;
                	    this.tfpdef();
                	}

                	this.state = 268;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 260;
                	        this.match(PythonParser.COMMA);
                	        this.state = 261;
                	        this.tfpdef();
                	        this.state = 264;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.ASSIGN) {
                	            this.state = 262;
                	            this.match(PythonParser.ASSIGN);
                	            this.state = 263;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 270;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
                	}

                	this.state = 279;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 271;
                	    this.match(PythonParser.COMMA);
                	    this.state = 277;
                	    _la = this._input.LA(1);
                	    if(_la===PythonParser.POWER) {
                	        this.state = 272;
                	        this.match(PythonParser.POWER);
                	        this.state = 273;
                	        this.tfpdef();
                	        this.state = 275;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.COMMA) {
                	            this.state = 274;
                	            this.match(PythonParser.COMMA);
                	        }

                	    }

                	}

                	break;
                case PythonParser.POWER:
                	this.state = 281;
                	this.match(PythonParser.POWER);
                	this.state = 282;
                	this.tfpdef();
                	this.state = 284;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 283;
                	    this.match(PythonParser.COMMA);
                	}

                	break;
                case PythonParser.CLOSE_PAREN:
                	break;
                default:
                	throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        case PythonParser.STAR:
            this.state = 290;
            this.match(PythonParser.STAR);
            this.state = 292;
            _la = this._input.LA(1);
            if(_la===PythonParser.NAME) {
                this.state = 291;
                this.tfpdef();
            }

            this.state = 302;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 294;
                    this.match(PythonParser.COMMA);
                    this.state = 295;
                    this.tfpdef();
                    this.state = 298;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 296;
                        this.match(PythonParser.ASSIGN);
                        this.state = 297;
                        this.test();
                    }
             
                }
                this.state = 304;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 313;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 305;
                this.match(PythonParser.COMMA);
                this.state = 311;
                _la = this._input.LA(1);
                if(_la===PythonParser.POWER) {
                    this.state = 306;
                    this.match(PythonParser.POWER);
                    this.state = 307;
                    this.tfpdef();
                    this.state = 309;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.COMMA) {
                        this.state = 308;
                        this.match(PythonParser.COMMA);
                    }

                }

            }

            break;
        case PythonParser.POWER:
            this.state = 315;
            this.match(PythonParser.POWER);
            this.state = 316;
            this.tfpdef();
            this.state = 318;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 317;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_tfpdef;
    return this;
}

TfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TfpdefContext.prototype.constructor = TfpdefContext;

TfpdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

TfpdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTfpdef(this);
	}
};

TfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTfpdef(this);
	}
};

TfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TfpdefContext = TfpdefContext;

PythonParser.prototype.tfpdef = function() {

    var localctx = new TfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PythonParser.RULE_tfpdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.match(PythonParser.NAME);
        this.state = 325;
        _la = this._input.LA(1);
        if(_la===PythonParser.COLON) {
            this.state = 323;
            this.match(PythonParser.COLON);
            this.state = 324;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_varargslist;
    return this;
}

VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;

VarargslistContext.prototype.vfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VfpdefContext);
    } else {
        return this.getTypedRuleContext(VfpdefContext,i);
    }
};

VarargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

VarargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterVarargslist(this);
	}
};

VarargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitVarargslist(this);
	}
};

VarargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitVarargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VarargslistContext = VarargslistContext;

PythonParser.prototype.varargslist = function() {

    var localctx = new VarargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PythonParser.RULE_varargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 408;
        switch(this._input.LA(1)) {
        case PythonParser.NAME:
            this.state = 327;
            this.vfpdef();
            this.state = 330;
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 328;
                this.match(PythonParser.ASSIGN);
                this.state = 329;
                this.test();
            }

            this.state = 340;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 332;
                    this.match(PythonParser.COMMA);
                    this.state = 333;
                    this.vfpdef();
                    this.state = 336;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 334;
                        this.match(PythonParser.ASSIGN);
                        this.state = 335;
                        this.test();
                    }
             
                }
                this.state = 342;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
            }

            this.state = 376;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 343;
                this.match(PythonParser.COMMA);
                this.state = 374;
                switch (this._input.LA(1)) {
                case PythonParser.STAR:
                	this.state = 344;
                	this.match(PythonParser.STAR);
                	this.state = 346;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.NAME) {
                	    this.state = 345;
                	    this.vfpdef();
                	}

                	this.state = 356;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 348;
                	        this.match(PythonParser.COMMA);
                	        this.state = 349;
                	        this.vfpdef();
                	        this.state = 352;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.ASSIGN) {
                	            this.state = 350;
                	            this.match(PythonParser.ASSIGN);
                	            this.state = 351;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 358;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
                	}

                	this.state = 367;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 359;
                	    this.match(PythonParser.COMMA);
                	    this.state = 365;
                	    _la = this._input.LA(1);
                	    if(_la===PythonParser.POWER) {
                	        this.state = 360;
                	        this.match(PythonParser.POWER);
                	        this.state = 361;
                	        this.vfpdef();
                	        this.state = 363;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.COMMA) {
                	            this.state = 362;
                	            this.match(PythonParser.COMMA);
                	        }

                	    }

                	}

                	break;
                case PythonParser.POWER:
                	this.state = 369;
                	this.match(PythonParser.POWER);
                	this.state = 370;
                	this.vfpdef();
                	this.state = 372;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 371;
                	    this.match(PythonParser.COMMA);
                	}

                	break;
                case PythonParser.COLON:
                	break;
                default:
                	throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        case PythonParser.STAR:
            this.state = 378;
            this.match(PythonParser.STAR);
            this.state = 380;
            _la = this._input.LA(1);
            if(_la===PythonParser.NAME) {
                this.state = 379;
                this.vfpdef();
            }

            this.state = 390;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 382;
                    this.match(PythonParser.COMMA);
                    this.state = 383;
                    this.vfpdef();
                    this.state = 386;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 384;
                        this.match(PythonParser.ASSIGN);
                        this.state = 385;
                        this.test();
                    }
             
                }
                this.state = 392;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
            }

            this.state = 401;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 393;
                this.match(PythonParser.COMMA);
                this.state = 399;
                _la = this._input.LA(1);
                if(_la===PythonParser.POWER) {
                    this.state = 394;
                    this.match(PythonParser.POWER);
                    this.state = 395;
                    this.vfpdef();
                    this.state = 397;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.COMMA) {
                        this.state = 396;
                        this.match(PythonParser.COMMA);
                    }

                }

            }

            break;
        case PythonParser.POWER:
            this.state = 403;
            this.match(PythonParser.POWER);
            this.state = 404;
            this.vfpdef();
            this.state = 406;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 405;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_vfpdef;
    return this;
}

VfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VfpdefContext.prototype.constructor = VfpdefContext;

VfpdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

VfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterVfpdef(this);
	}
};

VfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitVfpdef(this);
	}
};

VfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitVfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VfpdefContext = VfpdefContext;

PythonParser.prototype.vfpdef = function() {

    var localctx = new VfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PythonParser.RULE_vfpdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 410;
        this.match(PythonParser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

StmtContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.StmtContext = StmtContext;

PythonParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PythonParser.RULE_stmt);
    try {
        this.state = 414;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 412;
            this.simple_stmt();
            break;
        case PythonParser.DEF:
        case PythonParser.IF:
        case PythonParser.WHILE:
        case PythonParser.FOR:
        case PythonParser.TRY:
        case PythonParser.WITH:
        case PythonParser.CLASS:
        case PythonParser.ASYNC:
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 413;
            this.compound_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_simple_stmt;
    return this;
}

Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;

Simple_stmtContext.prototype.small_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Small_stmtContext);
    } else {
        return this.getTypedRuleContext(Small_stmtContext,i);
    }
};

Simple_stmtContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

Simple_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSimple_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Simple_stmtContext = Simple_stmtContext;

PythonParser.prototype.simple_stmt = function() {

    var localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PythonParser.RULE_simple_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.small_stmt();
        this.state = 421;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 417;
                this.match(PythonParser.SEMI_COLON);
                this.state = 418;
                this.small_stmt(); 
            }
            this.state = 423;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

        this.state = 425;
        _la = this._input.LA(1);
        if(_la===PythonParser.SEMI_COLON) {
            this.state = 424;
            this.match(PythonParser.SEMI_COLON);
        }

        this.state = 427;
        this.match(PythonParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Small_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_small_stmt;
    return this;
}

Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;

Small_stmtContext.prototype.expr_stmt = function() {
    return this.getTypedRuleContext(Expr_stmtContext,0);
};

Small_stmtContext.prototype.del_stmt = function() {
    return this.getTypedRuleContext(Del_stmtContext,0);
};

Small_stmtContext.prototype.pass_stmt = function() {
    return this.getTypedRuleContext(Pass_stmtContext,0);
};

Small_stmtContext.prototype.flow_stmt = function() {
    return this.getTypedRuleContext(Flow_stmtContext,0);
};

Small_stmtContext.prototype.import_stmt = function() {
    return this.getTypedRuleContext(Import_stmtContext,0);
};

Small_stmtContext.prototype.global_stmt = function() {
    return this.getTypedRuleContext(Global_stmtContext,0);
};

Small_stmtContext.prototype.nonlocal_stmt = function() {
    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
};

Small_stmtContext.prototype.assert_stmt = function() {
    return this.getTypedRuleContext(Assert_stmtContext,0);
};

Small_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSmall_stmt(this);
	}
};

Small_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSmall_stmt(this);
	}
};

Small_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSmall_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Small_stmtContext = Small_stmtContext;

PythonParser.prototype.small_stmt = function() {

    var localctx = new Small_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PythonParser.RULE_small_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 429;
            this.expr_stmt();
            break;
        case PythonParser.DEL:
            this.state = 430;
            this.del_stmt();
            break;
        case PythonParser.PASS:
            this.state = 431;
            this.pass_stmt();
            break;
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.YIELD:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
            this.state = 432;
            this.flow_stmt();
            break;
        case PythonParser.FROM:
        case PythonParser.IMPORT:
            this.state = 433;
            this.import_stmt();
            break;
        case PythonParser.GLOBAL:
            this.state = 434;
            this.global_stmt();
            break;
        case PythonParser.NONLOCAL:
            this.state = 435;
            this.nonlocal_stmt();
            break;
        case PythonParser.ASSERT:
            this.state = 436;
            this.assert_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expr_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_expr_stmt;
    return this;
}

Expr_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;

Expr_stmtContext.prototype.testlist_star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Testlist_star_exprContext);
    } else {
        return this.getTypedRuleContext(Testlist_star_exprContext,i);
    }
};

Expr_stmtContext.prototype.annassign = function() {
    return this.getTypedRuleContext(AnnassignContext,0);
};

Expr_stmtContext.prototype.augassign = function() {
    return this.getTypedRuleContext(AugassignContext,0);
};

Expr_stmtContext.prototype.yield_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Yield_exprContext);
    } else {
        return this.getTypedRuleContext(Yield_exprContext,i);
    }
};

Expr_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Expr_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExpr_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Expr_stmtContext = Expr_stmtContext;

PythonParser.prototype.expr_stmt = function() {

    var localctx = new Expr_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PythonParser.RULE_expr_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.testlist_star_expr();
        this.state = 456;
        switch(this._input.LA(1)) {
        case PythonParser.COLON:
            this.state = 440;
            this.annassign();
            break;
        case PythonParser.ADD_ASSIGN:
        case PythonParser.SUB_ASSIGN:
        case PythonParser.MULT_ASSIGN:
        case PythonParser.AT_ASSIGN:
        case PythonParser.DIV_ASSIGN:
        case PythonParser.MOD_ASSIGN:
        case PythonParser.AND_ASSIGN:
        case PythonParser.OR_ASSIGN:
        case PythonParser.XOR_ASSIGN:
        case PythonParser.LEFT_SHIFT_ASSIGN:
        case PythonParser.RIGHT_SHIFT_ASSIGN:
        case PythonParser.POWER_ASSIGN:
        case PythonParser.IDIV_ASSIGN:
            this.state = 441;
            this.augassign();
            this.state = 444;
            switch(this._input.LA(1)) {
            case PythonParser.YIELD:
                this.state = 442;
                this.yield_expr();
                break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 443;
                this.testlist();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case PythonParser.NEWLINE:
        case PythonParser.SEMI_COLON:
        case PythonParser.ASSIGN:
            this.state = 453;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.ASSIGN) {
                this.state = 446;
                this.match(PythonParser.ASSIGN);
                this.state = 449;
                switch(this._input.LA(1)) {
                case PythonParser.YIELD:
                    this.state = 447;
                    this.yield_expr();
                    break;
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.LAMBDA:
                case PythonParser.NOT:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.STAR:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 448;
                    this.testlist_star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 455;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_annassign;
    return this;
}

AnnassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnassignContext.prototype.constructor = AnnassignContext;

AnnassignContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

AnnassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnnassign(this);
	}
};

AnnassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnnassign(this);
	}
};

AnnassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnnassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AnnassignContext = AnnassignContext;

PythonParser.prototype.annassign = function() {

    var localctx = new AnnassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PythonParser.RULE_annassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 458;
        this.match(PythonParser.COLON);
        this.state = 459;
        this.test();
        this.state = 462;
        _la = this._input.LA(1);
        if(_la===PythonParser.ASSIGN) {
            this.state = 460;
            this.match(PythonParser.ASSIGN);
            this.state = 461;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_star_expr;
    return this;
}

Testlist_star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_star_exprContext.prototype.constructor = Testlist_star_exprContext;

Testlist_star_exprContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_star_exprContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist_star_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_star_exprContext = Testlist_star_exprContext;

PythonParser.prototype.testlist_star_expr = function() {

    var localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PythonParser.RULE_testlist_star_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 466;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 464;
            this.test();
            break;
        case PythonParser.STAR:
            this.state = 465;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 468;
                this.match(PythonParser.COMMA);
                this.state = 471;
                switch(this._input.LA(1)) {
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.LAMBDA:
                case PythonParser.NOT:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 469;
                    this.test();
                    break;
                case PythonParser.STAR:
                    this.state = 470;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 479;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 478;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AugassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_augassign;
    return this;
}

AugassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AugassignContext.prototype.constructor = AugassignContext;


AugassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAugassign(this);
	}
};

AugassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAugassign(this);
	}
};

AugassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAugassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AugassignContext = AugassignContext;

PythonParser.prototype.augassign = function() {

    var localctx = new AugassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PythonParser.RULE_augassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 481;
        _la = this._input.LA(1);
        if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.ADD_ASSIGN - 83)) | (1 << (PythonParser.SUB_ASSIGN - 83)) | (1 << (PythonParser.MULT_ASSIGN - 83)) | (1 << (PythonParser.AT_ASSIGN - 83)) | (1 << (PythonParser.DIV_ASSIGN - 83)) | (1 << (PythonParser.MOD_ASSIGN - 83)) | (1 << (PythonParser.AND_ASSIGN - 83)) | (1 << (PythonParser.OR_ASSIGN - 83)) | (1 << (PythonParser.XOR_ASSIGN - 83)) | (1 << (PythonParser.LEFT_SHIFT_ASSIGN - 83)) | (1 << (PythonParser.RIGHT_SHIFT_ASSIGN - 83)) | (1 << (PythonParser.POWER_ASSIGN - 83)) | (1 << (PythonParser.IDIV_ASSIGN - 83)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Del_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_del_stmt;
    return this;
}

Del_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;

Del_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Del_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDel_stmt(this);
	}
};

Del_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDel_stmt(this);
	}
};

Del_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDel_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Del_stmtContext = Del_stmtContext;

PythonParser.prototype.del_stmt = function() {

    var localctx = new Del_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PythonParser.RULE_del_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        this.match(PythonParser.DEL);
        this.state = 484;
        this.exprlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pass_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_pass_stmt;
    return this;
}

Pass_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;


Pass_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterPass_stmt(this);
	}
};

Pass_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitPass_stmt(this);
	}
};

Pass_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitPass_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Pass_stmtContext = Pass_stmtContext;

PythonParser.prototype.pass_stmt = function() {

    var localctx = new Pass_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PythonParser.RULE_pass_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.match(PythonParser.PASS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flow_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_flow_stmt;
    return this;
}

Flow_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flow_stmtContext.prototype.constructor = Flow_stmtContext;

Flow_stmtContext.prototype.break_stmt = function() {
    return this.getTypedRuleContext(Break_stmtContext,0);
};

Flow_stmtContext.prototype.continue_stmt = function() {
    return this.getTypedRuleContext(Continue_stmtContext,0);
};

Flow_stmtContext.prototype.return_stmt = function() {
    return this.getTypedRuleContext(Return_stmtContext,0);
};

Flow_stmtContext.prototype.raise_stmt = function() {
    return this.getTypedRuleContext(Raise_stmtContext,0);
};

Flow_stmtContext.prototype.yield_stmt = function() {
    return this.getTypedRuleContext(Yield_stmtContext,0);
};

Flow_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFlow_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Flow_stmtContext = Flow_stmtContext;

PythonParser.prototype.flow_stmt = function() {

    var localctx = new Flow_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PythonParser.RULE_flow_stmt);
    try {
        this.state = 493;
        switch(this._input.LA(1)) {
        case PythonParser.BREAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 488;
            this.break_stmt();
            break;
        case PythonParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 489;
            this.continue_stmt();
            break;
        case PythonParser.RETURN:
            this.enterOuterAlt(localctx, 3);
            this.state = 490;
            this.return_stmt();
            break;
        case PythonParser.RAISE:
            this.enterOuterAlt(localctx, 4);
            this.state = 491;
            this.raise_stmt();
            break;
        case PythonParser.YIELD:
            this.enterOuterAlt(localctx, 5);
            this.state = 492;
            this.yield_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_break_stmt;
    return this;
}

Break_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;


Break_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterBreak_stmt(this);
	}
};

Break_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitBreak_stmt(this);
	}
};

Break_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitBreak_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Break_stmtContext = Break_stmtContext;

PythonParser.prototype.break_stmt = function() {

    var localctx = new Break_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PythonParser.RULE_break_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.match(PythonParser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_continue_stmt;
    return this;
}

Continue_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;


Continue_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitContinue_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Continue_stmtContext = Continue_stmtContext;

PythonParser.prototype.continue_stmt = function() {

    var localctx = new Continue_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PythonParser.RULE_continue_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 497;
        this.match(PythonParser.CONTINUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_return_stmt;
    return this;
}

Return_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;

Return_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Return_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterReturn_stmt(this);
	}
};

Return_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitReturn_stmt(this);
	}
};

Return_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitReturn_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Return_stmtContext = Return_stmtContext;

PythonParser.prototype.return_stmt = function() {

    var localctx = new Return_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PythonParser.RULE_return_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        this.match(PythonParser.RETURN);
        this.state = 501;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 500;
            this.testlist();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_stmt;
    return this;
}

Yield_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;

Yield_stmtContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

Yield_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_stmt(this);
	}
};

Yield_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_stmt(this);
	}
};

Yield_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_stmtContext = Yield_stmtContext;

PythonParser.prototype.yield_stmt = function() {

    var localctx = new Yield_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PythonParser.RULE_yield_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.yield_expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_raise_stmt;
    return this;
}

Raise_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;

Raise_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Raise_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitRaise_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Raise_stmtContext = Raise_stmtContext;

PythonParser.prototype.raise_stmt = function() {

    var localctx = new Raise_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PythonParser.RULE_raise_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(PythonParser.RAISE);
        this.state = 511;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 506;
            this.test();
            this.state = 509;
            _la = this._input.LA(1);
            if(_la===PythonParser.FROM) {
                this.state = 507;
                this.match(PythonParser.FROM);
                this.state = 508;
                this.test();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_stmt;
    return this;
}

Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;

Import_stmtContext.prototype.import_name = function() {
    return this.getTypedRuleContext(Import_nameContext,0);
};

Import_stmtContext.prototype.import_from = function() {
    return this.getTypedRuleContext(Import_fromContext,0);
};

Import_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_stmt(this);
	}
};

Import_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_stmt(this);
	}
};

Import_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_stmtContext = Import_stmtContext;

PythonParser.prototype.import_stmt = function() {

    var localctx = new Import_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PythonParser.RULE_import_stmt);
    try {
        this.state = 515;
        switch(this._input.LA(1)) {
        case PythonParser.IMPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 513;
            this.import_name();
            break;
        case PythonParser.FROM:
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.import_from();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_name;
    return this;
}

Import_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_nameContext.prototype.constructor = Import_nameContext;

Import_nameContext.prototype.dotted_as_names = function() {
    return this.getTypedRuleContext(Dotted_as_namesContext,0);
};

Import_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_name(this);
	}
};

Import_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_name(this);
	}
};

Import_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_nameContext = Import_nameContext;

PythonParser.prototype.import_name = function() {

    var localctx = new Import_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PythonParser.RULE_import_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this.match(PythonParser.IMPORT);
        this.state = 518;
        this.dotted_as_names();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_from;
    return this;
}

Import_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_fromContext.prototype.constructor = Import_fromContext;

Import_fromContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Import_fromContext.prototype.import_as_names = function() {
    return this.getTypedRuleContext(Import_as_namesContext,0);
};

Import_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_from(this);
	}
};

Import_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_from(this);
	}
};

Import_fromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_from(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_fromContext = Import_fromContext;

PythonParser.prototype.import_from = function() {

    var localctx = new Import_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PythonParser.RULE_import_from);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.match(PythonParser.FROM);
        this.state = 533;
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS) {
                this.state = 521;
                _la = this._input.LA(1);
                if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 527;
            this.dotted_name();
            break;

        case 2:
            this.state = 529; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 528;
                _la = this._input.LA(1);
                if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 531; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS);
            break;

        }
        this.state = 535;
        this.match(PythonParser.IMPORT);
        this.state = 542;
        switch(this._input.LA(1)) {
        case PythonParser.STAR:
            this.state = 536;
            this.match(PythonParser.STAR);
            break;
        case PythonParser.OPEN_PAREN:
            this.state = 537;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 538;
            this.import_as_names();
            this.state = 539;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.NAME:
            this.state = 541;
            this.import_as_names();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_name;
    return this;
}

Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;

Import_as_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Import_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_as_name(this);
	}
};

Import_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_as_name(this);
	}
};

Import_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_nameContext = Import_as_nameContext;

PythonParser.prototype.import_as_name = function() {

    var localctx = new Import_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PythonParser.RULE_import_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 544;
        this.match(PythonParser.NAME);
        this.state = 547;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 545;
            this.match(PythonParser.AS);
            this.state = 546;
            this.match(PythonParser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_name;
    return this;
}

Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;

Dotted_as_nameContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Dotted_as_nameContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Dotted_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_nameContext = Dotted_as_nameContext;

PythonParser.prototype.dotted_as_name = function() {

    var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PythonParser.RULE_dotted_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.dotted_name();
        this.state = 552;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 550;
            this.match(PythonParser.AS);
            this.state = 551;
            this.match(PythonParser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_names;
    return this;
}

Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;

Import_as_namesContext.prototype.import_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_as_nameContext);
    } else {
        return this.getTypedRuleContext(Import_as_nameContext,i);
    }
};

Import_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_as_names(this);
	}
};

Import_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_as_names(this);
	}
};

Import_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_namesContext = Import_as_namesContext;

PythonParser.prototype.import_as_names = function() {

    var localctx = new Import_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PythonParser.RULE_import_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 554;
        this.import_as_name();
        this.state = 559;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 555;
                this.match(PythonParser.COMMA);
                this.state = 556;
                this.import_as_name(); 
            }
            this.state = 561;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

        this.state = 563;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 562;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_names;
    return this;
}

Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;

Dotted_as_namesContext.prototype.dotted_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dotted_as_nameContext);
    } else {
        return this.getTypedRuleContext(Dotted_as_nameContext,i);
    }
};

Dotted_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_namesContext = Dotted_as_namesContext;

PythonParser.prototype.dotted_as_names = function() {

    var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PythonParser.RULE_dotted_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 565;
        this.dotted_as_name();
        this.state = 570;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 566;
            this.match(PythonParser.COMMA);
            this.state = 567;
            this.dotted_as_name();
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_name;
    return this;
}

Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;

Dotted_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Dotted_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_name(this);
	}
};

Dotted_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_name(this);
	}
};

Dotted_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_nameContext = Dotted_nameContext;

PythonParser.prototype.dotted_name = function() {

    var localctx = new Dotted_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PythonParser.RULE_dotted_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 573;
        this.match(PythonParser.NAME);
        this.state = 578;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.DOT) {
            this.state = 574;
            this.match(PythonParser.DOT);
            this.state = 575;
            this.match(PythonParser.NAME);
            this.state = 580;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_global_stmt;
    return this;
}

Global_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;

Global_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Global_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitGlobal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Global_stmtContext = Global_stmtContext;

PythonParser.prototype.global_stmt = function() {

    var localctx = new Global_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PythonParser.RULE_global_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 581;
        this.match(PythonParser.GLOBAL);
        this.state = 582;
        this.match(PythonParser.NAME);
        this.state = 587;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 583;
            this.match(PythonParser.COMMA);
            this.state = 584;
            this.match(PythonParser.NAME);
            this.state = 589;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonlocal_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_nonlocal_stmt;
    return this;
}

Nonlocal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonlocal_stmtContext.prototype.constructor = Nonlocal_stmtContext;

Nonlocal_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Nonlocal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitNonlocal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Nonlocal_stmtContext = Nonlocal_stmtContext;

PythonParser.prototype.nonlocal_stmt = function() {

    var localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PythonParser.RULE_nonlocal_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.match(PythonParser.NONLOCAL);
        this.state = 591;
        this.match(PythonParser.NAME);
        this.state = 596;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 592;
            this.match(PythonParser.COMMA);
            this.state = 593;
            this.match(PythonParser.NAME);
            this.state = 598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assert_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_assert_stmt;
    return this;
}

Assert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;

Assert_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Assert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAssert_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Assert_stmtContext = Assert_stmtContext;

PythonParser.prototype.assert_stmt = function() {

    var localctx = new Assert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PythonParser.RULE_assert_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.match(PythonParser.ASSERT);
        this.state = 600;
        this.test();
        this.state = 603;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 601;
            this.match(PythonParser.COMMA);
            this.state = 602;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_compound_stmt;
    return this;
}

Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;

Compound_stmtContext.prototype.if_stmt = function() {
    return this.getTypedRuleContext(If_stmtContext,0);
};

Compound_stmtContext.prototype.while_stmt = function() {
    return this.getTypedRuleContext(While_stmtContext,0);
};

Compound_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Compound_stmtContext.prototype.try_stmt = function() {
    return this.getTypedRuleContext(Try_stmtContext,0);
};

Compound_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Compound_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Compound_stmtContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

Compound_stmtContext.prototype.decorated = function() {
    return this.getTypedRuleContext(DecoratedContext,0);
};

Compound_stmtContext.prototype.async_stmt = function() {
    return this.getTypedRuleContext(Async_stmtContext,0);
};

Compound_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitCompound_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Compound_stmtContext = Compound_stmtContext;

PythonParser.prototype.compound_stmt = function() {

    var localctx = new Compound_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PythonParser.RULE_compound_stmt);
    try {
        this.state = 614;
        switch(this._input.LA(1)) {
        case PythonParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 605;
            this.if_stmt();
            break;
        case PythonParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 606;
            this.while_stmt();
            break;
        case PythonParser.FOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 607;
            this.for_stmt();
            break;
        case PythonParser.TRY:
            this.enterOuterAlt(localctx, 4);
            this.state = 608;
            this.try_stmt();
            break;
        case PythonParser.WITH:
            this.enterOuterAlt(localctx, 5);
            this.state = 609;
            this.with_stmt();
            break;
        case PythonParser.DEF:
            this.enterOuterAlt(localctx, 6);
            this.state = 610;
            this.funcdef();
            break;
        case PythonParser.CLASS:
            this.enterOuterAlt(localctx, 7);
            this.state = 611;
            this.classdef();
            break;
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 8);
            this.state = 612;
            this.decorated();
            break;
        case PythonParser.ASYNC:
            this.enterOuterAlt(localctx, 9);
            this.state = 613;
            this.async_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_async_stmt;
    return this;
}

Async_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_stmtContext.prototype.constructor = Async_stmtContext;

Async_stmtContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Async_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Async_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Async_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAsync_stmt(this);
	}
};

Async_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAsync_stmt(this);
	}
};

Async_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAsync_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Async_stmtContext = Async_stmtContext;

PythonParser.prototype.async_stmt = function() {

    var localctx = new Async_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PythonParser.RULE_async_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.match(PythonParser.ASYNC);
        this.state = 620;
        switch(this._input.LA(1)) {
        case PythonParser.DEF:
            this.state = 617;
            this.funcdef();
            break;
        case PythonParser.WITH:
            this.state = 618;
            this.with_stmt();
            break;
        case PythonParser.FOR:
            this.state = 619;
            this.for_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_if_stmt;
    return this;
}

If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

If_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

If_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitIf_stmt(this);
	}
};

If_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitIf_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.If_stmtContext = If_stmtContext;

PythonParser.prototype.if_stmt = function() {

    var localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PythonParser.RULE_if_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 622;
        this.match(PythonParser.IF);
        this.state = 623;
        this.test();
        this.state = 624;
        this.match(PythonParser.COLON);
        this.state = 625;
        this.suite();
        this.state = 633;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.ELIF) {
            this.state = 626;
            this.match(PythonParser.ELIF);
            this.state = 627;
            this.test();
            this.state = 628;
            this.match(PythonParser.COLON);
            this.state = 629;
            this.suite();
            this.state = 635;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 639;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 636;
            this.match(PythonParser.ELSE);
            this.state = 637;
            this.match(PythonParser.COLON);
            this.state = 638;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_while_stmt;
    return this;
}

While_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;

While_stmtContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

While_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

While_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWhile_stmt(this);
	}
};

While_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWhile_stmt(this);
	}
};

While_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWhile_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.While_stmtContext = While_stmtContext;

PythonParser.prototype.while_stmt = function() {

    var localctx = new While_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PythonParser.RULE_while_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 641;
        this.match(PythonParser.WHILE);
        this.state = 642;
        this.test();
        this.state = 643;
        this.match(PythonParser.COLON);
        this.state = 644;
        this.suite();
        this.state = 648;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 645;
            this.match(PythonParser.ELSE);
            this.state = 646;
            this.match(PythonParser.COLON);
            this.state = 647;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_for_stmt;
    return this;
}

For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;

For_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

For_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

For_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

For_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFor_stmt(this);
	}
};

For_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFor_stmt(this);
	}
};

For_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFor_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.For_stmtContext = For_stmtContext;

PythonParser.prototype.for_stmt = function() {

    var localctx = new For_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PythonParser.RULE_for_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 650;
        this.match(PythonParser.FOR);
        this.state = 651;
        this.exprlist();
        this.state = 652;
        this.match(PythonParser.IN);
        this.state = 653;
        this.testlist();
        this.state = 654;
        this.match(PythonParser.COLON);
        this.state = 655;
        this.suite();
        this.state = 659;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 656;
            this.match(PythonParser.ELSE);
            this.state = 657;
            this.match(PythonParser.COLON);
            this.state = 658;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_try_stmt;
    return this;
}

Try_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;

Try_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

Try_stmtContext.prototype.except_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Except_clauseContext);
    } else {
        return this.getTypedRuleContext(Except_clauseContext,i);
    }
};

Try_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTry_stmt(this);
	}
};

Try_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTry_stmt(this);
	}
};

Try_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTry_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Try_stmtContext = Try_stmtContext;

PythonParser.prototype.try_stmt = function() {

    var localctx = new Try_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PythonParser.RULE_try_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 661;
        this.match(PythonParser.TRY);
        this.state = 662;
        this.match(PythonParser.COLON);
        this.state = 663;
        this.suite();
        this.state = 685;
        switch(this._input.LA(1)) {
        case PythonParser.EXCEPT:
            this.state = 668; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 664;
                this.except_clause();
                this.state = 665;
                this.match(PythonParser.COLON);
                this.state = 666;
                this.suite();
                this.state = 670; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.EXCEPT);
            this.state = 675;
            _la = this._input.LA(1);
            if(_la===PythonParser.ELSE) {
                this.state = 672;
                this.match(PythonParser.ELSE);
                this.state = 673;
                this.match(PythonParser.COLON);
                this.state = 674;
                this.suite();
            }

            this.state = 680;
            _la = this._input.LA(1);
            if(_la===PythonParser.FINALLY) {
                this.state = 677;
                this.match(PythonParser.FINALLY);
                this.state = 678;
                this.match(PythonParser.COLON);
                this.state = 679;
                this.suite();
            }

            break;
        case PythonParser.FINALLY:
            this.state = 682;
            this.match(PythonParser.FINALLY);
            this.state = 683;
            this.match(PythonParser.COLON);
            this.state = 684;
            this.suite();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_with_stmt;
    return this;
}

With_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;

With_stmtContext.prototype.with_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(With_itemContext);
    } else {
        return this.getTypedRuleContext(With_itemContext,i);
    }
};

With_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

With_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWith_stmt(this);
	}
};

With_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWith_stmt(this);
	}
};

With_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWith_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.With_stmtContext = With_stmtContext;

PythonParser.prototype.with_stmt = function() {

    var localctx = new With_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PythonParser.RULE_with_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 687;
        this.match(PythonParser.WITH);
        this.state = 688;
        this.with_item();
        this.state = 693;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 689;
            this.match(PythonParser.COMMA);
            this.state = 690;
            this.with_item();
            this.state = 695;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 696;
        this.match(PythonParser.COLON);
        this.state = 697;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_with_item;
    return this;
}

With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;

With_itemContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

With_itemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

With_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWith_item(this);
	}
};

With_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWith_item(this);
	}
};

With_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWith_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.With_itemContext = With_itemContext;

PythonParser.prototype.with_item = function() {

    var localctx = new With_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PythonParser.RULE_with_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.test();
        this.state = 702;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 700;
            this.match(PythonParser.AS);
            this.state = 701;
            this.expr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Except_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_except_clause;
    return this;
}

Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;

Except_clauseContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Except_clauseContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Except_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExcept_clause(this);
	}
};

Except_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExcept_clause(this);
	}
};

Except_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExcept_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Except_clauseContext = Except_clauseContext;

PythonParser.prototype.except_clause = function() {

    var localctx = new Except_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PythonParser.RULE_except_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(PythonParser.EXCEPT);
        this.state = 710;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 705;
            this.test();
            this.state = 708;
            _la = this._input.LA(1);
            if(_la===PythonParser.AS) {
                this.state = 706;
                this.match(PythonParser.AS);
                this.state = 707;
                this.match(PythonParser.NAME);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_suite;
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

SuiteContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

SuiteContext.prototype.INDENT = function() {
    return this.getToken(PythonParser.INDENT, 0);
};

SuiteContext.prototype.DEDENT = function() {
    return this.getToken(PythonParser.DEDENT, 0);
};

SuiteContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSuite(this);
	}
};

SuiteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSuite(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SuiteContext = SuiteContext;

PythonParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PythonParser.RULE_suite);
    var _la = 0; // Token type
    try {
        this.state = 722;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 712;
            this.simple_stmt();
            break;
        case PythonParser.NEWLINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 713;
            this.match(PythonParser.NEWLINE);
            this.state = 714;
            this.match(PythonParser.INDENT);
            this.state = 716; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 715;
                this.stmt();
                this.state = 718; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.DEF) | (1 << PythonParser.RETURN) | (1 << PythonParser.RAISE) | (1 << PythonParser.FROM) | (1 << PythonParser.IMPORT) | (1 << PythonParser.GLOBAL) | (1 << PythonParser.NONLOCAL) | (1 << PythonParser.ASSERT) | (1 << PythonParser.IF) | (1 << PythonParser.WHILE) | (1 << PythonParser.FOR) | (1 << PythonParser.TRY) | (1 << PythonParser.WITH) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE) | (1 << PythonParser.CLASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PythonParser.YIELD - 32)) | (1 << (PythonParser.DEL - 32)) | (1 << (PythonParser.PASS - 32)) | (1 << (PythonParser.CONTINUE - 32)) | (1 << (PythonParser.BREAK - 32)) | (1 << (PythonParser.ASYNC - 32)) | (1 << (PythonParser.AWAIT - 32)) | (1 << (PythonParser.NAME - 32)) | (1 << (PythonParser.ELLIPSIS - 32)) | (1 << (PythonParser.STAR - 32)) | (1 << (PythonParser.OPEN_PAREN - 32)) | (1 << (PythonParser.OPEN_BRACK - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)) | (1 << (PythonParser.OPEN_BRACE - 66)) | (1 << (PythonParser.AT - 66)))) !== 0));
            this.state = 720;
            this.match(PythonParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_test;
    return this;
}

TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;

TestContext.prototype.or_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_testContext);
    } else {
        return this.getTypedRuleContext(Or_testContext,i);
    }
};

TestContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TestContext.prototype.lambdef = function() {
    return this.getTypedRuleContext(LambdefContext,0);
};

TestContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTest(this);
	}
};

TestContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTest(this);
	}
};

TestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestContext = TestContext;

PythonParser.prototype.test = function() {

    var localctx = new TestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PythonParser.RULE_test);
    var _la = 0; // Token type
    try {
        this.state = 733;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 724;
            this.or_test();
            this.state = 730;
            _la = this._input.LA(1);
            if(_la===PythonParser.IF) {
                this.state = 725;
                this.match(PythonParser.IF);
                this.state = 726;
                this.or_test();
                this.state = 727;
                this.match(PythonParser.ELSE);
                this.state = 728;
                this.test();
            }

            break;
        case PythonParser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 732;
            this.lambdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_test_nocond;
    return this;
}

Test_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_nocondContext.prototype.constructor = Test_nocondContext;

Test_nocondContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Test_nocondContext.prototype.lambdef_nocond = function() {
    return this.getTypedRuleContext(Lambdef_nocondContext,0);
};

Test_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTest_nocond(this);
	}
};

Test_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTest_nocond(this);
	}
};

Test_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTest_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Test_nocondContext = Test_nocondContext;

PythonParser.prototype.test_nocond = function() {

    var localctx = new Test_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PythonParser.RULE_test_nocond);
    try {
        this.state = 737;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 735;
            this.or_test();
            break;
        case PythonParser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 736;
            this.lambdef_nocond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_lambdef;
    return this;
}

LambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdefContext.prototype.constructor = LambdefContext;

LambdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

LambdefContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

LambdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterLambdef(this);
	}
};

LambdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitLambdef(this);
	}
};

LambdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitLambdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.LambdefContext = LambdefContext;

PythonParser.prototype.lambdef = function() {

    var localctx = new LambdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PythonParser.RULE_lambdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;
        this.match(PythonParser.LAMBDA);
        this.state = 741;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 740;
            this.varargslist();
        }

        this.state = 743;
        this.match(PythonParser.COLON);
        this.state = 744;
        this.test();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lambdef_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_lambdef_nocond;
    return this;
}

Lambdef_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambdef_nocondContext.prototype.constructor = Lambdef_nocondContext;

Lambdef_nocondContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Lambdef_nocondContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

Lambdef_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitLambdef_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Lambdef_nocondContext = Lambdef_nocondContext;

PythonParser.prototype.lambdef_nocond = function() {

    var localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PythonParser.RULE_lambdef_nocond);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(PythonParser.LAMBDA);
        this.state = 748;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 747;
            this.varargslist();
        }

        this.state = 750;
        this.match(PythonParser.COLON);
        this.state = 751;
        this.test_nocond();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_or_test;
    return this;
}

Or_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_testContext.prototype.constructor = Or_testContext;

Or_testContext.prototype.and_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_testContext);
    } else {
        return this.getTypedRuleContext(And_testContext,i);
    }
};

Or_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterOr_test(this);
	}
};

Or_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitOr_test(this);
	}
};

Or_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitOr_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Or_testContext = Or_testContext;

PythonParser.prototype.or_test = function() {

    var localctx = new Or_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PythonParser.RULE_or_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this.and_test();
        this.state = 758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.OR) {
            this.state = 754;
            this.match(PythonParser.OR);
            this.state = 755;
            this.and_test();
            this.state = 760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_and_test;
    return this;
}

And_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_testContext.prototype.constructor = And_testContext;

And_testContext.prototype.not_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Not_testContext);
    } else {
        return this.getTypedRuleContext(Not_testContext,i);
    }
};

And_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnd_test(this);
	}
};

And_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnd_test(this);
	}
};

And_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnd_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.And_testContext = And_testContext;

PythonParser.prototype.and_test = function() {

    var localctx = new And_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PythonParser.RULE_and_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 761;
        this.not_test();
        this.state = 766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.AND) {
            this.state = 762;
            this.match(PythonParser.AND);
            this.state = 763;
            this.not_test();
            this.state = 768;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_not_test;
    return this;
}

Not_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_testContext.prototype.constructor = Not_testContext;

Not_testContext.prototype.not_test = function() {
    return this.getTypedRuleContext(Not_testContext,0);
};

Not_testContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

Not_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterNot_test(this);
	}
};

Not_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitNot_test(this);
	}
};

Not_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitNot_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Not_testContext = Not_testContext;

PythonParser.prototype.not_test = function() {

    var localctx = new Not_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PythonParser.RULE_not_test);
    try {
        this.state = 772;
        switch(this._input.LA(1)) {
        case PythonParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 769;
            this.match(PythonParser.NOT);
            this.state = 770;
            this.not_test();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 771;
            this.comparison();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ComparisonContext.prototype.comp_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comp_opContext);
    } else {
        return this.getTypedRuleContext(Comp_opContext,i);
    }
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ComparisonContext = ComparisonContext;

PythonParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PythonParser.RULE_comparison);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        this.expr();
        this.state = 780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.IN) | (1 << PythonParser.NOT) | (1 << PythonParser.IS))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (PythonParser.LESS_THAN - 74)) | (1 << (PythonParser.GREATER_THAN - 74)) | (1 << (PythonParser.EQUALS - 74)) | (1 << (PythonParser.GT_EQ - 74)) | (1 << (PythonParser.LT_EQ - 74)) | (1 << (PythonParser.NOT_EQ_1 - 74)) | (1 << (PythonParser.NOT_EQ_2 - 74)))) !== 0)) {
            this.state = 775;
            this.comp_op();
            this.state = 776;
            this.expr();
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_op;
    return this;
}

Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;


Comp_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_op(this);
	}
};

Comp_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_op(this);
	}
};

Comp_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_opContext = Comp_opContext;

PythonParser.prototype.comp_op = function() {

    var localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PythonParser.RULE_comp_op);
    try {
        this.state = 796;
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 783;
            this.match(PythonParser.LESS_THAN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 784;
            this.match(PythonParser.GREATER_THAN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 785;
            this.match(PythonParser.EQUALS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 786;
            this.match(PythonParser.GT_EQ);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 787;
            this.match(PythonParser.LT_EQ);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 788;
            this.match(PythonParser.NOT_EQ_1);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 789;
            this.match(PythonParser.NOT_EQ_2);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 790;
            this.match(PythonParser.IN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 791;
            this.match(PythonParser.NOT);
            this.state = 792;
            this.match(PythonParser.IN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 793;
            this.match(PythonParser.IS);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 794;
            this.match(PythonParser.IS);
            this.state = 795;
            this.match(PythonParser.NOT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_star_expr;
    return this;
}

Star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Star_exprContext.prototype.constructor = Star_exprContext;

Star_exprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterStar_expr(this);
	}
};

Star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitStar_expr(this);
	}
};

Star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitStar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Star_exprContext = Star_exprContext;

PythonParser.prototype.star_expr = function() {

    var localctx = new Star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PythonParser.RULE_star_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this.match(PythonParser.STAR);
        this.state = 799;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.xor_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xor_exprContext);
    } else {
        return this.getTypedRuleContext(Xor_exprContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ExprContext = ExprContext;

PythonParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PythonParser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.xor_expr();
        this.state = 806;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.OR_OP) {
            this.state = 802;
            this.match(PythonParser.OR_OP);
            this.state = 803;
            this.xor_expr();
            this.state = 808;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xor_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_xor_expr;
    return this;
}

Xor_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xor_exprContext.prototype.constructor = Xor_exprContext;

Xor_exprContext.prototype.and_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_exprContext);
    } else {
        return this.getTypedRuleContext(And_exprContext,i);
    }
};

Xor_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterXor_expr(this);
	}
};

Xor_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitXor_expr(this);
	}
};

Xor_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitXor_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Xor_exprContext = Xor_exprContext;

PythonParser.prototype.xor_expr = function() {

    var localctx = new Xor_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PythonParser.RULE_xor_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 809;
        this.and_expr();
        this.state = 814;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.XOR) {
            this.state = 810;
            this.match(PythonParser.XOR);
            this.state = 811;
            this.and_expr();
            this.state = 816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_and_expr;
    return this;
}

And_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_exprContext.prototype.constructor = And_exprContext;

And_exprContext.prototype.shift_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_exprContext);
    } else {
        return this.getTypedRuleContext(Shift_exprContext,i);
    }
};

And_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnd_expr(this);
	}
};

And_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnd_expr(this);
	}
};

And_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnd_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.And_exprContext = And_exprContext;

PythonParser.prototype.and_expr = function() {

    var localctx = new And_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PythonParser.RULE_and_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this.shift_expr();
        this.state = 822;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.AND_OP) {
            this.state = 818;
            this.match(PythonParser.AND_OP);
            this.state = 819;
            this.shift_expr();
            this.state = 824;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shift_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_shift_expr;
    return this;
}

Shift_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_exprContext.prototype.constructor = Shift_exprContext;

Shift_exprContext.prototype.arith_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Arith_exprContext);
    } else {
        return this.getTypedRuleContext(Arith_exprContext,i);
    }
};

Shift_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterShift_expr(this);
	}
};

Shift_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitShift_expr(this);
	}
};

Shift_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitShift_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Shift_exprContext = Shift_exprContext;

PythonParser.prototype.shift_expr = function() {

    var localctx = new Shift_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PythonParser.RULE_shift_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 825;
        this.arith_expr();
        this.state = 830;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.LEFT_SHIFT || _la===PythonParser.RIGHT_SHIFT) {
            this.state = 826;
            _la = this._input.LA(1);
            if(!(_la===PythonParser.LEFT_SHIFT || _la===PythonParser.RIGHT_SHIFT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 827;
            this.arith_expr();
            this.state = 832;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arith_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arith_expr;
    return this;
}

Arith_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arith_exprContext.prototype.constructor = Arith_exprContext;

Arith_exprContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Arith_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArith_expr(this);
	}
};

Arith_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArith_expr(this);
	}
};

Arith_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArith_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Arith_exprContext = Arith_exprContext;

PythonParser.prototype.arith_expr = function() {

    var localctx = new Arith_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PythonParser.RULE_arith_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this.term();
        this.state = 838;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.ADD || _la===PythonParser.MINUS) {
            this.state = 834;
            _la = this._input.LA(1);
            if(!(_la===PythonParser.ADD || _la===PythonParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 835;
            this.term();
            this.state = 840;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TermContext = TermContext;

PythonParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PythonParser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 841;
        this.factor();
        this.state = 846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (PythonParser.STAR - 51)) | (1 << (PythonParser.DIV - 51)) | (1 << (PythonParser.MOD - 51)) | (1 << (PythonParser.IDIV - 51)) | (1 << (PythonParser.AT - 51)))) !== 0)) {
            this.state = 842;
            _la = this._input.LA(1);
            if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (PythonParser.STAR - 51)) | (1 << (PythonParser.DIV - 51)) | (1 << (PythonParser.MOD - 51)) | (1 << (PythonParser.IDIV - 51)) | (1 << (PythonParser.AT - 51)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 843;
            this.factor();
            this.state = 848;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

FactorContext.prototype.power = function() {
    return this.getTypedRuleContext(PowerContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFactor(this);
	}
};

FactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.FactorContext = FactorContext;

PythonParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PythonParser.RULE_factor);
    var _la = 0; // Token type
    try {
        this.state = 852;
        switch(this._input.LA(1)) {
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 849;
            _la = this._input.LA(1);
            if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 850;
            this.factor();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 851;
            this.power();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_power;
    return this;
}

PowerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerContext.prototype.constructor = PowerContext;

PowerContext.prototype.atom_expr = function() {
    return this.getTypedRuleContext(Atom_exprContext,0);
};

PowerContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

PowerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterPower(this);
	}
};

PowerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitPower(this);
	}
};

PowerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitPower(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.PowerContext = PowerContext;

PythonParser.prototype.power = function() {

    var localctx = new PowerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PythonParser.RULE_power);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 854;
        this.atom_expr();
        this.state = 857;
        _la = this._input.LA(1);
        if(_la===PythonParser.POWER) {
            this.state = 855;
            this.match(PythonParser.POWER);
            this.state = 856;
            this.factor();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atom_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_atom_expr;
    return this;
}

Atom_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atom_exprContext.prototype.constructor = Atom_exprContext;

Atom_exprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Atom_exprContext.prototype.AWAIT = function() {
    return this.getToken(PythonParser.AWAIT, 0);
};

Atom_exprContext.prototype.trailer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TrailerContext);
    } else {
        return this.getTypedRuleContext(TrailerContext,i);
    }
};

Atom_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAtom_expr(this);
	}
};

Atom_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAtom_expr(this);
	}
};

Atom_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAtom_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Atom_exprContext = Atom_exprContext;

PythonParser.prototype.atom_expr = function() {

    var localctx = new Atom_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PythonParser.RULE_atom_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        _la = this._input.LA(1);
        if(_la===PythonParser.AWAIT) {
            this.state = 859;
            this.match(PythonParser.AWAIT);
        }

        this.state = 862;
        this.atom();
        this.state = 866;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (PythonParser.DOT - 49)) | (1 << (PythonParser.OPEN_PAREN - 49)) | (1 << (PythonParser.OPEN_BRACK - 49)))) !== 0)) {
            this.state = 863;
            this.trailer();
            this.state = 868;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

AtomContext.prototype.NUMBER = function() {
    return this.getToken(PythonParser.NUMBER, 0);
};

AtomContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

AtomContext.prototype.testlist_comp = function() {
    return this.getTypedRuleContext(Testlist_compContext,0);
};

AtomContext.prototype.dictorsetmaker = function() {
    return this.getTypedRuleContext(DictorsetmakerContext,0);
};

AtomContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.STRING);
    } else {
        return this.getToken(PythonParser.STRING, i);
    }
};


AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAtom(this);
	}
};

AtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AtomContext = AtomContext;

PythonParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PythonParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.state = 869;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 872;
            switch (this._input.LA(1)) {
            case PythonParser.YIELD:
            	this.state = 870;
            	this.yield_expr();
            	break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.STAR:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
            	this.state = 871;
            	this.testlist_comp();
            	break;
            case PythonParser.CLOSE_PAREN:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 874;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACK:
            this.state = 875;
            this.match(PythonParser.OPEN_BRACK);
            this.state = 877;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 876;
                this.testlist_comp();
            }

            this.state = 879;
            this.match(PythonParser.CLOSE_BRACK);
            break;
        case PythonParser.OPEN_BRACE:
            this.state = 880;
            this.match(PythonParser.OPEN_BRACE);
            this.state = 882;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 881;
                this.dictorsetmaker();
            }

            this.state = 884;
            this.match(PythonParser.CLOSE_BRACE);
            break;
        case PythonParser.NAME:
            this.state = 885;
            this.match(PythonParser.NAME);
            break;
        case PythonParser.NUMBER:
            this.state = 886;
            this.match(PythonParser.NUMBER);
            break;
        case PythonParser.STRING:
            this.state = 888; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 887;
                this.match(PythonParser.STRING);
                this.state = 890; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.STRING);
            break;
        case PythonParser.ELLIPSIS:
            this.state = 892;
            this.match(PythonParser.ELLIPSIS);
            break;
        case PythonParser.NONE:
            this.state = 893;
            this.match(PythonParser.NONE);
            break;
        case PythonParser.TRUE:
            this.state = 894;
            this.match(PythonParser.TRUE);
            break;
        case PythonParser.FALSE:
            this.state = 895;
            this.match(PythonParser.FALSE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_compContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_comp;
    return this;
}

Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;

Testlist_compContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_compContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_compContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Testlist_compContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist_comp(this);
	}
};

Testlist_compContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist_comp(this);
	}
};

Testlist_compContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist_comp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_compContext = Testlist_compContext;

PythonParser.prototype.testlist_comp = function() {

    var localctx = new Testlist_compContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PythonParser.RULE_testlist_comp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 898;
            this.test();
            break;
        case PythonParser.STAR:
            this.state = 899;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 916;
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
        case PythonParser.ASYNC:
            this.state = 902;
            this.comp_for();
            break;
        case PythonParser.CLOSE_PAREN:
        case PythonParser.COMMA:
        case PythonParser.CLOSE_BRACK:
            this.state = 910;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 903;
                    this.match(PythonParser.COMMA);
                    this.state = 906;
                    switch(this._input.LA(1)) {
                    case PythonParser.STRING:
                    case PythonParser.NUMBER:
                    case PythonParser.LAMBDA:
                    case PythonParser.NOT:
                    case PythonParser.NONE:
                    case PythonParser.TRUE:
                    case PythonParser.FALSE:
                    case PythonParser.AWAIT:
                    case PythonParser.NAME:
                    case PythonParser.ELLIPSIS:
                    case PythonParser.OPEN_PAREN:
                    case PythonParser.OPEN_BRACK:
                    case PythonParser.ADD:
                    case PythonParser.MINUS:
                    case PythonParser.NOT_OP:
                    case PythonParser.OPEN_BRACE:
                        this.state = 904;
                        this.test();
                        break;
                    case PythonParser.STAR:
                        this.state = 905;
                        this.star_expr();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 912;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
            }

            this.state = 914;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 913;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_trailer;
    return this;
}

TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;

TrailerContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

TrailerContext.prototype.subscriptlist = function() {
    return this.getTypedRuleContext(SubscriptlistContext,0);
};

TrailerContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

TrailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTrailer(this);
	}
};

TrailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTrailer(this);
	}
};

TrailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTrailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TrailerContext = TrailerContext;

PythonParser.prototype.trailer = function() {

    var localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PythonParser.RULE_trailer);
    var _la = 0; // Token type
    try {
        this.state = 929;
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 918;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 920;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 919;
                this.arglist();
            }

            this.state = 922;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACK:
            this.enterOuterAlt(localctx, 2);
            this.state = 923;
            this.match(PythonParser.OPEN_BRACK);
            this.state = 924;
            this.subscriptlist();
            this.state = 925;
            this.match(PythonParser.CLOSE_BRACK);
            break;
        case PythonParser.DOT:
            this.enterOuterAlt(localctx, 3);
            this.state = 927;
            this.match(PythonParser.DOT);
            this.state = 928;
            this.match(PythonParser.NAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscriptlist;
    return this;
}

SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;

SubscriptlistContext.prototype.subscript = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubscriptContext);
    } else {
        return this.getTypedRuleContext(SubscriptContext,i);
    }
};

SubscriptlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSubscriptlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptlistContext = SubscriptlistContext;

PythonParser.prototype.subscriptlist = function() {

    var localctx = new SubscriptlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PythonParser.RULE_subscriptlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.subscript();
        this.state = 936;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 932;
                this.match(PythonParser.COMMA);
                this.state = 933;
                this.subscript(); 
            }
            this.state = 938;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

        this.state = 940;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 939;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscript;
    return this;
}

SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SubscriptContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

SubscriptContext.prototype.sliceop = function() {
    return this.getTypedRuleContext(SliceopContext,0);
};

SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptContext = SubscriptContext;

PythonParser.prototype.subscript = function() {

    var localctx = new SubscriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PythonParser.RULE_subscript);
    var _la = 0; // Token type
    try {
        this.state = 953;
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 942;
            this.test();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 944;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 943;
                this.test();
            }

            this.state = 946;
            this.match(PythonParser.COLON);
            this.state = 948;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 947;
                this.test();
            }

            this.state = 951;
            _la = this._input.LA(1);
            if(_la===PythonParser.COLON) {
                this.state = 950;
                this.sliceop();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SliceopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_sliceop;
    return this;
}

SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;

SliceopContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

SliceopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSliceop(this);
	}
};

SliceopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSliceop(this);
	}
};

SliceopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSliceop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SliceopContext = SliceopContext;

PythonParser.prototype.sliceop = function() {

    var localctx = new SliceopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PythonParser.RULE_sliceop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        this.match(PythonParser.COLON);
        this.state = 957;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 956;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_exprlist;
    return this;
}

ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;

ExprlistContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprlistContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

ExprlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExprlist(this);
	}
};

ExprlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExprlist(this);
	}
};

ExprlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExprlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ExprlistContext = ExprlistContext;

PythonParser.prototype.exprlist = function() {

    var localctx = new ExprlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PythonParser.RULE_exprlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 961;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 959;
            this.expr();
            break;
        case PythonParser.STAR:
            this.state = 960;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 970;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 963;
                this.match(PythonParser.COMMA);
                this.state = 966;
                switch(this._input.LA(1)) {
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 964;
                    this.expr();
                    break;
                case PythonParser.STAR:
                    this.state = 965;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 972;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

        this.state = 974;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 973;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist;
    return this;
}

TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;

TestlistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TestlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist(this);
	}
};

TestlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist(this);
	}
};

TestlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestlistContext = TestlistContext;

PythonParser.prototype.testlist = function() {

    var localctx = new TestlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PythonParser.RULE_testlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.test();
        this.state = 981;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 977;
                this.match(PythonParser.COMMA);
                this.state = 978;
                this.test(); 
            }
            this.state = 983;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
        }

        this.state = 985;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 984;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DictorsetmakerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dictorsetmaker;
    return this;
}

DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;

DictorsetmakerContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

DictorsetmakerContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DictorsetmakerContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

DictorsetmakerContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

DictorsetmakerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDictorsetmaker(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DictorsetmakerContext = DictorsetmakerContext;

PythonParser.prototype.dictorsetmaker = function() {

    var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PythonParser.RULE_dictorsetmaker);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.state = 993;
            switch(this._input.LA(1)) {
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 987;
                this.test();
                this.state = 988;
                this.match(PythonParser.COLON);
                this.state = 989;
                this.test();
                break;
            case PythonParser.POWER:
                this.state = 991;
                this.match(PythonParser.POWER);
                this.state = 992;
                this.expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1013;
            switch(this._input.LA(1)) {
            case PythonParser.FOR:
            case PythonParser.ASYNC:
                this.state = 995;
                this.comp_for();
                break;
            case PythonParser.COMMA:
            case PythonParser.CLOSE_BRACE:
                this.state = 1007;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 996;
                        this.match(PythonParser.COMMA);
                        this.state = 1003;
                        switch(this._input.LA(1)) {
                        case PythonParser.STRING:
                        case PythonParser.NUMBER:
                        case PythonParser.LAMBDA:
                        case PythonParser.NOT:
                        case PythonParser.NONE:
                        case PythonParser.TRUE:
                        case PythonParser.FALSE:
                        case PythonParser.AWAIT:
                        case PythonParser.NAME:
                        case PythonParser.ELLIPSIS:
                        case PythonParser.OPEN_PAREN:
                        case PythonParser.OPEN_BRACK:
                        case PythonParser.ADD:
                        case PythonParser.MINUS:
                        case PythonParser.NOT_OP:
                        case PythonParser.OPEN_BRACE:
                            this.state = 997;
                            this.test();
                            this.state = 998;
                            this.match(PythonParser.COLON);
                            this.state = 999;
                            this.test();
                            break;
                        case PythonParser.POWER:
                            this.state = 1001;
                            this.match(PythonParser.POWER);
                            this.state = 1002;
                            this.expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1009;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
                }

                this.state = 1011;
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 1010;
                    this.match(PythonParser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.state = 1017;
            switch(this._input.LA(1)) {
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 1015;
                this.test();
                break;
            case PythonParser.STAR:
                this.state = 1016;
                this.star_expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1033;
            switch(this._input.LA(1)) {
            case PythonParser.FOR:
            case PythonParser.ASYNC:
                this.state = 1019;
                this.comp_for();
                break;
            case PythonParser.COMMA:
            case PythonParser.CLOSE_BRACE:
                this.state = 1027;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1020;
                        this.match(PythonParser.COMMA);
                        this.state = 1023;
                        switch(this._input.LA(1)) {
                        case PythonParser.STRING:
                        case PythonParser.NUMBER:
                        case PythonParser.LAMBDA:
                        case PythonParser.NOT:
                        case PythonParser.NONE:
                        case PythonParser.TRUE:
                        case PythonParser.FALSE:
                        case PythonParser.AWAIT:
                        case PythonParser.NAME:
                        case PythonParser.ELLIPSIS:
                        case PythonParser.OPEN_PAREN:
                        case PythonParser.OPEN_BRACK:
                        case PythonParser.ADD:
                        case PythonParser.MINUS:
                        case PythonParser.NOT_OP:
                        case PythonParser.OPEN_BRACE:
                            this.state = 1021;
                            this.test();
                            break;
                        case PythonParser.STAR:
                            this.state = 1022;
                            this.star_expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1029;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
                }

                this.state = 1031;
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 1030;
                    this.match(PythonParser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_classdef;
    return this;
}

ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;

ClassdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

ClassdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

ClassdefContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

ClassdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterClassdef(this);
	}
};

ClassdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitClassdef(this);
	}
};

ClassdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitClassdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ClassdefContext = ClassdefContext;

PythonParser.prototype.classdef = function() {

    var localctx = new ClassdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PythonParser.RULE_classdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1037;
        this.match(PythonParser.CLASS);
        this.state = 1038;
        this.match(PythonParser.NAME);
        this.state = 1044;
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 1039;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 1041;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 1040;
                this.arglist();
            }

            this.state = 1043;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 1046;
        this.match(PythonParser.COLON);
        this.state = 1047;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArglist(this);
	}
};

ArglistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArglist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArglistContext = ArglistContext;

PythonParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PythonParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1049;
        this.argument();
        this.state = 1054;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1050;
                this.match(PythonParser.COMMA);
                this.state = 1051;
                this.argument(); 
            }
            this.state = 1056;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

        this.state = 1058;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 1057;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

ArgumentContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArgument(this);
	}
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArgumentContext = ArgumentContext;

PythonParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PythonParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1072;
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1060;
            this.test();
            this.state = 1062;
            _la = this._input.LA(1);
            if(_la===PythonParser.FOR || _la===PythonParser.ASYNC) {
                this.state = 1061;
                this.comp_for();
            }

            break;

        case 2:
            this.state = 1064;
            this.test();
            this.state = 1065;
            this.match(PythonParser.ASSIGN);
            this.state = 1066;
            this.test();
            break;

        case 3:
            this.state = 1068;
            this.match(PythonParser.POWER);
            this.state = 1069;
            this.test();
            break;

        case 4:
            this.state = 1070;
            this.match(PythonParser.STAR);
            this.state = 1071;
            this.test();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_iterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_iter;
    return this;
}

Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;

Comp_iterContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Comp_iterContext.prototype.comp_if = function() {
    return this.getTypedRuleContext(Comp_ifContext,0);
};

Comp_iterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_iter(this);
	}
};

Comp_iterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_iter(this);
	}
};

Comp_iterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_iter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_iterContext = Comp_iterContext;

PythonParser.prototype.comp_iter = function() {

    var localctx = new Comp_iterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PythonParser.RULE_comp_iter);
    try {
        this.state = 1076;
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
        case PythonParser.ASYNC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1074;
            this.comp_for();
            break;
        case PythonParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1075;
            this.comp_if();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_forContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_for;
    return this;
}

Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;

Comp_forContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Comp_forContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Comp_forContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Comp_forContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_forContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_for(this);
	}
};

Comp_forContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_for(this);
	}
};

Comp_forContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_for(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_forContext = Comp_forContext;

PythonParser.prototype.comp_for = function() {

    var localctx = new Comp_forContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PythonParser.RULE_comp_for);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1079;
        _la = this._input.LA(1);
        if(_la===PythonParser.ASYNC) {
            this.state = 1078;
            this.match(PythonParser.ASYNC);
        }

        this.state = 1081;
        this.match(PythonParser.FOR);
        this.state = 1082;
        this.exprlist();
        this.state = 1083;
        this.match(PythonParser.IN);
        this.state = 1084;
        this.or_test();
        this.state = 1086;
        _la = this._input.LA(1);
        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (PythonParser.IF - 13)) | (1 << (PythonParser.FOR - 13)) | (1 << (PythonParser.ASYNC - 13)))) !== 0)) {
            this.state = 1085;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_if;
    return this;
}

Comp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_ifContext.prototype.constructor = Comp_ifContext;

Comp_ifContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Comp_ifContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_if(this);
	}
};

Comp_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_if(this);
	}
};

Comp_ifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_if(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_ifContext = Comp_ifContext;

PythonParser.prototype.comp_if = function() {

    var localctx = new Comp_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PythonParser.RULE_comp_if);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.match(PythonParser.IF);
        this.state = 1089;
        this.test_nocond();
        this.state = 1091;
        _la = this._input.LA(1);
        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (PythonParser.IF - 13)) | (1 << (PythonParser.FOR - 13)) | (1 << (PythonParser.ASYNC - 13)))) !== 0)) {
            this.state = 1090;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Encoding_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_encoding_decl;
    return this;
}

Encoding_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Encoding_declContext.prototype.constructor = Encoding_declContext;

Encoding_declContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Encoding_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterEncoding_decl(this);
	}
};

Encoding_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitEncoding_decl(this);
	}
};

Encoding_declContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitEncoding_decl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Encoding_declContext = Encoding_declContext;

PythonParser.prototype.encoding_decl = function() {

    var localctx = new Encoding_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PythonParser.RULE_encoding_decl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1093;
        this.match(PythonParser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_expr;
    return this;
}

Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;

Yield_exprContext.prototype.yield_arg = function() {
    return this.getTypedRuleContext(Yield_argContext,0);
};

Yield_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_expr(this);
	}
};

Yield_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_expr(this);
	}
};

Yield_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_exprContext = Yield_exprContext;

PythonParser.prototype.yield_expr = function() {

    var localctx = new Yield_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PythonParser.RULE_yield_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1095;
        this.match(PythonParser.YIELD);
        this.state = 1097;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.FROM) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 1096;
            this.yield_arg();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_arg;
    return this;
}

Yield_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_argContext.prototype.constructor = Yield_argContext;

Yield_argContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Yield_argContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Yield_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_arg(this);
	}
};

Yield_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_arg(this);
	}
};

Yield_argContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_arg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_argContext = Yield_argContext;

PythonParser.prototype.yield_arg = function() {

    var localctx = new Yield_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PythonParser.RULE_yield_arg);
    try {
        this.state = 1102;
        switch(this._input.LA(1)) {
        case PythonParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1099;
            this.match(PythonParser.FROM);
            this.state = 1100;
            this.test();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1101;
            this.testlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PythonParser = PythonParser;

},{"./PythonListener":53,"./PythonVisitor":55,"antlr4/index":42}],55:[function(require,module,exports){
// Generated from src/interpreter/Python.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete generic visitor for a parse tree produced by PythonParser.

function PythonVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

PythonVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
PythonVisitor.prototype.constructor = PythonVisitor;

// Visit a parse tree produced by PythonParser#single_input.
PythonVisitor.prototype.visitSingle_input = function(ctx) {
};


// Visit a parse tree produced by PythonParser#file_input.
PythonVisitor.prototype.visitFile_input = function(ctx) {
};


// Visit a parse tree produced by PythonParser#eval_input.
PythonVisitor.prototype.visitEval_input = function(ctx) {
};


// Visit a parse tree produced by PythonParser#decorator.
PythonVisitor.prototype.visitDecorator = function(ctx) {
};


// Visit a parse tree produced by PythonParser#decorators.
PythonVisitor.prototype.visitDecorators = function(ctx) {
};


// Visit a parse tree produced by PythonParser#decorated.
PythonVisitor.prototype.visitDecorated = function(ctx) {
};


// Visit a parse tree produced by PythonParser#async_funcdef.
PythonVisitor.prototype.visitAsync_funcdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#funcdef.
PythonVisitor.prototype.visitFuncdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#parameters.
PythonVisitor.prototype.visitParameters = function(ctx) {
};


// Visit a parse tree produced by PythonParser#typedargslist.
PythonVisitor.prototype.visitTypedargslist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#tfpdef.
PythonVisitor.prototype.visitTfpdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#varargslist.
PythonVisitor.prototype.visitVarargslist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#vfpdef.
PythonVisitor.prototype.visitVfpdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#stmt.
PythonVisitor.prototype.visitStmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#simple_stmt.
PythonVisitor.prototype.visitSimple_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#small_stmt.
PythonVisitor.prototype.visitSmall_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#expr_stmt.
PythonVisitor.prototype.visitExpr_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#annassign.
PythonVisitor.prototype.visitAnnassign = function(ctx) {
};


// Visit a parse tree produced by PythonParser#testlist_star_expr.
PythonVisitor.prototype.visitTestlist_star_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#augassign.
PythonVisitor.prototype.visitAugassign = function(ctx) {
};


// Visit a parse tree produced by PythonParser#del_stmt.
PythonVisitor.prototype.visitDel_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#pass_stmt.
PythonVisitor.prototype.visitPass_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#flow_stmt.
PythonVisitor.prototype.visitFlow_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#break_stmt.
PythonVisitor.prototype.visitBreak_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#continue_stmt.
PythonVisitor.prototype.visitContinue_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#return_stmt.
PythonVisitor.prototype.visitReturn_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#yield_stmt.
PythonVisitor.prototype.visitYield_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#raise_stmt.
PythonVisitor.prototype.visitRaise_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#import_stmt.
PythonVisitor.prototype.visitImport_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#import_name.
PythonVisitor.prototype.visitImport_name = function(ctx) {
};


// Visit a parse tree produced by PythonParser#import_from.
PythonVisitor.prototype.visitImport_from = function(ctx) {
};


// Visit a parse tree produced by PythonParser#import_as_name.
PythonVisitor.prototype.visitImport_as_name = function(ctx) {
};


// Visit a parse tree produced by PythonParser#dotted_as_name.
PythonVisitor.prototype.visitDotted_as_name = function(ctx) {
};


// Visit a parse tree produced by PythonParser#import_as_names.
PythonVisitor.prototype.visitImport_as_names = function(ctx) {
};


// Visit a parse tree produced by PythonParser#dotted_as_names.
PythonVisitor.prototype.visitDotted_as_names = function(ctx) {
};


// Visit a parse tree produced by PythonParser#dotted_name.
PythonVisitor.prototype.visitDotted_name = function(ctx) {
};


// Visit a parse tree produced by PythonParser#global_stmt.
PythonVisitor.prototype.visitGlobal_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#nonlocal_stmt.
PythonVisitor.prototype.visitNonlocal_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#assert_stmt.
PythonVisitor.prototype.visitAssert_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#compound_stmt.
PythonVisitor.prototype.visitCompound_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#async_stmt.
PythonVisitor.prototype.visitAsync_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#if_stmt.
PythonVisitor.prototype.visitIf_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#while_stmt.
PythonVisitor.prototype.visitWhile_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#for_stmt.
PythonVisitor.prototype.visitFor_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#try_stmt.
PythonVisitor.prototype.visitTry_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#with_stmt.
PythonVisitor.prototype.visitWith_stmt = function(ctx) {
};


// Visit a parse tree produced by PythonParser#with_item.
PythonVisitor.prototype.visitWith_item = function(ctx) {
};


// Visit a parse tree produced by PythonParser#except_clause.
PythonVisitor.prototype.visitExcept_clause = function(ctx) {
};


// Visit a parse tree produced by PythonParser#suite.
PythonVisitor.prototype.visitSuite = function(ctx) {
};


// Visit a parse tree produced by PythonParser#test.
PythonVisitor.prototype.visitTest = function(ctx) {
};


// Visit a parse tree produced by PythonParser#test_nocond.
PythonVisitor.prototype.visitTest_nocond = function(ctx) {
};


// Visit a parse tree produced by PythonParser#lambdef.
PythonVisitor.prototype.visitLambdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#lambdef_nocond.
PythonVisitor.prototype.visitLambdef_nocond = function(ctx) {
};


// Visit a parse tree produced by PythonParser#or_test.
PythonVisitor.prototype.visitOr_test = function(ctx) {
};


// Visit a parse tree produced by PythonParser#and_test.
PythonVisitor.prototype.visitAnd_test = function(ctx) {
};


// Visit a parse tree produced by PythonParser#not_test.
PythonVisitor.prototype.visitNot_test = function(ctx) {
};


// Visit a parse tree produced by PythonParser#comparison.
PythonVisitor.prototype.visitComparison = function(ctx) {
};


// Visit a parse tree produced by PythonParser#comp_op.
PythonVisitor.prototype.visitComp_op = function(ctx) {
};


// Visit a parse tree produced by PythonParser#star_expr.
PythonVisitor.prototype.visitStar_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#expr.
PythonVisitor.prototype.visitExpr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#xor_expr.
PythonVisitor.prototype.visitXor_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#and_expr.
PythonVisitor.prototype.visitAnd_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#shift_expr.
PythonVisitor.prototype.visitShift_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#arith_expr.
PythonVisitor.prototype.visitArith_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#term.
PythonVisitor.prototype.visitTerm = function(ctx) {
};


// Visit a parse tree produced by PythonParser#factor.
PythonVisitor.prototype.visitFactor = function(ctx) {
};


// Visit a parse tree produced by PythonParser#power.
PythonVisitor.prototype.visitPower = function(ctx) {
};


// Visit a parse tree produced by PythonParser#atom_expr.
PythonVisitor.prototype.visitAtom_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#atom.
PythonVisitor.prototype.visitAtom = function(ctx) {
};


// Visit a parse tree produced by PythonParser#testlist_comp.
PythonVisitor.prototype.visitTestlist_comp = function(ctx) {
};


// Visit a parse tree produced by PythonParser#trailer.
PythonVisitor.prototype.visitTrailer = function(ctx) {
};


// Visit a parse tree produced by PythonParser#subscriptlist.
PythonVisitor.prototype.visitSubscriptlist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#subscript.
PythonVisitor.prototype.visitSubscript = function(ctx) {
};


// Visit a parse tree produced by PythonParser#sliceop.
PythonVisitor.prototype.visitSliceop = function(ctx) {
};


// Visit a parse tree produced by PythonParser#exprlist.
PythonVisitor.prototype.visitExprlist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#testlist.
PythonVisitor.prototype.visitTestlist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#dictorsetmaker.
PythonVisitor.prototype.visitDictorsetmaker = function(ctx) {
};


// Visit a parse tree produced by PythonParser#classdef.
PythonVisitor.prototype.visitClassdef = function(ctx) {
};


// Visit a parse tree produced by PythonParser#arglist.
PythonVisitor.prototype.visitArglist = function(ctx) {
};


// Visit a parse tree produced by PythonParser#argument.
PythonVisitor.prototype.visitArgument = function(ctx) {
};


// Visit a parse tree produced by PythonParser#comp_iter.
PythonVisitor.prototype.visitComp_iter = function(ctx) {
};


// Visit a parse tree produced by PythonParser#comp_for.
PythonVisitor.prototype.visitComp_for = function(ctx) {
};


// Visit a parse tree produced by PythonParser#comp_if.
PythonVisitor.prototype.visitComp_if = function(ctx) {
};


// Visit a parse tree produced by PythonParser#encoding_decl.
PythonVisitor.prototype.visitEncoding_decl = function(ctx) {
};


// Visit a parse tree produced by PythonParser#yield_expr.
PythonVisitor.prototype.visitYield_expr = function(ctx) {
};


// Visit a parse tree produced by PythonParser#yield_arg.
PythonVisitor.prototype.visitYield_arg = function(ctx) {
};



exports.PythonVisitor = PythonVisitor;
},{"antlr4/index":42}],56:[function(require,module,exports){
module.exports = function(outerScope, owner) {

    var localSymbolTable = {};

    this.putSymbol = function(key, value) {

        if (typeof value !== 'object') {
            throw new Error(`invalid table symbol "${key}": ${value}`);
        }

        localSymbolTable[key] = value;
    };

    this.getSymbol = function(key) {
        if (key in localSymbolTable) {
            return localSymbolTable[key]
        } else if (outerScope) {
            return outerScope.getSymbol(key);
        } else {
            throw new Error(`can't find symbol "${key}"`);
        }
    };

    this.hasSymbol = function(key) {
        return (key in localSymbolTable) || !!(outerScope && outerScope.hasSymbol(key))
    };

    this.print = function() {
        console.log(JSON.stringify(localSymbolTable, null, ' '));
    };
};
},{}],57:[function(require,module,exports){
(function (global){
const antlr4 = require("antlr4/index");
const ASTBuilder = require('./ASTBuilder');

global.tracer = function(sourceCode, destStatement) {

    const Lexer = require("./PythonLexer");
    const Parser = require("./PythonParser");

    const chars = new antlr4.InputStream(sourceCode + '\n' + destStatement + '\n');
    const lexer = new Lexer.PythonLexer(chars);
    const tokens  = new antlr4.CommonTokenStream(lexer);
    const parser = new Parser.PythonParser(tokens);
    const builder = new ASTBuilder();

    parser.buildParseTrees = true;

    const program = builder.buildProgram(parser.file_input());

    const libraryFunctions = require('./LibraryFunctions');

    Object.keys(libraryFunctions).forEach(
        name => program.include(name, libraryFunctions[name])
    );

    return program.reduce();
};
























}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./ASTBuilder":49,"./LibraryFunctions":51,"./PythonLexer":52,"./PythonParser":54,"antlr4/index":42}]},{},[57])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
