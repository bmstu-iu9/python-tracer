// Generated from Python.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PythonListener = require('./PythonListener').PythonListener;
var PythonVisitor = require('./PythonVisitor').PythonVisitor;

var grammarFileName = "Python.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3e\u0452\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4",
    "\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t",
    "\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27",
    "\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4",
    "\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t",
    "\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t",
    "\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t",
    "8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC",
    "\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4",
    "O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\3\2\3\2\3\2\3\2",
    "\3\2\5\2\u00b4\n\2\3\3\3\3\7\3\u00b8\n\3\f\3\16\3\u00bb\13\3\3\3\3\3",
    "\3\4\3\4\7\4\u00c1\n\4\f\4\16\4\u00c4\13\4\3\4\3\4\3\5\3\5\3\5\3\5\5",
    "\5\u00cc\n\5\3\5\5\5\u00cf\n\5\3\5\3\5\3\6\6\6\u00d4\n\6\r\6\16\6\u00d5",
    "\3\7\3\7\3\7\3\7\5\7\u00dc\n\7\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\5\t\u00e6",
    "\n\t\3\t\3\t\3\t\3\n\3\n\5\n\u00ed\n\n\3\n\3\n\3\13\3\13\3\13\5\13\u00f4",
    "\n\13\3\13\3\13\3\13\3\13\5\13\u00fa\n\13\7\13\u00fc\n\13\f\13\16\13",
    "\u00ff\13\13\3\13\3\13\3\13\5\13\u0104\n\13\3\13\3\13\3\13\3\13\5\13",
    "\u010a\n\13\7\13\u010c\n\13\f\13\16\13\u010f\13\13\3\13\3\13\3\13\3",
    "\13\5\13\u0115\n\13\5\13\u0117\n\13\5\13\u0119\n\13\3\13\3\13\3\13\5",
    "\13\u011e\n\13\5\13\u0120\n\13\5\13\u0122\n\13\3\13\3\13\5\13\u0126",
    "\n\13\3\13\3\13\3\13\3\13\5\13\u012c\n\13\7\13\u012e\n\13\f\13\16\13",
    "\u0131\13\13\3\13\3\13\3\13\3\13\5\13\u0137\n\13\5\13\u0139\n\13\5\13",
    "\u013b\n\13\3\13\3\13\3\13\5\13\u0140\n\13\5\13\u0142\n\13\3\f\3\f\3",
    "\f\5\f\u0147\n\f\3\r\3\r\3\r\5\r\u014c\n\r\3\r\3\r\3\r\3\r\5\r\u0152",
    "\n\r\7\r\u0154\n\r\f\r\16\r\u0157\13\r\3\r\3\r\3\r\5\r\u015c\n\r\3\r",
    "\3\r\3\r\3\r\5\r\u0162\n\r\7\r\u0164\n\r\f\r\16\r\u0167\13\r\3\r\3\r",
    "\3\r\3\r\5\r\u016d\n\r\5\r\u016f\n\r\5\r\u0171\n\r\3\r\3\r\3\r\5\r\u0176",
    "\n\r\5\r\u0178\n\r\5\r\u017a\n\r\3\r\3\r\5\r\u017e\n\r\3\r\3\r\3\r\3",
    "\r\5\r\u0184\n\r\7\r\u0186\n\r\f\r\16\r\u0189\13\r\3\r\3\r\3\r\3\r\5",
    "\r\u018f\n\r\5\r\u0191\n\r\5\r\u0193\n\r\3\r\3\r\3\r\5\r\u0198\n\r\5",
    "\r\u019a\n\r\3\16\3\16\3\17\3\17\5\17\u01a0\n\17\3\20\3\20\3\20\7\20",
    "\u01a5\n\20\f\20\16\20\u01a8\13\20\3\20\5\20\u01ab\n\20\3\20\3\20\3",
    "\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01b7\n\21\3\22\3\22\3\22",
    "\3\22\3\22\5\22\u01be\n\22\3\22\3\22\3\22\5\22\u01c3\n\22\7\22\u01c5",
    "\n\22\f\22\16\22\u01c8\13\22\5\22\u01ca\n\22\3\23\3\23\3\23\3\23\5\23",
    "\u01d0\n\23\3\24\3\24\5\24\u01d4\n\24\3\24\3\24\3\24\5\24\u01d9\n\24",
    "\7\24\u01db\n\24\f\24\16\24\u01de\13\24\3\24\5\24\u01e1\n\24\3\25\3",
    "\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\30\3\30\3\30\5\30\u01ef\n\30",
    "\3\31\3\31\3\32\3\32\3\33\3\33\5\33\u01f7\n\33\3\34\3\34\3\35\3\35\3",
    "\35\3\35\5\35\u01ff\n\35\5\35\u0201\n\35\3\36\3\36\5\36\u0205\n\36\3",
    "\37\3\37\3\37\3 \3 \7 \u020c\n \f \16 \u020f\13 \3 \3 \6 \u0213\n \r",
    " \16 \u0214\5 \u0217\n \3 \3 \3 \3 \3 \3 \3 \5 \u0220\n \3!\3!\3!\5",
    "!\u0225\n!\3\"\3\"\3\"\5\"\u022a\n\"\3#\3#\3#\7#\u022f\n#\f#\16#\u0232",
    "\13#\3#\5#\u0235\n#\3$\3$\3$\7$\u023a\n$\f$\16$\u023d\13$\3%\3%\3%\7",
    "%\u0242\n%\f%\16%\u0245\13%\3&\3&\3&\3&\7&\u024b\n&\f&\16&\u024e\13",
    "&\3\'\3\'\3\'\3\'\7\'\u0254\n\'\f\'\16\'\u0257\13\'\3(\3(\3(\3(\5(\u025d",
    "\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0268\n)\3*\3*\3*\3*\5*\u026e\n*\3",
    "+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u0279\n+\f+\16+\u027c\13+\3+\3+\3+\5+\u0281",
    "\n+\3,\3,\3,\3,\3,\3,\3,\5,\u028a\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0295",
    "\n-\3.\3.\3.\3.\3.\3.\3.\6.\u029e\n.\r.\16.\u029f\3.\3.\3.\5.\u02a5",
    "\n.\3.\3.\3.\5.\u02aa\n.\3.\3.\3.\5.\u02af\n.\3/\3/\3/\3/\7/\u02b5\n",
    "/\f/\16/\u02b8\13/\3/\3/\3/\3\60\3\60\3\60\5\60\u02c0\n\60\3\61\3\61",
    "\3\61\3\61\5\61\u02c6\n\61\5\61\u02c8\n\61\3\62\3\62\3\62\3\62\6\62",
    "\u02ce\n\62\r\62\16\62\u02cf\3\62\3\62\5\62\u02d4\n\62\3\63\3\63\3\63",
    "\3\63\3\63\3\63\5\63\u02dc\n\63\3\63\5\63\u02df\n\63\3\64\3\64\5\64",
    "\u02e3\n\64\3\65\3\65\5\65\u02e7\n\65\3\65\3\65\3\65\3\66\3\66\5\66",
    "\u02ee\n\66\3\66\3\66\3\66\3\67\3\67\3\67\7\67\u02f6\n\67\f\67\16\67",
    "\u02f9\13\67\38\38\38\78\u02fe\n8\f8\168\u0301\138\39\39\39\59\u0306",
    "\n9\3:\3:\3:\3:\7:\u030c\n:\f:\16:\u030f\13:\3;\3;\3;\3;\3;\3;\3;\3",
    ";\3;\3;\3;\3;\3;\5;\u031e\n;\3<\3<\3<\3=\3=\3=\7=\u0326\n=\f=\16=\u0329",
    "\13=\3>\3>\3>\7>\u032e\n>\f>\16>\u0331\13>\3?\3?\3?\7?\u0336\n?\f?\16",
    "?\u0339\13?\3@\3@\3@\7@\u033e\n@\f@\16@\u0341\13@\3A\3A\3A\7A\u0346",
    "\nA\fA\16A\u0349\13A\3B\3B\3B\7B\u034e\nB\fB\16B\u0351\13B\3C\3C\3C",
    "\5C\u0356\nC\3D\3D\3D\5D\u035b\nD\3E\5E\u035e\nE\3E\3E\7E\u0362\nE\f",
    "E\16E\u0365\13E\3F\3F\3F\5F\u036a\nF\3F\3F\3F\5F\u036f\nF\3F\3F\3F\5",
    "F\u0374\nF\3F\3F\3F\3F\6F\u037a\nF\rF\16F\u037b\3F\3F\3F\3F\5F\u0382",
    "\nF\3G\3G\5G\u0386\nG\3G\3G\3G\3G\5G\u038c\nG\7G\u038e\nG\fG\16G\u0391",
    "\13G\3G\5G\u0394\nG\5G\u0396\nG\3H\3H\5H\u039a\nH\3H\3H\3H\3H\3H\3H",
    "\3H\5H\u03a3\nH\3I\3I\3I\7I\u03a8\nI\fI\16I\u03ab\13I\3I\5I\u03ae\n",
    "I\3J\3J\5J\u03b2\nJ\3J\3J\5J\u03b6\nJ\3J\5J\u03b9\nJ\5J\u03bb\nJ\3K",
    "\3K\5K\u03bf\nK\3L\3L\5L\u03c3\nL\3L\3L\3L\5L\u03c8\nL\7L\u03ca\nL\f",
    "L\16L\u03cd\13L\3L\5L\u03d0\nL\3M\3M\3M\7M\u03d5\nM\fM\16M\u03d8\13",
    "M\3M\5M\u03db\nM\3N\3N\3N\3N\3N\3N\5N\u03e3\nN\3N\3N\3N\3N\3N\3N\3N",
    "\3N\5N\u03ed\nN\7N\u03ef\nN\fN\16N\u03f2\13N\3N\5N\u03f5\nN\5N\u03f7",
    "\nN\3N\3N\5N\u03fb\nN\3N\3N\3N\3N\5N\u0401\nN\7N\u0403\nN\fN\16N\u0406",
    "\13N\3N\5N\u0409\nN\5N\u040b\nN\5N\u040d\nN\3O\3O\3O\3O\5O\u0413\nO",
    "\3O\5O\u0416\nO\3O\3O\3O\3P\3P\3P\7P\u041e\nP\fP\16P\u0421\13P\3P\5",
    "P\u0424\nP\3Q\3Q\5Q\u0428\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0432\nQ\3R",
    "\3R\5R\u0436\nR\3S\5S\u0439\nS\3S\3S\3S\3S\3S\5S\u0440\nS\3T\3T\3T\5",
    "T\u0445\nT\3U\3U\3V\3V\5V\u044b\nV\3W\3W\3W\5W\u0450\nW\3W\2\2X\2\4",
    "\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJL",
    "NPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c",
    "\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4",
    "\u00a6\u00a8\u00aa\u00ac\2\b\3\2Ua\3\2\63\64\3\2BC\3\2DE\5\2\65\65F",
    "HSS\4\2DEII\u04cf\2\u00b3\3\2\2\2\4\u00b9\3\2\2\2\6\u00be\3\2\2\2\b",
    "\u00c7\3\2\2\2\n\u00d3\3\2\2\2\f\u00d7\3\2\2\2\16\u00dd\3\2\2\2\20\u00e0",
    "\3\2\2\2\22\u00ea\3\2\2\2\24\u0141\3\2\2\2\26\u0143\3\2\2\2\30\u0199",
    "\3\2\2\2\32\u019b\3\2\2\2\34\u019f\3\2\2\2\36\u01a1\3\2\2\2 \u01b6\3",
    "\2\2\2\"\u01b8\3\2\2\2$\u01cb\3\2\2\2&\u01d3\3\2\2\2(\u01e2\3\2\2\2",
    "*\u01e4\3\2\2\2,\u01e7\3\2\2\2.\u01ee\3\2\2\2\60\u01f0\3\2\2\2\62\u01f2",
    "\3\2\2\2\64\u01f4\3\2\2\2\66\u01f8\3\2\2\28\u01fa\3\2\2\2:\u0204\3\2",
    "\2\2<\u0206\3\2\2\2>\u0209\3\2\2\2@\u0221\3\2\2\2B\u0226\3\2\2\2D\u022b",
    "\3\2\2\2F\u0236\3\2\2\2H\u023e\3\2\2\2J\u0246\3\2\2\2L\u024f\3\2\2\2",
    "N\u0258\3\2\2\2P\u0267\3\2\2\2R\u0269\3\2\2\2T\u026f\3\2\2\2V\u0282",
    "\3\2\2\2X\u028b\3\2\2\2Z\u0296\3\2\2\2\\\u02b0\3\2\2\2^\u02bc\3\2\2",
    "\2`\u02c1\3\2\2\2b\u02d3\3\2\2\2d\u02de\3\2\2\2f\u02e2\3\2\2\2h\u02e4",
    "\3\2\2\2j\u02eb\3\2\2\2l\u02f2\3\2\2\2n\u02fa\3\2\2\2p\u0305\3\2\2\2",
    "r\u0307\3\2\2\2t\u031d\3\2\2\2v\u031f\3\2\2\2x\u0322\3\2\2\2z\u032a",
    "\3\2\2\2|\u0332\3\2\2\2~\u033a\3\2\2\2\u0080\u0342\3\2\2\2\u0082\u034a",
    "\3\2\2\2\u0084\u0355\3\2\2\2\u0086\u0357\3\2\2\2\u0088\u035d\3\2\2\2",
    "\u008a\u0381\3\2\2\2\u008c\u0385\3\2\2\2\u008e\u03a2\3\2\2\2\u0090\u03a4",
    "\3\2\2\2\u0092\u03ba\3\2\2\2\u0094\u03bc\3\2\2\2\u0096\u03c2\3\2\2\2",
    "\u0098\u03d1\3\2\2\2\u009a\u040c\3\2\2\2\u009c\u040e\3\2\2\2\u009e\u041a",
    "\3\2\2\2\u00a0\u0431\3\2\2\2\u00a2\u0435\3\2\2\2\u00a4\u0438\3\2\2\2",
    "\u00a6\u0441\3\2\2\2\u00a8\u0446\3\2\2\2\u00aa\u0448\3\2\2\2\u00ac\u044f",
    "\3\2\2\2\u00ae\u00b4\7)\2\2\u00af\u00b4\5\36\20\2\u00b0\u00b1\5P)\2",
    "\u00b1\u00b2\7)\2\2\u00b2\u00b4\3\2\2\2\u00b3\u00ae\3\2\2\2\u00b3\u00af",
    "\3\2\2\2\u00b3\u00b0\3\2\2\2\u00b4\3\3\2\2\2\u00b5\u00b8\7)\2\2\u00b6",
    "\u00b8\5\34\17\2\u00b7\u00b5\3\2\2\2\u00b7\u00b6\3\2\2\2\u00b8\u00bb",
    "\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bc\3\2\2\2",
    "\u00bb\u00b9\3\2\2\2\u00bc\u00bd\7\2\2\3\u00bd\5\3\2\2\2\u00be\u00c2",
    "\5\u0098M\2\u00bf\u00c1\7)\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c4\3\2\2",
    "\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5\3\2\2\2\u00c4",
    "\u00c2\3\2\2\2\u00c5\u00c6\7\2\2\3\u00c6\7\3\2\2\2\u00c7\u00c8\7S\2",
    "\2\u00c8\u00ce\5H%\2\u00c9\u00cb\7\66\2\2\u00ca\u00cc\5\u009eP\2\u00cb",
    "\u00ca\3\2\2\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00cf\7",
    "\67\2\2\u00ce\u00c9\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d0\3\2\2\2",
    "\u00d0\u00d1\7)\2\2\u00d1\t\3\2\2\2\u00d2\u00d4\5\b\5\2\u00d3\u00d2",
    "\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2",
    "\u00d6\13\3\2\2\2\u00d7\u00db\5\n\6\2\u00d8\u00dc\5\u009cO\2\u00d9\u00dc",
    "\5\20\t\2\u00da\u00dc\5\16\b\2\u00db\u00d8\3\2\2\2\u00db\u00d9\3\2\2",
    "\2\u00db\u00da\3\2\2\2\u00dc\r\3\2\2\2\u00dd\u00de\7\'\2\2\u00de\u00df",
    "\5\20\t\2\u00df\17\3\2\2\2\u00e0\u00e1\7\6\2\2\u00e1\u00e2\7*\2\2\u00e2",
    "\u00e5\5\22\n\2\u00e3\u00e4\7T\2\2\u00e4\u00e6\5d\63\2\u00e5\u00e3\3",
    "\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u00e8\79\2\2\u00e8",
    "\u00e9\5b\62\2\u00e9\21\3\2\2\2\u00ea\u00ec\7\66\2\2\u00eb\u00ed\5\24",
    "\13\2\u00ec\u00eb\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee",
    "\u00ef\7\67\2\2\u00ef\23\3\2\2\2\u00f0\u00f3\5\26\f\2\u00f1\u00f2\7",
    "<\2\2\u00f2\u00f4\5d\63\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4",
    "\u00fd\3\2\2\2\u00f5\u00f6\78\2\2\u00f6\u00f9\5\26\f\2\u00f7\u00f8\7",
    "<\2\2\u00f8\u00fa\5d\63\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa",
    "\u00fc\3\2\2\2\u00fb\u00f5\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3",
    "\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0121\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100",
    "\u011f\78\2\2\u0101\u0103\7\65\2\2\u0102\u0104\5\26\f\2\u0103\u0102",
    "\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u010d\3\2\2\2\u0105\u0106\78\2\2",
    "\u0106\u0109\5\26\f\2\u0107\u0108\7<\2\2\u0108\u010a\5d\63\2\u0109\u0107",
    "\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2\u010b\u0105\3\2\2\2",
    "\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0118",
    "\3\2\2\2\u010f\u010d\3\2\2\2\u0110\u0116\78\2\2\u0111\u0112\7;\2\2\u0112",
    "\u0114\5\26\f\2\u0113\u0115\78\2\2\u0114\u0113\3\2\2\2\u0114\u0115\3",
    "\2\2\2\u0115\u0117\3\2\2\2\u0116\u0111\3\2\2\2\u0116\u0117\3\2\2\2\u0117",
    "\u0119\3\2\2\2\u0118\u0110\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0120\3",
    "\2\2\2\u011a\u011b\7;\2\2\u011b\u011d\5\26\f\2\u011c\u011e\78\2\2\u011d",
    "\u011c\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u0101\3",
    "\2\2\2\u011f\u011a\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121",
    "\u0100\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0142\3\2\2\2\u0123\u0125\7",
    "\65\2\2\u0124\u0126\5\26\f\2\u0125\u0124\3\2\2\2\u0125\u0126\3\2\2\2",
    "\u0126\u012f\3\2\2\2\u0127\u0128\78\2\2\u0128\u012b\5\26\f\2\u0129\u012a",
    "\7<\2\2\u012a\u012c\5d\63\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2",
    "\u012c\u012e\3\2\2\2\u012d\u0127\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d",
    "\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u013a\3\2\2\2\u0131\u012f\3\2\2\2",
    "\u0132\u0138\78\2\2\u0133\u0134\7;\2\2\u0134\u0136\5\26\f\2\u0135\u0137",
    "\78\2\2\u0136\u0135\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0139\3\2\2\2",
    "\u0138\u0133\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0132",
    "\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u0142\3\2\2\2\u013c\u013d\7;\2\2",
    "\u013d\u013f\5\26\f\2\u013e\u0140\78\2\2\u013f\u013e\3\2\2\2\u013f\u0140",
    "\3\2\2\2\u0140\u0142\3\2\2\2\u0141\u00f0\3\2\2\2\u0141\u0123\3\2\2\2",
    "\u0141\u013c\3\2\2\2\u0142\25\3\2\2\2\u0143\u0146\7*\2\2\u0144\u0145",
    "\79\2\2\u0145\u0147\5d\63\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2",
    "\u0147\27\3\2\2\2\u0148\u014b\5\32\16\2\u0149\u014a\7<\2\2\u014a\u014c",
    "\5d\63\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u0155\3\2\2\2",
    "\u014d\u014e\78\2\2\u014e\u0151\5\32\16\2\u014f\u0150\7<\2\2\u0150\u0152",
    "\5d\63\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\3\2\2\2",
    "\u0153\u014d\3\2\2\2\u0154\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0155\u0156",
    "\3\2\2\2\u0156\u0179\3\2\2\2\u0157\u0155\3\2\2\2\u0158\u0177\78\2\2",
    "\u0159\u015b\7\65\2\2\u015a\u015c\5\32\16\2\u015b\u015a\3\2\2\2\u015b",
    "\u015c\3\2\2\2\u015c\u0165\3\2\2\2\u015d\u015e\78\2\2\u015e\u0161\5",
    "\32\16\2\u015f\u0160\7<\2\2\u0160\u0162\5d\63\2\u0161\u015f\3\2\2\2",
    "\u0161\u0162\3\2\2\2\u0162\u0164\3\2\2\2\u0163\u015d\3\2\2\2\u0164\u0167",
    "\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0170\3\2\2\2",
    "\u0167\u0165\3\2\2\2\u0168\u016e\78\2\2\u0169\u016a\7;\2\2\u016a\u016c",
    "\5\32\16\2\u016b\u016d\78\2\2\u016c\u016b\3\2\2\2\u016c\u016d\3\2\2",
    "\2\u016d\u016f\3\2\2\2\u016e\u0169\3\2\2\2\u016e\u016f\3\2\2\2\u016f",
    "\u0171\3\2\2\2\u0170\u0168\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0178\3",
    "\2\2\2\u0172\u0173\7;\2\2\u0173\u0175\5\32\16\2\u0174\u0176\78\2\2\u0175",
    "\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0178\3\2\2\2\u0177\u0159\3",
    "\2\2\2\u0177\u0172\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u017a\3\2\2\2\u0179",
    "\u0158\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u019a\3\2\2\2\u017b\u017d\7",
    "\65\2\2\u017c\u017e\5\32\16\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2",
    "\2\u017e\u0187\3\2\2\2\u017f\u0180\78\2\2\u0180\u0183\5\32\16\2\u0181",
    "\u0182\7<\2\2\u0182\u0184\5d\63\2\u0183\u0181\3\2\2\2\u0183\u0184\3",
    "\2\2\2\u0184\u0186\3\2\2\2\u0185\u017f\3\2\2\2\u0186\u0189\3\2\2\2\u0187",
    "\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0192\3\2\2\2\u0189\u0187\3",
    "\2\2\2\u018a\u0190\78\2\2\u018b\u018c\7;\2\2\u018c\u018e\5\32\16\2\u018d",
    "\u018f\78\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0191\3",
    "\2\2\2\u0190\u018b\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193\3\2\2\2\u0192",
    "\u018a\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u019a\3\2\2\2\u0194\u0195\7",
    ";\2\2\u0195\u0197\5\32\16\2\u0196\u0198\78\2\2\u0197\u0196\3\2\2\2\u0197",
    "\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u0148\3\2\2\2\u0199\u017b\3",
    "\2\2\2\u0199\u0194\3\2\2\2\u019a\31\3\2\2\2\u019b\u019c\7*\2\2\u019c",
    "\33\3\2\2\2\u019d\u01a0\5\36\20\2\u019e\u01a0\5P)\2\u019f\u019d\3\2",
    "\2\2\u019f\u019e\3\2\2\2\u01a0\35\3\2\2\2\u01a1\u01a6\5 \21\2\u01a2",
    "\u01a3\7:\2\2\u01a3\u01a5\5 \21\2\u01a4\u01a2\3\2\2\2\u01a5\u01a8\3",
    "\2\2\2\u01a6\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8",
    "\u01a6\3\2\2\2\u01a9\u01ab\7:\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3",
    "\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\7)\2\2\u01ad\37\3\2\2\2\u01ae",
    "\u01b7\5\"\22\2\u01af\u01b7\5*\26\2\u01b0\u01b7\5,\27\2\u01b1\u01b7",
    "\5.\30\2\u01b2\u01b7\5:\36\2\u01b3\u01b7\5J&\2\u01b4\u01b7\5L\'\2\u01b5",
    "\u01b7\5N(\2\u01b6\u01ae\3\2\2\2\u01b6\u01af\3\2\2\2\u01b6\u01b0\3\2",
    "\2\2\u01b6\u01b1\3\2\2\2\u01b6\u01b2\3\2\2\2\u01b6\u01b3\3\2\2\2\u01b6",
    "\u01b4\3\2\2\2\u01b6\u01b5\3\2\2\2\u01b7!\3\2\2\2\u01b8\u01c9\5&\24",
    "\2\u01b9\u01ca\5$\23\2\u01ba\u01bd\5(\25\2\u01bb\u01be\5\u00aaV\2\u01bc",
    "\u01be\5\u0098M\2\u01bd\u01bb\3\2\2\2\u01bd\u01bc\3\2\2\2\u01be\u01ca",
    "\3\2\2\2\u01bf\u01c2\7<\2\2\u01c0\u01c3\5\u00aaV\2\u01c1\u01c3\5&\24",
    "\2\u01c2\u01c0\3\2\2\2\u01c2\u01c1\3\2\2\2\u01c3\u01c5\3\2\2\2\u01c4",
    "\u01bf\3\2\2\2\u01c5\u01c8\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3",
    "\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c9\u01b9\3\2\2\2\u01c9",
    "\u01ba\3\2\2\2\u01c9\u01c6\3\2\2\2\u01ca#\3\2\2\2\u01cb\u01cc\79\2\2",
    "\u01cc\u01cf\5d\63\2\u01cd\u01ce\7<\2\2\u01ce\u01d0\5d\63\2\u01cf\u01cd",
    "\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0%\3\2\2\2\u01d1\u01d4\5d\63\2\u01d2",
    "\u01d4\5v<\2\u01d3\u01d1\3\2\2\2\u01d3\u01d2\3\2\2\2\u01d4\u01dc\3\2",
    "\2\2\u01d5\u01d8\78\2\2\u01d6\u01d9\5d\63\2\u01d7\u01d9\5v<\2\u01d8",
    "\u01d6\3\2\2\2\u01d8\u01d7\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01d5\3",
    "\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd",
    "\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2\u01df\u01e1\78\2\2\u01e0\u01df\3",
    "\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\'\3\2\2\2\u01e2\u01e3\t\2\2\2\u01e3",
    ")\3\2\2\2\u01e4\u01e5\7#\2\2\u01e5\u01e6\5\u0096L\2\u01e6+\3\2\2\2\u01e7",
    "\u01e8\7$\2\2\u01e8-\3\2\2\2\u01e9\u01ef\5\60\31\2\u01ea\u01ef\5\62",
    "\32\2\u01eb\u01ef\5\64\33\2\u01ec\u01ef\58\35\2\u01ed\u01ef\5\66\34",
    "\2\u01ee\u01e9\3\2\2\2\u01ee\u01ea\3\2\2\2\u01ee\u01eb\3\2\2\2\u01ee",
    "\u01ec\3\2\2\2\u01ee\u01ed\3\2\2\2\u01ef/\3\2\2\2\u01f0\u01f1\7&\2\2",
    "\u01f1\61\3\2\2\2\u01f2\u01f3\7%\2\2\u01f3\63\3\2\2\2\u01f4\u01f6\7",
    "\7\2\2\u01f5\u01f7\5\u0098M\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2",
    "\2\u01f7\65\3\2\2\2\u01f8\u01f9\5\u00aaV\2\u01f9\67\3\2\2\2\u01fa\u0200",
    "\7\b\2\2\u01fb\u01fe\5d\63\2\u01fc\u01fd\7\t\2\2\u01fd\u01ff\5d\63\2",
    "\u01fe\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2\u0200\u01fb",
    "\3\2\2\2\u0200\u0201\3\2\2\2\u02019\3\2\2\2\u0202\u0205\5<\37\2\u0203",
    "\u0205\5> \2\u0204\u0202\3\2\2\2\u0204\u0203\3\2\2\2\u0205;\3\2\2\2",
    "\u0206\u0207\7\n\2\2\u0207\u0208\5F$\2\u0208=\3\2\2\2\u0209\u0216\7",
    "\t\2\2\u020a\u020c\t\3\2\2\u020b\u020a\3\2\2\2\u020c\u020f\3\2\2\2\u020d",
    "\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u020d\3",
    "\2\2\2\u0210\u0217\5H%\2\u0211\u0213\t\3\2\2\u0212\u0211\3\2\2\2\u0213",
    "\u0214\3\2\2\2\u0214\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0217\3",
    "\2\2\2\u0216\u020d\3\2\2\2\u0216\u0212\3\2\2\2\u0217\u0218\3\2\2\2\u0218",
    "\u021f\7\n\2\2\u0219\u0220\7\65\2\2\u021a\u021b\7\66\2\2\u021b\u021c",
    "\5D#\2\u021c\u021d\7\67\2\2\u021d\u0220\3\2\2\2\u021e\u0220\5D#\2\u021f",
    "\u0219\3\2\2\2\u021f\u021a\3\2\2\2\u021f\u021e\3\2\2\2\u0220?\3\2\2",
    "\2\u0221\u0224\7*\2\2\u0222\u0223\7\13\2\2\u0223\u0225\7*\2\2\u0224",
    "\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225A\3\2\2\2\u0226\u0229\5H%\2",
    "\u0227\u0228\7\13\2\2\u0228\u022a\7*\2\2\u0229\u0227\3\2\2\2\u0229\u022a",
    "\3\2\2\2\u022aC\3\2\2\2\u022b\u0230\5@!\2\u022c\u022d\78\2\2\u022d\u022f",
    "\5@!\2\u022e\u022c\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e\3\2\2\2\u0230",
    "\u0231\3\2\2\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u0235\7",
    "8\2\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2\2\2\u0235E\3\2\2\2\u0236\u023b",
    "\5B\"\2\u0237\u0238\78\2\2\u0238\u023a\5B\"\2\u0239\u0237\3\2\2\2\u023a",
    "\u023d\3\2\2\2\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023cG\3\2\2",
    "\2\u023d\u023b\3\2\2\2\u023e\u0243\7*\2\2\u023f\u0240\7\63\2\2\u0240",
    "\u0242\7*\2\2\u0241\u023f\3\2\2\2\u0242\u0245\3\2\2\2\u0243\u0241\3",
    "\2\2\2\u0243\u0244\3\2\2\2\u0244I\3\2\2\2\u0245\u0243\3\2\2\2\u0246",
    "\u0247\7\f\2\2\u0247\u024c\7*\2\2\u0248\u0249\78\2\2\u0249\u024b\7*",
    "\2\2\u024a\u0248\3\2\2\2\u024b\u024e\3\2\2\2\u024c\u024a\3\2\2\2\u024c",
    "\u024d\3\2\2\2\u024dK\3\2\2\2\u024e\u024c\3\2\2\2\u024f\u0250\7\r\2",
    "\2\u0250\u0255\7*\2\2\u0251\u0252\78\2\2\u0252\u0254\7*\2\2\u0253\u0251",
    "\3\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256\3\2\2\2",
    "\u0256M\3\2\2\2\u0257\u0255\3\2\2\2\u0258\u0259\7\16\2\2\u0259\u025c",
    "\5d\63\2\u025a\u025b\78\2\2\u025b\u025d\5d\63\2\u025c\u025a\3\2\2\2",
    "\u025c\u025d\3\2\2\2\u025dO\3\2\2\2\u025e\u0268\5T+\2\u025f\u0268\5",
    "V,\2\u0260\u0268\5X-\2\u0261\u0268\5Z.\2\u0262\u0268\5\\/\2\u0263\u0268",
    "\5\20\t\2\u0264\u0268\5\u009cO\2\u0265\u0268\5\f\7\2\u0266\u0268\5R",
    "*\2\u0267\u025e\3\2\2\2\u0267\u025f\3\2\2\2\u0267\u0260\3\2\2\2\u0267",
    "\u0261\3\2\2\2\u0267\u0262\3\2\2\2\u0267\u0263\3\2\2\2\u0267\u0264\3",
    "\2\2\2\u0267\u0265\3\2\2\2\u0267\u0266\3\2\2\2\u0268Q\3\2\2\2\u0269",
    "\u026d\7\'\2\2\u026a\u026e\5\20\t\2\u026b\u026e\5\\/\2\u026c\u026e\5",
    "X-\2\u026d\u026a\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026c\3\2\2\2\u026e",
    "S\3\2\2\2\u026f\u0270\7\17\2\2\u0270\u0271\5d\63\2\u0271\u0272\79\2",
    "\2\u0272\u027a\5b\62\2\u0273\u0274\7\20\2\2\u0274\u0275\5d\63\2\u0275",
    "\u0276\79\2\2\u0276\u0277\5b\62\2\u0277\u0279\3\2\2\2\u0278\u0273\3",
    "\2\2\2\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3\2\2\2\u027b",
    "\u0280\3\2\2\2\u027c\u027a\3\2\2\2\u027d\u027e\7\21\2\2\u027e\u027f",
    "\79\2\2\u027f\u0281\5b\62\2\u0280\u027d\3\2\2\2\u0280\u0281\3\2\2\2",
    "\u0281U\3\2\2\2\u0282\u0283\7\22\2\2\u0283\u0284\5d\63\2\u0284\u0285",
    "\79\2\2\u0285\u0289\5b\62\2\u0286\u0287\7\21\2\2\u0287\u0288\79\2\2",
    "\u0288\u028a\5b\62\2\u0289\u0286\3\2\2\2\u0289\u028a\3\2\2\2\u028aW",
    "\3\2\2\2\u028b\u028c\7\23\2\2\u028c\u028d\5\u0096L\2\u028d\u028e\7\24",
    "\2\2\u028e\u028f\5\u0098M\2\u028f\u0290\79\2\2\u0290\u0294\5b\62\2\u0291",
    "\u0292\7\21\2\2\u0292\u0293\79\2\2\u0293\u0295\5b\62\2\u0294\u0291\3",
    "\2\2\2\u0294\u0295\3\2\2\2\u0295Y\3\2\2\2\u0296\u0297\7\25\2\2\u0297",
    "\u0298\79\2\2\u0298\u02ae\5b\62\2\u0299\u029a\5`\61\2\u029a\u029b\7",
    "9\2\2\u029b\u029c\5b\62\2\u029c\u029e\3\2\2\2\u029d\u0299\3\2\2\2\u029e",
    "\u029f\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a4\3",
    "\2\2\2\u02a1\u02a2\7\21\2\2\u02a2\u02a3\79\2\2\u02a3\u02a5\5b\62\2\u02a4",
    "\u02a1\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a9\3\2\2\2\u02a6\u02a7\7",
    "\26\2\2\u02a7\u02a8\79\2\2\u02a8\u02aa\5b\62\2\u02a9\u02a6\3\2\2\2\u02a9",
    "\u02aa\3\2\2\2\u02aa\u02af\3\2\2\2\u02ab\u02ac\7\26\2\2\u02ac\u02ad",
    "\79\2\2\u02ad\u02af\5b\62\2\u02ae\u029d\3\2\2\2\u02ae\u02ab\3\2\2\2",
    "\u02af[\3\2\2\2\u02b0\u02b1\7\27\2\2\u02b1\u02b6\5^\60\2\u02b2\u02b3",
    "\78\2\2\u02b3\u02b5\5^\60\2\u02b4\u02b2\3\2\2\2\u02b5\u02b8\3\2\2\2",
    "\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02b6",
    "\3\2\2\2\u02b9\u02ba\79\2\2\u02ba\u02bb\5b\62\2\u02bb]\3\2\2\2\u02bc",
    "\u02bf\5d\63\2\u02bd\u02be\7\13\2\2\u02be\u02c0\5x=\2\u02bf\u02bd\3",
    "\2\2\2\u02bf\u02c0\3\2\2\2\u02c0_\3\2\2\2\u02c1\u02c7\7\30\2\2\u02c2",
    "\u02c5\5d\63\2\u02c3\u02c4\7\13\2\2\u02c4\u02c6\7*\2\2\u02c5\u02c3\3",
    "\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c8\3\2\2\2\u02c7\u02c2\3\2\2\2\u02c7",
    "\u02c8\3\2\2\2\u02c8a\3\2\2\2\u02c9\u02d4\5\36\20\2\u02ca\u02cb\7)\2",
    "\2\u02cb\u02cd\7d\2\2\u02cc\u02ce\5\34\17\2\u02cd\u02cc\3\2\2\2\u02ce",
    "\u02cf\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\3",
    "\2\2\2\u02d1\u02d2\7e\2\2\u02d2\u02d4\3\2\2\2\u02d3\u02c9\3\2\2\2\u02d3",
    "\u02ca\3\2\2\2\u02d4c\3\2\2\2\u02d5\u02db\5l\67\2\u02d6\u02d7\7\17\2",
    "\2\u02d7\u02d8\5l\67\2\u02d8\u02d9\7\21\2\2\u02d9\u02da\5d\63\2\u02da",
    "\u02dc\3\2\2\2\u02db\u02d6\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02df\3",
    "\2\2\2\u02dd\u02df\5h\65\2\u02de\u02d5\3\2\2\2\u02de\u02dd\3\2\2\2\u02df",
    "e\3\2\2\2\u02e0\u02e3\5l\67\2\u02e1\u02e3\5j\66\2\u02e2\u02e0\3\2\2",
    "\2\u02e2\u02e1\3\2\2\2\u02e3g\3\2\2\2\u02e4\u02e6\7\31\2\2\u02e5\u02e7",
    "\5\30\r\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8\3\2\2",
    "\2\u02e8\u02e9\79\2\2\u02e9\u02ea\5d\63\2\u02eai\3\2\2\2\u02eb\u02ed",
    "\7\31\2\2\u02ec\u02ee\5\30\r\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2",
    "\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\79\2\2\u02f0\u02f1\5f\64\2\u02f1",
    "k\3\2\2\2\u02f2\u02f7\5n8\2\u02f3\u02f4\7\32\2\2\u02f4\u02f6\5n8\2\u02f5",
    "\u02f3\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3\2\2\2\u02f7\u02f8\3",
    "\2\2\2\u02f8m\3\2\2\2\u02f9\u02f7\3\2\2\2\u02fa\u02ff\5p9\2\u02fb\u02fc",
    "\7\33\2\2\u02fc\u02fe\5p9\2\u02fd\u02fb\3\2\2\2\u02fe\u0301\3\2\2\2",
    "\u02ff\u02fd\3\2\2\2\u02ff\u0300\3\2\2\2\u0300o\3\2\2\2\u0301\u02ff",
    "\3\2\2\2\u0302\u0303\7\34\2\2\u0303\u0306\5p9\2\u0304\u0306\5r:\2\u0305",
    "\u0302\3\2\2\2\u0305\u0304\3\2\2\2\u0306q\3\2\2\2\u0307\u030d\5x=\2",
    "\u0308\u0309\5t;\2\u0309\u030a\5x=\2\u030a\u030c\3\2\2\2\u030b\u0308",
    "\3\2\2\2\u030c\u030f\3\2\2\2\u030d\u030b\3\2\2\2\u030d\u030e\3\2\2\2",
    "\u030es\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u031e\7L\2\2\u0311\u031e\7",
    "M\2\2\u0312\u031e\7N\2\2\u0313\u031e\7O\2\2\u0314\u031e\7P\2\2\u0315",
    "\u031e\7Q\2\2\u0316\u031e\7R\2\2\u0317\u031e\7\24\2\2\u0318\u0319\7",
    "\34\2\2\u0319\u031e\7\24\2\2\u031a\u031e\7\35\2\2\u031b\u031c\7\35\2",
    "\2\u031c\u031e\7\34\2\2\u031d\u0310\3\2\2\2\u031d\u0311\3\2\2\2\u031d",
    "\u0312\3\2\2\2\u031d\u0313\3\2\2\2\u031d\u0314\3\2\2\2\u031d\u0315\3",
    "\2\2\2\u031d\u0316\3\2\2\2\u031d\u0317\3\2\2\2\u031d\u0318\3\2\2\2\u031d",
    "\u031a\3\2\2\2\u031d\u031b\3\2\2\2\u031eu\3\2\2\2\u031f\u0320\7\65\2",
    "\2\u0320\u0321\5x=\2\u0321w\3\2\2\2\u0322\u0327\5z>\2\u0323\u0324\7",
    "?\2\2\u0324\u0326\5z>\2\u0325\u0323\3\2\2\2\u0326\u0329\3\2\2\2\u0327",
    "\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328y\3\2\2\2\u0329\u0327\3\2\2",
    "\2\u032a\u032f\5|?\2\u032b\u032c\7@\2\2\u032c\u032e\5|?\2\u032d\u032b",
    "\3\2\2\2\u032e\u0331\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2",
    "\u0330{\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0337\5~@\2\u0333\u0334\7",
    "A\2\2\u0334\u0336\5~@\2\u0335\u0333\3\2\2\2\u0336\u0339\3\2\2\2\u0337",
    "\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338}\3\2\2\2\u0339\u0337\3\2\2",
    "\2\u033a\u033f\5\u0080A\2\u033b\u033c\t\4\2\2\u033c\u033e\5\u0080A\2",
    "\u033d\u033b\3\2\2\2\u033e\u0341\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340",
    "\3\2\2\2\u0340\177\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0347\5\u0082B",
    "\2\u0343\u0344\t\5\2\2\u0344\u0346\5\u0082B\2\u0345\u0343\3\2\2\2\u0346",
    "\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0081\3",
    "\2\2\2\u0349\u0347\3\2\2\2\u034a\u034f\5\u0084C\2\u034b\u034c\t\6\2",
    "\2\u034c\u034e\5\u0084C\2\u034d\u034b\3\2\2\2\u034e\u0351\3\2\2\2\u034f",
    "\u034d\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0083\3\2\2\2\u0351\u034f\3",
    "\2\2\2\u0352\u0353\t\7\2\2\u0353\u0356\5\u0084C\2\u0354\u0356\5\u0086",
    "D\2\u0355\u0352\3\2\2\2\u0355\u0354\3\2\2\2\u0356\u0085\3\2\2\2\u0357",
    "\u035a\5\u0088E\2\u0358\u0359\7;\2\2\u0359\u035b\5\u0084C\2\u035a\u0358",
    "\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u0087\3\2\2\2\u035c\u035e\7(\2\2",
    "\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0363",
    "\5\u008aF\2\u0360\u0362\5\u008eH\2\u0361\u0360\3\2\2\2\u0362\u0365\3",
    "\2\2\2\u0363\u0361\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0089\3\2\2\2\u0365",
    "\u0363\3\2\2\2\u0366\u0369\7\66\2\2\u0367\u036a\5\u00aaV\2\u0368\u036a",
    "\5\u008cG\2\u0369\u0367\3\2\2\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2",
    "\2\2\u036a\u036b\3\2\2\2\u036b\u0382\7\67\2\2\u036c\u036e\7=\2\2\u036d",
    "\u036f\5\u008cG\2\u036e\u036d\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0370",
    "\3\2\2\2\u0370\u0382\7>\2\2\u0371\u0373\7J\2\2\u0372\u0374\5\u009aN",
    "\2\u0373\u0372\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0375\3\2\2\2\u0375",
    "\u0382\7K\2\2\u0376\u0382\7*\2\2\u0377\u0382\7\4\2\2\u0378\u037a\7\3",
    "\2\2\u0379\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u0379\3\2\2\2\u037b",
    "\u037c\3\2\2\2\u037c\u0382\3\2\2\2\u037d\u0382\7\64\2\2\u037e\u0382",
    "\7\36\2\2\u037f\u0382\7\37\2\2\u0380\u0382\7 \2\2\u0381\u0366\3\2\2",
    "\2\u0381\u036c\3\2\2\2\u0381\u0371\3\2\2\2\u0381\u0376\3\2\2\2\u0381",
    "\u0377\3\2\2\2\u0381\u0379\3\2\2\2\u0381\u037d\3\2\2\2\u0381\u037e\3",
    "\2\2\2\u0381\u037f\3\2\2\2\u0381\u0380\3\2\2\2\u0382\u008b\3\2\2\2\u0383",
    "\u0386\5d\63\2\u0384\u0386\5v<\2\u0385\u0383\3\2\2\2\u0385\u0384\3\2",
    "\2\2\u0386\u0395\3\2\2\2\u0387\u0396\5\u00a4S\2\u0388\u038b\78\2\2\u0389",
    "\u038c\5d\63\2\u038a\u038c\5v<\2\u038b\u0389\3\2\2\2\u038b\u038a\3\2",
    "\2\2\u038c\u038e\3\2\2\2\u038d\u0388\3\2\2\2\u038e\u0391\3\2\2\2\u038f",
    "\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f\3",
    "\2\2\2\u0392\u0394\78\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394",
    "\u0396\3\2\2\2\u0395\u0387\3\2\2\2\u0395\u038f\3\2\2\2\u0396\u008d\3",
    "\2\2\2\u0397\u0399\7\66\2\2\u0398\u039a\5\u009eP\2\u0399\u0398\3\2\2",
    "\2\u0399\u039a\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u03a3\7\67\2\2\u039c",
    "\u039d\7=\2\2\u039d\u039e\5\u0090I\2\u039e\u039f\7>\2\2\u039f\u03a3",
    "\3\2\2\2\u03a0\u03a1\7\63\2\2\u03a1\u03a3\7*\2\2\u03a2\u0397\3\2\2\2",
    "\u03a2\u039c\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u008f\3\2\2\2\u03a4\u03a9",
    "\5\u0092J\2\u03a5\u03a6\78\2\2\u03a6\u03a8\5\u0092J\2\u03a7\u03a5\3",
    "\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa",
    "\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ac\u03ae\78\2\2\u03ad\u03ac\3",
    "\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u0091\3\2\2\2\u03af\u03bb\5d\63\2\u03b0",
    "\u03b2\5d\63\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3",
    "\2\2\2\u03b3\u03b5\79\2\2\u03b4\u03b6\5d\63\2\u03b5\u03b4\3\2\2\2\u03b5",
    "\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7\u03b9\5\u0094K\2\u03b8\u03b7",
    "\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb\3\2\2\2\u03ba\u03af\3\2\2\2",
    "\u03ba\u03b1\3\2\2\2\u03bb\u0093\3\2\2\2\u03bc\u03be\79\2\2\u03bd\u03bf",
    "\5d\63\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u0095\3\2\2\2",
    "\u03c0\u03c3\5x=\2\u03c1\u03c3\5v<\2\u03c2\u03c0\3\2\2\2\u03c2\u03c1",
    "\3\2\2\2\u03c3\u03cb\3\2\2\2\u03c4\u03c7\78\2\2\u03c5\u03c8\5x=\2\u03c6",
    "\u03c8\5v<\2\u03c7\u03c5\3\2\2\2\u03c7\u03c6\3\2\2\2\u03c8\u03ca\3\2",
    "\2\2\u03c9\u03c4\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb",
    "\u03cc\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce\u03d0\7",
    "8\2\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u0097\3\2\2\2\u03d1",
    "\u03d6\5d\63\2\u03d2\u03d3\78\2\2\u03d3\u03d5\5d\63\2\u03d4\u03d2\3",
    "\2\2\2\u03d5\u03d8\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7",
    "\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d9\u03db\78\2\2\u03da\u03d9\3",
    "\2\2\2\u03da\u03db\3\2\2\2\u03db\u0099\3\2\2\2\u03dc\u03dd\5d\63\2\u03dd",
    "\u03de\79\2\2\u03de\u03df\5d\63\2\u03df\u03e3\3\2\2\2\u03e0\u03e1\7",
    ";\2\2\u03e1\u03e3\5x=\2\u03e2\u03dc\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3",
    "\u03f6\3\2\2\2\u03e4\u03f7\5\u00a4S\2\u03e5\u03ec\78\2\2\u03e6\u03e7",
    "\5d\63\2\u03e7\u03e8\79\2\2\u03e8\u03e9\5d\63\2\u03e9\u03ed\3\2\2\2",
    "\u03ea\u03eb\7;\2\2\u03eb\u03ed\5x=\2\u03ec\u03e6\3\2\2\2\u03ec\u03ea",
    "\3\2\2\2\u03ed\u03ef\3\2\2\2\u03ee\u03e5\3\2\2\2\u03ef\u03f2\3\2\2\2",
    "\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0",
    "\3\2\2\2\u03f3\u03f5\78\2\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2",
    "\u03f5\u03f7\3\2\2\2\u03f6\u03e4\3\2\2\2\u03f6\u03f0\3\2\2\2\u03f7\u040d",
    "\3\2\2\2\u03f8\u03fb\5d\63\2\u03f9\u03fb\5v<\2\u03fa\u03f8\3\2\2\2\u03fa",
    "\u03f9\3\2\2\2\u03fb\u040a\3\2\2\2\u03fc\u040b\5\u00a4S\2\u03fd\u0400",
    "\78\2\2\u03fe\u0401\5d\63\2\u03ff\u0401\5v<\2\u0400\u03fe\3\2\2\2\u0400",
    "\u03ff\3\2\2\2\u0401\u0403\3\2\2\2\u0402\u03fd\3\2\2\2\u0403\u0406\3",
    "\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0408\3\2\2\2\u0406",
    "\u0404\3\2\2\2\u0407\u0409\78\2\2\u0408\u0407\3\2\2\2\u0408\u0409\3",
    "\2\2\2\u0409\u040b\3\2\2\2\u040a\u03fc\3\2\2\2\u040a\u0404\3\2\2\2\u040b",
    "\u040d\3\2\2\2\u040c\u03e2\3\2\2\2\u040c\u03fa\3\2\2\2\u040d\u009b\3",
    "\2\2\2\u040e\u040f\7!\2\2\u040f\u0415\7*\2\2\u0410\u0412\7\66\2\2\u0411",
    "\u0413\5\u009eP\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0414",
    "\3\2\2\2\u0414\u0416\7\67\2\2\u0415\u0410\3\2\2\2\u0415\u0416\3\2\2",
    "\2\u0416\u0417\3\2\2\2\u0417\u0418\79\2\2\u0418\u0419\5b\62\2\u0419",
    "\u009d\3\2\2\2\u041a\u041f\5\u00a0Q\2\u041b\u041c\78\2\2\u041c\u041e",
    "\5\u00a0Q\2\u041d\u041b\3\2\2\2\u041e\u0421\3\2\2\2\u041f\u041d\3\2",
    "\2\2\u041f\u0420\3\2\2\2\u0420\u0423\3\2\2\2\u0421\u041f\3\2\2\2\u0422",
    "\u0424\78\2\2\u0423\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u009f\3",
    "\2\2\2\u0425\u0427\5d\63\2\u0426\u0428\5\u00a4S\2\u0427\u0426\3\2\2",
    "\2\u0427\u0428\3\2\2\2\u0428\u0432\3\2\2\2\u0429\u042a\5d\63\2\u042a",
    "\u042b\7<\2\2\u042b\u042c\5d\63\2\u042c\u0432\3\2\2\2\u042d\u042e\7",
    ";\2\2\u042e\u0432\5d\63\2\u042f\u0430\7\65\2\2\u0430\u0432\5d\63\2\u0431",
    "\u0425\3\2\2\2\u0431\u0429\3\2\2\2\u0431\u042d\3\2\2\2\u0431\u042f\3",
    "\2\2\2\u0432\u00a1\3\2\2\2\u0433\u0436\5\u00a4S\2\u0434\u0436\5\u00a6",
    "T\2\u0435\u0433\3\2\2\2\u0435\u0434\3\2\2\2\u0436\u00a3\3\2\2\2\u0437",
    "\u0439\7\'\2\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3",
    "\2\2\2\u043a\u043b\7\23\2\2\u043b\u043c\5\u0096L\2\u043c\u043d\7\24",
    "\2\2\u043d\u043f\5l\67\2\u043e\u0440\5\u00a2R\2\u043f\u043e\3\2\2\2",
    "\u043f\u0440\3\2\2\2\u0440\u00a5\3\2\2\2\u0441\u0442\7\17\2\2\u0442",
    "\u0444\5f\64\2\u0443\u0445\5\u00a2R\2\u0444\u0443\3\2\2\2\u0444\u0445",
    "\3\2\2\2\u0445\u00a7\3\2\2\2\u0446\u0447\7*\2\2\u0447\u00a9\3\2\2\2",
    "\u0448\u044a\7\"\2\2\u0449\u044b\5\u00acW\2\u044a\u0449\3\2\2\2\u044a",
    "\u044b\3\2\2\2\u044b\u00ab\3\2\2\2\u044c\u044d\7\t\2\2\u044d\u0450\5",
    "d\63\2\u044e\u0450\5\u0098M\2\u044f\u044c\3\2\2\2\u044f\u044e\3\2\2",
    "\2\u0450\u00ad\3\2\2\2\u00a8\u00b3\u00b7\u00b9\u00c2\u00cb\u00ce\u00d5",
    "\u00db\u00e5\u00ec\u00f3\u00f9\u00fd\u0103\u0109\u010d\u0114\u0116\u0118",
    "\u011d\u011f\u0121\u0125\u012b\u012f\u0136\u0138\u013a\u013f\u0141\u0146",
    "\u014b\u0151\u0155\u015b\u0161\u0165\u016c\u016e\u0170\u0175\u0177\u0179",
    "\u017d\u0183\u0187\u018e\u0190\u0192\u0197\u0199\u019f\u01a6\u01aa\u01b6",
    "\u01bd\u01c2\u01c6\u01c9\u01cf\u01d3\u01d8\u01dc\u01e0\u01ee\u01f6\u01fe",
    "\u0200\u0204\u020d\u0214\u0216\u021f\u0224\u0229\u0230\u0234\u023b\u0243",
    "\u024c\u0255\u025c\u0267\u026d\u027a\u0280\u0289\u0294\u029f\u02a4\u02a9",
    "\u02ae\u02b6\u02bf\u02c5\u02c7\u02cf\u02d3\u02db\u02de\u02e2\u02e6\u02ed",
    "\u02f7\u02ff\u0305\u030d\u031d\u0327\u032f\u0337\u033f\u0347\u034f\u0355",
    "\u035a\u035d\u0363\u0369\u036e\u0373\u037b\u0381\u0385\u038b\u038f\u0393",
    "\u0395\u0399\u03a2\u03a9\u03ad\u03b1\u03b5\u03b8\u03ba\u03be\u03c2\u03c7",
    "\u03cb\u03cf\u03d6\u03da\u03e2\u03ec\u03f0\u03f4\u03f6\u03fa\u0400\u0404",
    "\u0408\u040a\u040c\u0412\u0415\u041f\u0423\u0427\u0431\u0435\u0438\u043f",
    "\u0444\u044a\u044f"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', 'null', "'def'", "'return'", 
                     "'raise'", "'from'", "'import'", "'as'", "'global'", 
                     "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", 
                     "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", 
                     "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", 
                     "'None'", "'True'", "'False'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', "'.'", "'...'", 
                     "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", 
                     "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", 
                     "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", 
                     "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", 
                     "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
                     "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//='" ];

var symbolicNames = [ 'null', "STRING", "NUMBER", "INTEGER", "DEF", "RETURN", 
                      "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", 
                      "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", 
                      "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", 
                      "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
                      "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", 
                      "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                      "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", 
                      "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
                      "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", 
                      "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                      "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", 
                      "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
                      "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", 
                      "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", 
                      "INDENT", "DEDENT" ];

var ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "async_funcdef", "funcdef", 
                   "parameters", "typedargslist", "tfpdef", "varargslist", 
                   "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", 
                   "annassign", "testlist_star_expr", "augassign", "del_stmt", 
                   "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                   "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", 
                   "with_stmt", "with_item", "except_clause", "suite", "test", 
                   "test_nocond", "lambdef", "lambdef_nocond", "or_test", 
                   "and_test", "not_test", "comparison", "comp_op", "star_expr", 
                   "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", 
                   "term", "factor", "power", "atom_expr", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                   "yield_expr", "yield_arg" ];

function PythonParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PythonParser.prototype = Object.create(antlr4.Parser.prototype);
PythonParser.prototype.constructor = PythonParser;

Object.defineProperty(PythonParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

PythonParser.EOF = antlr4.Token.EOF;
PythonParser.STRING = 1;
PythonParser.NUMBER = 2;
PythonParser.INTEGER = 3;
PythonParser.DEF = 4;
PythonParser.RETURN = 5;
PythonParser.RAISE = 6;
PythonParser.FROM = 7;
PythonParser.IMPORT = 8;
PythonParser.AS = 9;
PythonParser.GLOBAL = 10;
PythonParser.NONLOCAL = 11;
PythonParser.ASSERT = 12;
PythonParser.IF = 13;
PythonParser.ELIF = 14;
PythonParser.ELSE = 15;
PythonParser.WHILE = 16;
PythonParser.FOR = 17;
PythonParser.IN = 18;
PythonParser.TRY = 19;
PythonParser.FINALLY = 20;
PythonParser.WITH = 21;
PythonParser.EXCEPT = 22;
PythonParser.LAMBDA = 23;
PythonParser.OR = 24;
PythonParser.AND = 25;
PythonParser.NOT = 26;
PythonParser.IS = 27;
PythonParser.NONE = 28;
PythonParser.TRUE = 29;
PythonParser.FALSE = 30;
PythonParser.CLASS = 31;
PythonParser.YIELD = 32;
PythonParser.DEL = 33;
PythonParser.PASS = 34;
PythonParser.CONTINUE = 35;
PythonParser.BREAK = 36;
PythonParser.ASYNC = 37;
PythonParser.AWAIT = 38;
PythonParser.NEWLINE = 39;
PythonParser.NAME = 40;
PythonParser.STRING_LITERAL = 41;
PythonParser.BYTES_LITERAL = 42;
PythonParser.DECIMAL_INTEGER = 43;
PythonParser.OCT_INTEGER = 44;
PythonParser.HEX_INTEGER = 45;
PythonParser.BIN_INTEGER = 46;
PythonParser.FLOAT_NUMBER = 47;
PythonParser.IMAG_NUMBER = 48;
PythonParser.DOT = 49;
PythonParser.ELLIPSIS = 50;
PythonParser.STAR = 51;
PythonParser.OPEN_PAREN = 52;
PythonParser.CLOSE_PAREN = 53;
PythonParser.COMMA = 54;
PythonParser.COLON = 55;
PythonParser.SEMI_COLON = 56;
PythonParser.POWER = 57;
PythonParser.ASSIGN = 58;
PythonParser.OPEN_BRACK = 59;
PythonParser.CLOSE_BRACK = 60;
PythonParser.OR_OP = 61;
PythonParser.XOR = 62;
PythonParser.AND_OP = 63;
PythonParser.LEFT_SHIFT = 64;
PythonParser.RIGHT_SHIFT = 65;
PythonParser.ADD = 66;
PythonParser.MINUS = 67;
PythonParser.DIV = 68;
PythonParser.MOD = 69;
PythonParser.IDIV = 70;
PythonParser.NOT_OP = 71;
PythonParser.OPEN_BRACE = 72;
PythonParser.CLOSE_BRACE = 73;
PythonParser.LESS_THAN = 74;
PythonParser.GREATER_THAN = 75;
PythonParser.EQUALS = 76;
PythonParser.GT_EQ = 77;
PythonParser.LT_EQ = 78;
PythonParser.NOT_EQ_1 = 79;
PythonParser.NOT_EQ_2 = 80;
PythonParser.AT = 81;
PythonParser.ARROW = 82;
PythonParser.ADD_ASSIGN = 83;
PythonParser.SUB_ASSIGN = 84;
PythonParser.MULT_ASSIGN = 85;
PythonParser.AT_ASSIGN = 86;
PythonParser.DIV_ASSIGN = 87;
PythonParser.MOD_ASSIGN = 88;
PythonParser.AND_ASSIGN = 89;
PythonParser.OR_ASSIGN = 90;
PythonParser.XOR_ASSIGN = 91;
PythonParser.LEFT_SHIFT_ASSIGN = 92;
PythonParser.RIGHT_SHIFT_ASSIGN = 93;
PythonParser.POWER_ASSIGN = 94;
PythonParser.IDIV_ASSIGN = 95;
PythonParser.SKIP_ = 96;
PythonParser.UNKNOWN_CHAR = 97;
PythonParser.INDENT = 98;
PythonParser.DEDENT = 99;

PythonParser.RULE_single_input = 0;
PythonParser.RULE_file_input = 1;
PythonParser.RULE_eval_input = 2;
PythonParser.RULE_decorator = 3;
PythonParser.RULE_decorators = 4;
PythonParser.RULE_decorated = 5;
PythonParser.RULE_async_funcdef = 6;
PythonParser.RULE_funcdef = 7;
PythonParser.RULE_parameters = 8;
PythonParser.RULE_typedargslist = 9;
PythonParser.RULE_tfpdef = 10;
PythonParser.RULE_varargslist = 11;
PythonParser.RULE_vfpdef = 12;
PythonParser.RULE_stmt = 13;
PythonParser.RULE_simple_stmt = 14;
PythonParser.RULE_small_stmt = 15;
PythonParser.RULE_expr_stmt = 16;
PythonParser.RULE_annassign = 17;
PythonParser.RULE_testlist_star_expr = 18;
PythonParser.RULE_augassign = 19;
PythonParser.RULE_del_stmt = 20;
PythonParser.RULE_pass_stmt = 21;
PythonParser.RULE_flow_stmt = 22;
PythonParser.RULE_break_stmt = 23;
PythonParser.RULE_continue_stmt = 24;
PythonParser.RULE_return_stmt = 25;
PythonParser.RULE_yield_stmt = 26;
PythonParser.RULE_raise_stmt = 27;
PythonParser.RULE_import_stmt = 28;
PythonParser.RULE_import_name = 29;
PythonParser.RULE_import_from = 30;
PythonParser.RULE_import_as_name = 31;
PythonParser.RULE_dotted_as_name = 32;
PythonParser.RULE_import_as_names = 33;
PythonParser.RULE_dotted_as_names = 34;
PythonParser.RULE_dotted_name = 35;
PythonParser.RULE_global_stmt = 36;
PythonParser.RULE_nonlocal_stmt = 37;
PythonParser.RULE_assert_stmt = 38;
PythonParser.RULE_compound_stmt = 39;
PythonParser.RULE_async_stmt = 40;
PythonParser.RULE_if_stmt = 41;
PythonParser.RULE_while_stmt = 42;
PythonParser.RULE_for_stmt = 43;
PythonParser.RULE_try_stmt = 44;
PythonParser.RULE_with_stmt = 45;
PythonParser.RULE_with_item = 46;
PythonParser.RULE_except_clause = 47;
PythonParser.RULE_suite = 48;
PythonParser.RULE_test = 49;
PythonParser.RULE_test_nocond = 50;
PythonParser.RULE_lambdef = 51;
PythonParser.RULE_lambdef_nocond = 52;
PythonParser.RULE_or_test = 53;
PythonParser.RULE_and_test = 54;
PythonParser.RULE_not_test = 55;
PythonParser.RULE_comparison = 56;
PythonParser.RULE_comp_op = 57;
PythonParser.RULE_star_expr = 58;
PythonParser.RULE_expr = 59;
PythonParser.RULE_xor_expr = 60;
PythonParser.RULE_and_expr = 61;
PythonParser.RULE_shift_expr = 62;
PythonParser.RULE_arith_expr = 63;
PythonParser.RULE_term = 64;
PythonParser.RULE_factor = 65;
PythonParser.RULE_power = 66;
PythonParser.RULE_atom_expr = 67;
PythonParser.RULE_atom = 68;
PythonParser.RULE_testlist_comp = 69;
PythonParser.RULE_trailer = 70;
PythonParser.RULE_subscriptlist = 71;
PythonParser.RULE_subscript = 72;
PythonParser.RULE_sliceop = 73;
PythonParser.RULE_exprlist = 74;
PythonParser.RULE_testlist = 75;
PythonParser.RULE_dictorsetmaker = 76;
PythonParser.RULE_classdef = 77;
PythonParser.RULE_arglist = 78;
PythonParser.RULE_argument = 79;
PythonParser.RULE_comp_iter = 80;
PythonParser.RULE_comp_for = 81;
PythonParser.RULE_comp_if = 82;
PythonParser.RULE_encoding_decl = 83;
PythonParser.RULE_yield_expr = 84;
PythonParser.RULE_yield_arg = 85;

function Single_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_single_input;
    return this;
}

Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;

Single_inputContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

Single_inputContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

Single_inputContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

Single_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSingle_input(this);
	}
};

Single_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSingle_input(this);
	}
};

Single_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSingle_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Single_inputContext = Single_inputContext;

PythonParser.prototype.single_input = function() {

    var localctx = new Single_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PythonParser.RULE_single_input);
    try {
        this.state = 177;
        switch(this._input.LA(1)) {
        case PythonParser.NEWLINE:
            this.enterOuterAlt(localctx, 1);
            this.state = 172;
            this.match(PythonParser.NEWLINE);
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 173;
            this.simple_stmt();
            break;
        case PythonParser.DEF:
        case PythonParser.IF:
        case PythonParser.WHILE:
        case PythonParser.FOR:
        case PythonParser.TRY:
        case PythonParser.WITH:
        case PythonParser.CLASS:
        case PythonParser.ASYNC:
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 3);
            this.state = 174;
            this.compound_stmt();
            this.state = 175;
            this.match(PythonParser.NEWLINE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function File_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_file_input;
    return this;
}

File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;

File_inputContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

File_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NEWLINE);
    } else {
        return this.getToken(PythonParser.NEWLINE, i);
    }
};


File_inputContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

File_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFile_input(this);
	}
};

File_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFile_input(this);
	}
};

File_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFile_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.File_inputContext = File_inputContext;

PythonParser.prototype.file_input = function() {

    var localctx = new File_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PythonParser.RULE_file_input);
    var _la = 0;
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.DEF) | (1 << PythonParser.RETURN) | (1 << PythonParser.RAISE) | (1 << PythonParser.FROM) | (1 << PythonParser.IMPORT) | (1 << PythonParser.GLOBAL) | (1 << PythonParser.NONLOCAL) | (1 << PythonParser.ASSERT) | (1 << PythonParser.IF) | (1 << PythonParser.WHILE) | (1 << PythonParser.FOR) | (1 << PythonParser.TRY) | (1 << PythonParser.WITH) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE) | (1 << PythonParser.CLASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PythonParser.YIELD - 32)) | (1 << (PythonParser.DEL - 32)) | (1 << (PythonParser.PASS - 32)) | (1 << (PythonParser.CONTINUE - 32)) | (1 << (PythonParser.BREAK - 32)) | (1 << (PythonParser.ASYNC - 32)) | (1 << (PythonParser.AWAIT - 32)) | (1 << (PythonParser.NEWLINE - 32)) | (1 << (PythonParser.NAME - 32)) | (1 << (PythonParser.ELLIPSIS - 32)) | (1 << (PythonParser.STAR - 32)) | (1 << (PythonParser.OPEN_PAREN - 32)) | (1 << (PythonParser.OPEN_BRACK - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)) | (1 << (PythonParser.OPEN_BRACE - 66)) | (1 << (PythonParser.AT - 66)))) !== 0)) {
            this.state = 181;
            switch(this._input.LA(1)) {
            case PythonParser.NEWLINE:
                this.state = 179;
                this.match(PythonParser.NEWLINE);
                break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.DEF:
            case PythonParser.RETURN:
            case PythonParser.RAISE:
            case PythonParser.FROM:
            case PythonParser.IMPORT:
            case PythonParser.GLOBAL:
            case PythonParser.NONLOCAL:
            case PythonParser.ASSERT:
            case PythonParser.IF:
            case PythonParser.WHILE:
            case PythonParser.FOR:
            case PythonParser.TRY:
            case PythonParser.WITH:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.CLASS:
            case PythonParser.YIELD:
            case PythonParser.DEL:
            case PythonParser.PASS:
            case PythonParser.CONTINUE:
            case PythonParser.BREAK:
            case PythonParser.ASYNC:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.STAR:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
            case PythonParser.AT:
                this.state = 180;
                this.stmt();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 185;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 186;
        this.match(PythonParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Eval_inputContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_eval_input;
    return this;
}

Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;

Eval_inputContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Eval_inputContext.prototype.EOF = function() {
    return this.getToken(PythonParser.EOF, 0);
};

Eval_inputContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NEWLINE);
    } else {
        return this.getToken(PythonParser.NEWLINE, i);
    }
};


Eval_inputContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterEval_input(this);
	}
};

Eval_inputContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitEval_input(this);
	}
};

Eval_inputContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitEval_input(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Eval_inputContext = Eval_inputContext;

PythonParser.prototype.eval_input = function() {

    var localctx = new Eval_inputContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PythonParser.RULE_eval_input);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this.testlist();
        this.state = 192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.NEWLINE) {
            this.state = 189;
            this.match(PythonParser.NEWLINE);
            this.state = 194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 195;
        this.match(PythonParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorator;
    return this;
}

DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;

DecoratorContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

DecoratorContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

DecoratorContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

DecoratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorator(this);
	}
};

DecoratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorator(this);
	}
};

DecoratorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorator(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratorContext = DecoratorContext;

PythonParser.prototype.decorator = function() {

    var localctx = new DecoratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PythonParser.RULE_decorator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 197;
        this.match(PythonParser.AT);
        this.state = 198;
        this.dotted_name();
        this.state = 204;
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 199;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 201;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 200;
                this.arglist();
            }

            this.state = 203;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 206;
        this.match(PythonParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorators;
    return this;
}

DecoratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorsContext.prototype.constructor = DecoratorsContext;

DecoratorsContext.prototype.decorator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DecoratorContext);
    } else {
        return this.getTypedRuleContext(DecoratorContext,i);
    }
};

DecoratorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorators(this);
	}
};

DecoratorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorators(this);
	}
};

DecoratorsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorators(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratorsContext = DecoratorsContext;

PythonParser.prototype.decorators = function() {

    var localctx = new DecoratorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PythonParser.RULE_decorators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 209; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 208;
            this.decorator();
            this.state = 211; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===PythonParser.AT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecoratedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_decorated;
    return this;
}

DecoratedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratedContext.prototype.constructor = DecoratedContext;

DecoratedContext.prototype.decorators = function() {
    return this.getTypedRuleContext(DecoratorsContext,0);
};

DecoratedContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

DecoratedContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

DecoratedContext.prototype.async_funcdef = function() {
    return this.getTypedRuleContext(Async_funcdefContext,0);
};

DecoratedContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDecorated(this);
	}
};

DecoratedContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDecorated(this);
	}
};

DecoratedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDecorated(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DecoratedContext = DecoratedContext;

PythonParser.prototype.decorated = function() {

    var localctx = new DecoratedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PythonParser.RULE_decorated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 213;
        this.decorators();
        this.state = 217;
        switch(this._input.LA(1)) {
        case PythonParser.CLASS:
            this.state = 214;
            this.classdef();
            break;
        case PythonParser.DEF:
            this.state = 215;
            this.funcdef();
            break;
        case PythonParser.ASYNC:
            this.state = 216;
            this.async_funcdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_funcdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_async_funcdef;
    return this;
}

Async_funcdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_funcdefContext.prototype.constructor = Async_funcdefContext;

Async_funcdefContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Async_funcdefContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_funcdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAsync_funcdef(this);
	}
};

Async_funcdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAsync_funcdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Async_funcdefContext = Async_funcdefContext;

PythonParser.prototype.async_funcdef = function() {

    var localctx = new Async_funcdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PythonParser.RULE_async_funcdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 219;
        this.match(PythonParser.ASYNC);
        this.state = 220;
        this.funcdef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuncdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_funcdef;
    return this;
}

FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;

FuncdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

FuncdefContext.prototype.parameters = function() {
    return this.getTypedRuleContext(ParametersContext,0);
};

FuncdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

FuncdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

FuncdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFuncdef(this);
	}
};

FuncdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFuncdef(this);
	}
};

FuncdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFuncdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.FuncdefContext = FuncdefContext;

PythonParser.prototype.funcdef = function() {

    var localctx = new FuncdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PythonParser.RULE_funcdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 222;
        this.match(PythonParser.DEF);
        this.state = 223;
        this.match(PythonParser.NAME);
        this.state = 224;
        this.parameters();
        this.state = 227;
        _la = this._input.LA(1);
        if(_la===PythonParser.ARROW) {
            this.state = 225;
            this.match(PythonParser.ARROW);
            this.state = 226;
            this.test();
        }

        this.state = 229;
        this.match(PythonParser.COLON);
        this.state = 230;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_parameters;
    return this;
}

ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;

ParametersContext.prototype.typedargslist = function() {
    return this.getTypedRuleContext(TypedargslistContext,0);
};

ParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterParameters(this);
	}
};

ParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitParameters(this);
	}
};

ParametersContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitParameters(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ParametersContext = ParametersContext;

PythonParser.prototype.parameters = function() {

    var localctx = new ParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PythonParser.RULE_parameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 232;
        this.match(PythonParser.OPEN_PAREN);
        this.state = 234;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 233;
            this.typedargslist();
        }

        this.state = 236;
        this.match(PythonParser.CLOSE_PAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypedargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_typedargslist;
    return this;
}

TypedargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedargslistContext.prototype.constructor = TypedargslistContext;

TypedargslistContext.prototype.tfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TfpdefContext);
    } else {
        return this.getTypedRuleContext(TfpdefContext,i);
    }
};

TypedargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TypedargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTypedargslist(this);
	}
};

TypedargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTypedargslist(this);
	}
};

TypedargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTypedargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TypedargslistContext = TypedargslistContext;

PythonParser.prototype.typedargslist = function() {

    var localctx = new TypedargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PythonParser.RULE_typedargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        switch(this._input.LA(1)) {
        case PythonParser.NAME:
            this.state = 238;
            this.tfpdef();
            this.state = 241;
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 239;
                this.match(PythonParser.ASSIGN);
                this.state = 240;
                this.test();
            }

            this.state = 251;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 243;
                    this.match(PythonParser.COMMA);
                    this.state = 244;
                    this.tfpdef();
                    this.state = 247;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 245;
                        this.match(PythonParser.ASSIGN);
                        this.state = 246;
                        this.test();
                    }
             
                }
                this.state = 253;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
            }

            this.state = 287;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 254;
                this.match(PythonParser.COMMA);
                this.state = 285;
                switch (this._input.LA(1)) {
                case PythonParser.STAR:
                	this.state = 255;
                	this.match(PythonParser.STAR);
                	this.state = 257;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.NAME) {
                	    this.state = 256;
                	    this.tfpdef();
                	}

                	this.state = 267;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 259;
                	        this.match(PythonParser.COMMA);
                	        this.state = 260;
                	        this.tfpdef();
                	        this.state = 263;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.ASSIGN) {
                	            this.state = 261;
                	            this.match(PythonParser.ASSIGN);
                	            this.state = 262;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 269;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
                	}

                	this.state = 278;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 270;
                	    this.match(PythonParser.COMMA);
                	    this.state = 276;
                	    _la = this._input.LA(1);
                	    if(_la===PythonParser.POWER) {
                	        this.state = 271;
                	        this.match(PythonParser.POWER);
                	        this.state = 272;
                	        this.tfpdef();
                	        this.state = 274;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.COMMA) {
                	            this.state = 273;
                	            this.match(PythonParser.COMMA);
                	        }

                	    }

                	}

                	break;
                case PythonParser.POWER:
                	this.state = 280;
                	this.match(PythonParser.POWER);
                	this.state = 281;
                	this.tfpdef();
                	this.state = 283;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 282;
                	    this.match(PythonParser.COMMA);
                	}

                	break;
                case PythonParser.CLOSE_PAREN:
                	break;
                default:
                	throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        case PythonParser.STAR:
            this.state = 289;
            this.match(PythonParser.STAR);
            this.state = 291;
            _la = this._input.LA(1);
            if(_la===PythonParser.NAME) {
                this.state = 290;
                this.tfpdef();
            }

            this.state = 301;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 293;
                    this.match(PythonParser.COMMA);
                    this.state = 294;
                    this.tfpdef();
                    this.state = 297;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 295;
                        this.match(PythonParser.ASSIGN);
                        this.state = 296;
                        this.test();
                    }
             
                }
                this.state = 303;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
            }

            this.state = 312;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 304;
                this.match(PythonParser.COMMA);
                this.state = 310;
                _la = this._input.LA(1);
                if(_la===PythonParser.POWER) {
                    this.state = 305;
                    this.match(PythonParser.POWER);
                    this.state = 306;
                    this.tfpdef();
                    this.state = 308;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.COMMA) {
                        this.state = 307;
                        this.match(PythonParser.COMMA);
                    }

                }

            }

            break;
        case PythonParser.POWER:
            this.state = 314;
            this.match(PythonParser.POWER);
            this.state = 315;
            this.tfpdef();
            this.state = 317;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 316;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_tfpdef;
    return this;
}

TfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TfpdefContext.prototype.constructor = TfpdefContext;

TfpdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

TfpdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTfpdef(this);
	}
};

TfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTfpdef(this);
	}
};

TfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TfpdefContext = TfpdefContext;

PythonParser.prototype.tfpdef = function() {

    var localctx = new TfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PythonParser.RULE_tfpdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.match(PythonParser.NAME);
        this.state = 324;
        _la = this._input.LA(1);
        if(_la===PythonParser.COLON) {
            this.state = 322;
            this.match(PythonParser.COLON);
            this.state = 323;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarargslistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_varargslist;
    return this;
}

VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;

VarargslistContext.prototype.vfpdef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VfpdefContext);
    } else {
        return this.getTypedRuleContext(VfpdefContext,i);
    }
};

VarargslistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

VarargslistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterVarargslist(this);
	}
};

VarargslistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitVarargslist(this);
	}
};

VarargslistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitVarargslist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VarargslistContext = VarargslistContext;

PythonParser.prototype.varargslist = function() {

    var localctx = new VarargslistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PythonParser.RULE_varargslist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        switch(this._input.LA(1)) {
        case PythonParser.NAME:
            this.state = 326;
            this.vfpdef();
            this.state = 329;
            _la = this._input.LA(1);
            if(_la===PythonParser.ASSIGN) {
                this.state = 327;
                this.match(PythonParser.ASSIGN);
                this.state = 328;
                this.test();
            }

            this.state = 339;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 331;
                    this.match(PythonParser.COMMA);
                    this.state = 332;
                    this.vfpdef();
                    this.state = 335;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 333;
                        this.match(PythonParser.ASSIGN);
                        this.state = 334;
                        this.test();
                    }
             
                }
                this.state = 341;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
            }

            this.state = 375;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 342;
                this.match(PythonParser.COMMA);
                this.state = 373;
                switch (this._input.LA(1)) {
                case PythonParser.STAR:
                	this.state = 343;
                	this.match(PythonParser.STAR);
                	this.state = 345;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.NAME) {
                	    this.state = 344;
                	    this.vfpdef();
                	}

                	this.state = 355;
                	this._errHandler.sync(this);
                	var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                	    if(_alt===1) {
                	        this.state = 347;
                	        this.match(PythonParser.COMMA);
                	        this.state = 348;
                	        this.vfpdef();
                	        this.state = 351;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.ASSIGN) {
                	            this.state = 349;
                	            this.match(PythonParser.ASSIGN);
                	            this.state = 350;
                	            this.test();
                	        }
                	 
                	    }
                	    this.state = 357;
                	    this._errHandler.sync(this);
                	    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
                	}

                	this.state = 366;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 358;
                	    this.match(PythonParser.COMMA);
                	    this.state = 364;
                	    _la = this._input.LA(1);
                	    if(_la===PythonParser.POWER) {
                	        this.state = 359;
                	        this.match(PythonParser.POWER);
                	        this.state = 360;
                	        this.vfpdef();
                	        this.state = 362;
                	        _la = this._input.LA(1);
                	        if(_la===PythonParser.COMMA) {
                	            this.state = 361;
                	            this.match(PythonParser.COMMA);
                	        }

                	    }

                	}

                	break;
                case PythonParser.POWER:
                	this.state = 368;
                	this.match(PythonParser.POWER);
                	this.state = 369;
                	this.vfpdef();
                	this.state = 371;
                	_la = this._input.LA(1);
                	if(_la===PythonParser.COMMA) {
                	    this.state = 370;
                	    this.match(PythonParser.COMMA);
                	}

                	break;
                case PythonParser.COLON:
                	break;
                default:
                	throw new antlr4.error.NoViableAltException(this);
                }
            }

            break;
        case PythonParser.STAR:
            this.state = 377;
            this.match(PythonParser.STAR);
            this.state = 379;
            _la = this._input.LA(1);
            if(_la===PythonParser.NAME) {
                this.state = 378;
                this.vfpdef();
            }

            this.state = 389;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 381;
                    this.match(PythonParser.COMMA);
                    this.state = 382;
                    this.vfpdef();
                    this.state = 385;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.ASSIGN) {
                        this.state = 383;
                        this.match(PythonParser.ASSIGN);
                        this.state = 384;
                        this.test();
                    }
             
                }
                this.state = 391;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
            }

            this.state = 400;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 392;
                this.match(PythonParser.COMMA);
                this.state = 398;
                _la = this._input.LA(1);
                if(_la===PythonParser.POWER) {
                    this.state = 393;
                    this.match(PythonParser.POWER);
                    this.state = 394;
                    this.vfpdef();
                    this.state = 396;
                    _la = this._input.LA(1);
                    if(_la===PythonParser.COMMA) {
                        this.state = 395;
                        this.match(PythonParser.COMMA);
                    }

                }

            }

            break;
        case PythonParser.POWER:
            this.state = 402;
            this.match(PythonParser.POWER);
            this.state = 403;
            this.vfpdef();
            this.state = 405;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 404;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VfpdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_vfpdef;
    return this;
}

VfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VfpdefContext.prototype.constructor = VfpdefContext;

VfpdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

VfpdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterVfpdef(this);
	}
};

VfpdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitVfpdef(this);
	}
};

VfpdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitVfpdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.VfpdefContext = VfpdefContext;

PythonParser.prototype.vfpdef = function() {

    var localctx = new VfpdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PythonParser.RULE_vfpdef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this.match(PythonParser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_stmt;
    return this;
}

StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;

StmtContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

StmtContext.prototype.compound_stmt = function() {
    return this.getTypedRuleContext(Compound_stmtContext,0);
};

StmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterStmt(this);
	}
};

StmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitStmt(this);
	}
};

StmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.StmtContext = StmtContext;

PythonParser.prototype.stmt = function() {

    var localctx = new StmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PythonParser.RULE_stmt);
    try {
        this.state = 413;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 411;
            this.simple_stmt();
            break;
        case PythonParser.DEF:
        case PythonParser.IF:
        case PythonParser.WHILE:
        case PythonParser.FOR:
        case PythonParser.TRY:
        case PythonParser.WITH:
        case PythonParser.CLASS:
        case PythonParser.ASYNC:
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 2);
            this.state = 412;
            this.compound_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Simple_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_simple_stmt;
    return this;
}

Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;

Simple_stmtContext.prototype.small_stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Small_stmtContext);
    } else {
        return this.getTypedRuleContext(Small_stmtContext,i);
    }
};

Simple_stmtContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

Simple_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSimple_stmt(this);
	}
};

Simple_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSimple_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Simple_stmtContext = Simple_stmtContext;

PythonParser.prototype.simple_stmt = function() {

    var localctx = new Simple_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PythonParser.RULE_simple_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 415;
        this.small_stmt();
        this.state = 420;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 416;
                this.match(PythonParser.SEMI_COLON);
                this.state = 417;
                this.small_stmt(); 
            }
            this.state = 422;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
        }

        this.state = 424;
        _la = this._input.LA(1);
        if(_la===PythonParser.SEMI_COLON) {
            this.state = 423;
            this.match(PythonParser.SEMI_COLON);
        }

        this.state = 426;
        this.match(PythonParser.NEWLINE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Small_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_small_stmt;
    return this;
}

Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;

Small_stmtContext.prototype.expr_stmt = function() {
    return this.getTypedRuleContext(Expr_stmtContext,0);
};

Small_stmtContext.prototype.del_stmt = function() {
    return this.getTypedRuleContext(Del_stmtContext,0);
};

Small_stmtContext.prototype.pass_stmt = function() {
    return this.getTypedRuleContext(Pass_stmtContext,0);
};

Small_stmtContext.prototype.flow_stmt = function() {
    return this.getTypedRuleContext(Flow_stmtContext,0);
};

Small_stmtContext.prototype.import_stmt = function() {
    return this.getTypedRuleContext(Import_stmtContext,0);
};

Small_stmtContext.prototype.global_stmt = function() {
    return this.getTypedRuleContext(Global_stmtContext,0);
};

Small_stmtContext.prototype.nonlocal_stmt = function() {
    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
};

Small_stmtContext.prototype.assert_stmt = function() {
    return this.getTypedRuleContext(Assert_stmtContext,0);
};

Small_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSmall_stmt(this);
	}
};

Small_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSmall_stmt(this);
	}
};

Small_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSmall_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Small_stmtContext = Small_stmtContext;

PythonParser.prototype.small_stmt = function() {

    var localctx = new Small_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PythonParser.RULE_small_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 436;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 428;
            this.expr_stmt();
            break;
        case PythonParser.DEL:
            this.state = 429;
            this.del_stmt();
            break;
        case PythonParser.PASS:
            this.state = 430;
            this.pass_stmt();
            break;
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.YIELD:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
            this.state = 431;
            this.flow_stmt();
            break;
        case PythonParser.FROM:
        case PythonParser.IMPORT:
            this.state = 432;
            this.import_stmt();
            break;
        case PythonParser.GLOBAL:
            this.state = 433;
            this.global_stmt();
            break;
        case PythonParser.NONLOCAL:
            this.state = 434;
            this.nonlocal_stmt();
            break;
        case PythonParser.ASSERT:
            this.state = 435;
            this.assert_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Expr_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_expr_stmt;
    return this;
}

Expr_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;

Expr_stmtContext.prototype.testlist_star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Testlist_star_exprContext);
    } else {
        return this.getTypedRuleContext(Testlist_star_exprContext,i);
    }
};

Expr_stmtContext.prototype.annassign = function() {
    return this.getTypedRuleContext(AnnassignContext,0);
};

Expr_stmtContext.prototype.augassign = function() {
    return this.getTypedRuleContext(AugassignContext,0);
};

Expr_stmtContext.prototype.yield_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Yield_exprContext);
    } else {
        return this.getTypedRuleContext(Yield_exprContext,i);
    }
};

Expr_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Expr_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExpr_stmt(this);
	}
};

Expr_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExpr_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Expr_stmtContext = Expr_stmtContext;

PythonParser.prototype.expr_stmt = function() {

    var localctx = new Expr_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PythonParser.RULE_expr_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 438;
        this.testlist_star_expr();
        this.state = 455;
        switch(this._input.LA(1)) {
        case PythonParser.COLON:
            this.state = 439;
            this.annassign();
            break;
        case PythonParser.ADD_ASSIGN:
        case PythonParser.SUB_ASSIGN:
        case PythonParser.MULT_ASSIGN:
        case PythonParser.AT_ASSIGN:
        case PythonParser.DIV_ASSIGN:
        case PythonParser.MOD_ASSIGN:
        case PythonParser.AND_ASSIGN:
        case PythonParser.OR_ASSIGN:
        case PythonParser.XOR_ASSIGN:
        case PythonParser.LEFT_SHIFT_ASSIGN:
        case PythonParser.RIGHT_SHIFT_ASSIGN:
        case PythonParser.POWER_ASSIGN:
        case PythonParser.IDIV_ASSIGN:
            this.state = 440;
            this.augassign();
            this.state = 443;
            switch(this._input.LA(1)) {
            case PythonParser.YIELD:
                this.state = 441;
                this.yield_expr();
                break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 442;
                this.testlist();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case PythonParser.NEWLINE:
        case PythonParser.SEMI_COLON:
        case PythonParser.ASSIGN:
            this.state = 452;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.ASSIGN) {
                this.state = 445;
                this.match(PythonParser.ASSIGN);
                this.state = 448;
                switch(this._input.LA(1)) {
                case PythonParser.YIELD:
                    this.state = 446;
                    this.yield_expr();
                    break;
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.LAMBDA:
                case PythonParser.NOT:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.STAR:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 447;
                    this.testlist_star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 454;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_annassign;
    return this;
}

AnnassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnassignContext.prototype.constructor = AnnassignContext;

AnnassignContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

AnnassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnnassign(this);
	}
};

AnnassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnnassign(this);
	}
};

AnnassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnnassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AnnassignContext = AnnassignContext;

PythonParser.prototype.annassign = function() {

    var localctx = new AnnassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PythonParser.RULE_annassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this.match(PythonParser.COLON);
        this.state = 458;
        this.test();
        this.state = 461;
        _la = this._input.LA(1);
        if(_la===PythonParser.ASSIGN) {
            this.state = 459;
            this.match(PythonParser.ASSIGN);
            this.state = 460;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_star_expr;
    return this;
}

Testlist_star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_star_exprContext.prototype.constructor = Testlist_star_exprContext;

Testlist_star_exprContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_star_exprContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist_star_expr(this);
	}
};

Testlist_star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist_star_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_star_exprContext = Testlist_star_exprContext;

PythonParser.prototype.testlist_star_expr = function() {

    var localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PythonParser.RULE_testlist_star_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 463;
            this.test();
            break;
        case PythonParser.STAR:
            this.state = 464;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 474;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 467;
                this.match(PythonParser.COMMA);
                this.state = 470;
                switch(this._input.LA(1)) {
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.LAMBDA:
                case PythonParser.NOT:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 468;
                    this.test();
                    break;
                case PythonParser.STAR:
                    this.state = 469;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 476;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 478;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 477;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AugassignContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_augassign;
    return this;
}

AugassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AugassignContext.prototype.constructor = AugassignContext;


AugassignContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAugassign(this);
	}
};

AugassignContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAugassign(this);
	}
};

AugassignContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAugassign(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AugassignContext = AugassignContext;

PythonParser.prototype.augassign = function() {

    var localctx = new AugassignContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PythonParser.RULE_augassign);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        _la = this._input.LA(1);
        if(!(((((_la - 83)) & ~0x1f) == 0 && ((1 << (_la - 83)) & ((1 << (PythonParser.ADD_ASSIGN - 83)) | (1 << (PythonParser.SUB_ASSIGN - 83)) | (1 << (PythonParser.MULT_ASSIGN - 83)) | (1 << (PythonParser.AT_ASSIGN - 83)) | (1 << (PythonParser.DIV_ASSIGN - 83)) | (1 << (PythonParser.MOD_ASSIGN - 83)) | (1 << (PythonParser.AND_ASSIGN - 83)) | (1 << (PythonParser.OR_ASSIGN - 83)) | (1 << (PythonParser.XOR_ASSIGN - 83)) | (1 << (PythonParser.LEFT_SHIFT_ASSIGN - 83)) | (1 << (PythonParser.RIGHT_SHIFT_ASSIGN - 83)) | (1 << (PythonParser.POWER_ASSIGN - 83)) | (1 << (PythonParser.IDIV_ASSIGN - 83)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Del_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_del_stmt;
    return this;
}

Del_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;

Del_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Del_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDel_stmt(this);
	}
};

Del_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDel_stmt(this);
	}
};

Del_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDel_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Del_stmtContext = Del_stmtContext;

PythonParser.prototype.del_stmt = function() {

    var localctx = new Del_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PythonParser.RULE_del_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.match(PythonParser.DEL);
        this.state = 483;
        this.exprlist();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Pass_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_pass_stmt;
    return this;
}

Pass_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;


Pass_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterPass_stmt(this);
	}
};

Pass_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitPass_stmt(this);
	}
};

Pass_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitPass_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Pass_stmtContext = Pass_stmtContext;

PythonParser.prototype.pass_stmt = function() {

    var localctx = new Pass_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PythonParser.RULE_pass_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.match(PythonParser.PASS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Flow_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_flow_stmt;
    return this;
}

Flow_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flow_stmtContext.prototype.constructor = Flow_stmtContext;

Flow_stmtContext.prototype.break_stmt = function() {
    return this.getTypedRuleContext(Break_stmtContext,0);
};

Flow_stmtContext.prototype.continue_stmt = function() {
    return this.getTypedRuleContext(Continue_stmtContext,0);
};

Flow_stmtContext.prototype.return_stmt = function() {
    return this.getTypedRuleContext(Return_stmtContext,0);
};

Flow_stmtContext.prototype.raise_stmt = function() {
    return this.getTypedRuleContext(Raise_stmtContext,0);
};

Flow_stmtContext.prototype.yield_stmt = function() {
    return this.getTypedRuleContext(Yield_stmtContext,0);
};

Flow_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFlow_stmt(this);
	}
};

Flow_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFlow_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Flow_stmtContext = Flow_stmtContext;

PythonParser.prototype.flow_stmt = function() {

    var localctx = new Flow_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PythonParser.RULE_flow_stmt);
    try {
        this.state = 492;
        switch(this._input.LA(1)) {
        case PythonParser.BREAK:
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.break_stmt();
            break;
        case PythonParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 488;
            this.continue_stmt();
            break;
        case PythonParser.RETURN:
            this.enterOuterAlt(localctx, 3);
            this.state = 489;
            this.return_stmt();
            break;
        case PythonParser.RAISE:
            this.enterOuterAlt(localctx, 4);
            this.state = 490;
            this.raise_stmt();
            break;
        case PythonParser.YIELD:
            this.enterOuterAlt(localctx, 5);
            this.state = 491;
            this.yield_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Break_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_break_stmt;
    return this;
}

Break_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;


Break_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterBreak_stmt(this);
	}
};

Break_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitBreak_stmt(this);
	}
};

Break_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitBreak_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Break_stmtContext = Break_stmtContext;

PythonParser.prototype.break_stmt = function() {

    var localctx = new Break_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PythonParser.RULE_break_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 494;
        this.match(PythonParser.BREAK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Continue_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_continue_stmt;
    return this;
}

Continue_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;


Continue_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitContinue_stmt(this);
	}
};

Continue_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitContinue_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Continue_stmtContext = Continue_stmtContext;

PythonParser.prototype.continue_stmt = function() {

    var localctx = new Continue_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PythonParser.RULE_continue_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.match(PythonParser.CONTINUE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Return_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_return_stmt;
    return this;
}

Return_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;

Return_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Return_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterReturn_stmt(this);
	}
};

Return_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitReturn_stmt(this);
	}
};

Return_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitReturn_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Return_stmtContext = Return_stmtContext;

PythonParser.prototype.return_stmt = function() {

    var localctx = new Return_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PythonParser.RULE_return_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.match(PythonParser.RETURN);
        this.state = 500;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 499;
            this.testlist();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_stmt;
    return this;
}

Yield_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;

Yield_stmtContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

Yield_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_stmt(this);
	}
};

Yield_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_stmt(this);
	}
};

Yield_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_stmtContext = Yield_stmtContext;

PythonParser.prototype.yield_stmt = function() {

    var localctx = new Yield_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PythonParser.RULE_yield_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 502;
        this.yield_expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Raise_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_raise_stmt;
    return this;
}

Raise_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;

Raise_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Raise_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitRaise_stmt(this);
	}
};

Raise_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitRaise_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Raise_stmtContext = Raise_stmtContext;

PythonParser.prototype.raise_stmt = function() {

    var localctx = new Raise_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PythonParser.RULE_raise_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.match(PythonParser.RAISE);
        this.state = 510;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 505;
            this.test();
            this.state = 508;
            _la = this._input.LA(1);
            if(_la===PythonParser.FROM) {
                this.state = 506;
                this.match(PythonParser.FROM);
                this.state = 507;
                this.test();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_stmt;
    return this;
}

Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;

Import_stmtContext.prototype.import_name = function() {
    return this.getTypedRuleContext(Import_nameContext,0);
};

Import_stmtContext.prototype.import_from = function() {
    return this.getTypedRuleContext(Import_fromContext,0);
};

Import_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_stmt(this);
	}
};

Import_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_stmt(this);
	}
};

Import_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_stmtContext = Import_stmtContext;

PythonParser.prototype.import_stmt = function() {

    var localctx = new Import_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PythonParser.RULE_import_stmt);
    try {
        this.state = 514;
        switch(this._input.LA(1)) {
        case PythonParser.IMPORT:
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.import_name();
            break;
        case PythonParser.FROM:
            this.enterOuterAlt(localctx, 2);
            this.state = 513;
            this.import_from();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_name;
    return this;
}

Import_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_nameContext.prototype.constructor = Import_nameContext;

Import_nameContext.prototype.dotted_as_names = function() {
    return this.getTypedRuleContext(Dotted_as_namesContext,0);
};

Import_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_name(this);
	}
};

Import_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_name(this);
	}
};

Import_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_nameContext = Import_nameContext;

PythonParser.prototype.import_name = function() {

    var localctx = new Import_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PythonParser.RULE_import_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 516;
        this.match(PythonParser.IMPORT);
        this.state = 517;
        this.dotted_as_names();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_fromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_from;
    return this;
}

Import_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_fromContext.prototype.constructor = Import_fromContext;

Import_fromContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Import_fromContext.prototype.import_as_names = function() {
    return this.getTypedRuleContext(Import_as_namesContext,0);
};

Import_fromContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_from(this);
	}
};

Import_fromContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_from(this);
	}
};

Import_fromContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_from(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_fromContext = Import_fromContext;

PythonParser.prototype.import_from = function() {

    var localctx = new Import_fromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PythonParser.RULE_import_from);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(PythonParser.FROM);
        this.state = 532;
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.state = 523;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS) {
                this.state = 520;
                _la = this._input.LA(1);
                if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 525;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 526;
            this.dotted_name();
            break;

        case 2:
            this.state = 528; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 527;
                _la = this._input.LA(1);
                if(!(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 530; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.DOT || _la===PythonParser.ELLIPSIS);
            break;

        }
        this.state = 534;
        this.match(PythonParser.IMPORT);
        this.state = 541;
        switch(this._input.LA(1)) {
        case PythonParser.STAR:
            this.state = 535;
            this.match(PythonParser.STAR);
            break;
        case PythonParser.OPEN_PAREN:
            this.state = 536;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 537;
            this.import_as_names();
            this.state = 538;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.NAME:
            this.state = 540;
            this.import_as_names();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_name;
    return this;
}

Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;

Import_as_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Import_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_as_name(this);
	}
};

Import_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_as_name(this);
	}
};

Import_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_nameContext = Import_as_nameContext;

PythonParser.prototype.import_as_name = function() {

    var localctx = new Import_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PythonParser.RULE_import_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(PythonParser.NAME);
        this.state = 546;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 544;
            this.match(PythonParser.AS);
            this.state = 545;
            this.match(PythonParser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_name;
    return this;
}

Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;

Dotted_as_nameContext.prototype.dotted_name = function() {
    return this.getTypedRuleContext(Dotted_nameContext,0);
};

Dotted_as_nameContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Dotted_as_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_as_name(this);
	}
};

Dotted_as_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_as_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_nameContext = Dotted_as_nameContext;

PythonParser.prototype.dotted_as_name = function() {

    var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PythonParser.RULE_dotted_as_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.dotted_name();
        this.state = 551;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 549;
            this.match(PythonParser.AS);
            this.state = 550;
            this.match(PythonParser.NAME);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Import_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_import_as_names;
    return this;
}

Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;

Import_as_namesContext.prototype.import_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Import_as_nameContext);
    } else {
        return this.getTypedRuleContext(Import_as_nameContext,i);
    }
};

Import_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterImport_as_names(this);
	}
};

Import_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitImport_as_names(this);
	}
};

Import_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitImport_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Import_as_namesContext = Import_as_namesContext;

PythonParser.prototype.import_as_names = function() {

    var localctx = new Import_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PythonParser.RULE_import_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 553;
        this.import_as_name();
        this.state = 558;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 554;
                this.match(PythonParser.COMMA);
                this.state = 555;
                this.import_as_name(); 
            }
            this.state = 560;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
        }

        this.state = 562;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 561;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_as_namesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_as_names;
    return this;
}

Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;

Dotted_as_namesContext.prototype.dotted_as_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Dotted_as_nameContext);
    } else {
        return this.getTypedRuleContext(Dotted_as_nameContext,i);
    }
};

Dotted_as_namesContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_as_names(this);
	}
};

Dotted_as_namesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_as_names(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_as_namesContext = Dotted_as_namesContext;

PythonParser.prototype.dotted_as_names = function() {

    var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PythonParser.RULE_dotted_as_names);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.dotted_as_name();
        this.state = 569;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 565;
            this.match(PythonParser.COMMA);
            this.state = 566;
            this.dotted_as_name();
            this.state = 571;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Dotted_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dotted_name;
    return this;
}

Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;

Dotted_nameContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Dotted_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDotted_name(this);
	}
};

Dotted_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDotted_name(this);
	}
};

Dotted_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDotted_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Dotted_nameContext = Dotted_nameContext;

PythonParser.prototype.dotted_name = function() {

    var localctx = new Dotted_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PythonParser.RULE_dotted_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(PythonParser.NAME);
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.DOT) {
            this.state = 573;
            this.match(PythonParser.DOT);
            this.state = 574;
            this.match(PythonParser.NAME);
            this.state = 579;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Global_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_global_stmt;
    return this;
}

Global_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;

Global_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Global_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitGlobal_stmt(this);
	}
};

Global_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitGlobal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Global_stmtContext = Global_stmtContext;

PythonParser.prototype.global_stmt = function() {

    var localctx = new Global_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PythonParser.RULE_global_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.match(PythonParser.GLOBAL);
        this.state = 581;
        this.match(PythonParser.NAME);
        this.state = 586;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 582;
            this.match(PythonParser.COMMA);
            this.state = 583;
            this.match(PythonParser.NAME);
            this.state = 588;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Nonlocal_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_nonlocal_stmt;
    return this;
}

Nonlocal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonlocal_stmtContext.prototype.constructor = Nonlocal_stmtContext;

Nonlocal_stmtContext.prototype.NAME = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.NAME);
    } else {
        return this.getToken(PythonParser.NAME, i);
    }
};


Nonlocal_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitNonlocal_stmt(this);
	}
};

Nonlocal_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitNonlocal_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Nonlocal_stmtContext = Nonlocal_stmtContext;

PythonParser.prototype.nonlocal_stmt = function() {

    var localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, PythonParser.RULE_nonlocal_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(PythonParser.NONLOCAL);
        this.state = 590;
        this.match(PythonParser.NAME);
        this.state = 595;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 591;
            this.match(PythonParser.COMMA);
            this.state = 592;
            this.match(PythonParser.NAME);
            this.state = 597;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Assert_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_assert_stmt;
    return this;
}

Assert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;

Assert_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Assert_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAssert_stmt(this);
	}
};

Assert_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAssert_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Assert_stmtContext = Assert_stmtContext;

PythonParser.prototype.assert_stmt = function() {

    var localctx = new Assert_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, PythonParser.RULE_assert_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 598;
        this.match(PythonParser.ASSERT);
        this.state = 599;
        this.test();
        this.state = 602;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 600;
            this.match(PythonParser.COMMA);
            this.state = 601;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Compound_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_compound_stmt;
    return this;
}

Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;

Compound_stmtContext.prototype.if_stmt = function() {
    return this.getTypedRuleContext(If_stmtContext,0);
};

Compound_stmtContext.prototype.while_stmt = function() {
    return this.getTypedRuleContext(While_stmtContext,0);
};

Compound_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Compound_stmtContext.prototype.try_stmt = function() {
    return this.getTypedRuleContext(Try_stmtContext,0);
};

Compound_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Compound_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Compound_stmtContext.prototype.classdef = function() {
    return this.getTypedRuleContext(ClassdefContext,0);
};

Compound_stmtContext.prototype.decorated = function() {
    return this.getTypedRuleContext(DecoratedContext,0);
};

Compound_stmtContext.prototype.async_stmt = function() {
    return this.getTypedRuleContext(Async_stmtContext,0);
};

Compound_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitCompound_stmt(this);
	}
};

Compound_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitCompound_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Compound_stmtContext = Compound_stmtContext;

PythonParser.prototype.compound_stmt = function() {

    var localctx = new Compound_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, PythonParser.RULE_compound_stmt);
    try {
        this.state = 613;
        switch(this._input.LA(1)) {
        case PythonParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 604;
            this.if_stmt();
            break;
        case PythonParser.WHILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 605;
            this.while_stmt();
            break;
        case PythonParser.FOR:
            this.enterOuterAlt(localctx, 3);
            this.state = 606;
            this.for_stmt();
            break;
        case PythonParser.TRY:
            this.enterOuterAlt(localctx, 4);
            this.state = 607;
            this.try_stmt();
            break;
        case PythonParser.WITH:
            this.enterOuterAlt(localctx, 5);
            this.state = 608;
            this.with_stmt();
            break;
        case PythonParser.DEF:
            this.enterOuterAlt(localctx, 6);
            this.state = 609;
            this.funcdef();
            break;
        case PythonParser.CLASS:
            this.enterOuterAlt(localctx, 7);
            this.state = 610;
            this.classdef();
            break;
        case PythonParser.AT:
            this.enterOuterAlt(localctx, 8);
            this.state = 611;
            this.decorated();
            break;
        case PythonParser.ASYNC:
            this.enterOuterAlt(localctx, 9);
            this.state = 612;
            this.async_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Async_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_async_stmt;
    return this;
}

Async_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_stmtContext.prototype.constructor = Async_stmtContext;

Async_stmtContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Async_stmtContext.prototype.funcdef = function() {
    return this.getTypedRuleContext(FuncdefContext,0);
};

Async_stmtContext.prototype.with_stmt = function() {
    return this.getTypedRuleContext(With_stmtContext,0);
};

Async_stmtContext.prototype.for_stmt = function() {
    return this.getTypedRuleContext(For_stmtContext,0);
};

Async_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAsync_stmt(this);
	}
};

Async_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAsync_stmt(this);
	}
};

Async_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAsync_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Async_stmtContext = Async_stmtContext;

PythonParser.prototype.async_stmt = function() {

    var localctx = new Async_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, PythonParser.RULE_async_stmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 615;
        this.match(PythonParser.ASYNC);
        this.state = 619;
        switch(this._input.LA(1)) {
        case PythonParser.DEF:
            this.state = 616;
            this.funcdef();
            break;
        case PythonParser.WITH:
            this.state = 617;
            this.with_stmt();
            break;
        case PythonParser.FOR:
            this.state = 618;
            this.for_stmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function If_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_if_stmt;
    return this;
}

If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;

If_stmtContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

If_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

If_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterIf_stmt(this);
	}
};

If_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitIf_stmt(this);
	}
};

If_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitIf_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.If_stmtContext = If_stmtContext;

PythonParser.prototype.if_stmt = function() {

    var localctx = new If_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, PythonParser.RULE_if_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(PythonParser.IF);
        this.state = 622;
        this.test();
        this.state = 623;
        this.match(PythonParser.COLON);
        this.state = 624;
        this.suite();
        this.state = 632;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.ELIF) {
            this.state = 625;
            this.match(PythonParser.ELIF);
            this.state = 626;
            this.test();
            this.state = 627;
            this.match(PythonParser.COLON);
            this.state = 628;
            this.suite();
            this.state = 634;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 638;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 635;
            this.match(PythonParser.ELSE);
            this.state = 636;
            this.match(PythonParser.COLON);
            this.state = 637;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function While_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_while_stmt;
    return this;
}

While_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;

While_stmtContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

While_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

While_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWhile_stmt(this);
	}
};

While_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWhile_stmt(this);
	}
};

While_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWhile_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.While_stmtContext = While_stmtContext;

PythonParser.prototype.while_stmt = function() {

    var localctx = new While_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, PythonParser.RULE_while_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(PythonParser.WHILE);
        this.state = 641;
        this.test();
        this.state = 642;
        this.match(PythonParser.COLON);
        this.state = 643;
        this.suite();
        this.state = 647;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 644;
            this.match(PythonParser.ELSE);
            this.state = 645;
            this.match(PythonParser.COLON);
            this.state = 646;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function For_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_for_stmt;
    return this;
}

For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;

For_stmtContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

For_stmtContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

For_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

For_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFor_stmt(this);
	}
};

For_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFor_stmt(this);
	}
};

For_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFor_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.For_stmtContext = For_stmtContext;

PythonParser.prototype.for_stmt = function() {

    var localctx = new For_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, PythonParser.RULE_for_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 649;
        this.match(PythonParser.FOR);
        this.state = 650;
        this.exprlist();
        this.state = 651;
        this.match(PythonParser.IN);
        this.state = 652;
        this.testlist();
        this.state = 653;
        this.match(PythonParser.COLON);
        this.state = 654;
        this.suite();
        this.state = 658;
        _la = this._input.LA(1);
        if(_la===PythonParser.ELSE) {
            this.state = 655;
            this.match(PythonParser.ELSE);
            this.state = 656;
            this.match(PythonParser.COLON);
            this.state = 657;
            this.suite();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Try_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_try_stmt;
    return this;
}

Try_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;

Try_stmtContext.prototype.suite = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SuiteContext);
    } else {
        return this.getTypedRuleContext(SuiteContext,i);
    }
};

Try_stmtContext.prototype.except_clause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Except_clauseContext);
    } else {
        return this.getTypedRuleContext(Except_clauseContext,i);
    }
};

Try_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTry_stmt(this);
	}
};

Try_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTry_stmt(this);
	}
};

Try_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTry_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Try_stmtContext = Try_stmtContext;

PythonParser.prototype.try_stmt = function() {

    var localctx = new Try_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, PythonParser.RULE_try_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this.match(PythonParser.TRY);
        this.state = 661;
        this.match(PythonParser.COLON);
        this.state = 662;
        this.suite();
        this.state = 684;
        switch(this._input.LA(1)) {
        case PythonParser.EXCEPT:
            this.state = 667; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 663;
                this.except_clause();
                this.state = 664;
                this.match(PythonParser.COLON);
                this.state = 665;
                this.suite();
                this.state = 669; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.EXCEPT);
            this.state = 674;
            _la = this._input.LA(1);
            if(_la===PythonParser.ELSE) {
                this.state = 671;
                this.match(PythonParser.ELSE);
                this.state = 672;
                this.match(PythonParser.COLON);
                this.state = 673;
                this.suite();
            }

            this.state = 679;
            _la = this._input.LA(1);
            if(_la===PythonParser.FINALLY) {
                this.state = 676;
                this.match(PythonParser.FINALLY);
                this.state = 677;
                this.match(PythonParser.COLON);
                this.state = 678;
                this.suite();
            }

            break;
        case PythonParser.FINALLY:
            this.state = 681;
            this.match(PythonParser.FINALLY);
            this.state = 682;
            this.match(PythonParser.COLON);
            this.state = 683;
            this.suite();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_stmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_with_stmt;
    return this;
}

With_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;

With_stmtContext.prototype.with_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(With_itemContext);
    } else {
        return this.getTypedRuleContext(With_itemContext,i);
    }
};

With_stmtContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

With_stmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWith_stmt(this);
	}
};

With_stmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWith_stmt(this);
	}
};

With_stmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWith_stmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.With_stmtContext = With_stmtContext;

PythonParser.prototype.with_stmt = function() {

    var localctx = new With_stmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, PythonParser.RULE_with_stmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this.match(PythonParser.WITH);
        this.state = 687;
        this.with_item();
        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.COMMA) {
            this.state = 688;
            this.match(PythonParser.COMMA);
            this.state = 689;
            this.with_item();
            this.state = 694;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 695;
        this.match(PythonParser.COLON);
        this.state = 696;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function With_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_with_item;
    return this;
}

With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;

With_itemContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

With_itemContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

With_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterWith_item(this);
	}
};

With_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitWith_item(this);
	}
};

With_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitWith_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.With_itemContext = With_itemContext;

PythonParser.prototype.with_item = function() {

    var localctx = new With_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, PythonParser.RULE_with_item);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.test();
        this.state = 701;
        _la = this._input.LA(1);
        if(_la===PythonParser.AS) {
            this.state = 699;
            this.match(PythonParser.AS);
            this.state = 700;
            this.expr();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Except_clauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_except_clause;
    return this;
}

Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;

Except_clauseContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Except_clauseContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Except_clauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExcept_clause(this);
	}
};

Except_clauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExcept_clause(this);
	}
};

Except_clauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExcept_clause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Except_clauseContext = Except_clauseContext;

PythonParser.prototype.except_clause = function() {

    var localctx = new Except_clauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, PythonParser.RULE_except_clause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(PythonParser.EXCEPT);
        this.state = 709;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 704;
            this.test();
            this.state = 707;
            _la = this._input.LA(1);
            if(_la===PythonParser.AS) {
                this.state = 705;
                this.match(PythonParser.AS);
                this.state = 706;
                this.match(PythonParser.NAME);
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuiteContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_suite;
    return this;
}

SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;

SuiteContext.prototype.simple_stmt = function() {
    return this.getTypedRuleContext(Simple_stmtContext,0);
};

SuiteContext.prototype.NEWLINE = function() {
    return this.getToken(PythonParser.NEWLINE, 0);
};

SuiteContext.prototype.INDENT = function() {
    return this.getToken(PythonParser.INDENT, 0);
};

SuiteContext.prototype.DEDENT = function() {
    return this.getToken(PythonParser.DEDENT, 0);
};

SuiteContext.prototype.stmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StmtContext);
    } else {
        return this.getTypedRuleContext(StmtContext,i);
    }
};

SuiteContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSuite(this);
	}
};

SuiteContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSuite(this);
	}
};

SuiteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSuite(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SuiteContext = SuiteContext;

PythonParser.prototype.suite = function() {

    var localctx = new SuiteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, PythonParser.RULE_suite);
    var _la = 0; // Token type
    try {
        this.state = 721;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.RETURN:
        case PythonParser.RAISE:
        case PythonParser.FROM:
        case PythonParser.IMPORT:
        case PythonParser.GLOBAL:
        case PythonParser.NONLOCAL:
        case PythonParser.ASSERT:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.YIELD:
        case PythonParser.DEL:
        case PythonParser.PASS:
        case PythonParser.CONTINUE:
        case PythonParser.BREAK:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.STAR:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 711;
            this.simple_stmt();
            break;
        case PythonParser.NEWLINE:
            this.enterOuterAlt(localctx, 2);
            this.state = 712;
            this.match(PythonParser.NEWLINE);
            this.state = 713;
            this.match(PythonParser.INDENT);
            this.state = 715; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 714;
                this.stmt();
                this.state = 717; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.DEF) | (1 << PythonParser.RETURN) | (1 << PythonParser.RAISE) | (1 << PythonParser.FROM) | (1 << PythonParser.IMPORT) | (1 << PythonParser.GLOBAL) | (1 << PythonParser.NONLOCAL) | (1 << PythonParser.ASSERT) | (1 << PythonParser.IF) | (1 << PythonParser.WHILE) | (1 << PythonParser.FOR) | (1 << PythonParser.TRY) | (1 << PythonParser.WITH) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE) | (1 << PythonParser.CLASS))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PythonParser.YIELD - 32)) | (1 << (PythonParser.DEL - 32)) | (1 << (PythonParser.PASS - 32)) | (1 << (PythonParser.CONTINUE - 32)) | (1 << (PythonParser.BREAK - 32)) | (1 << (PythonParser.ASYNC - 32)) | (1 << (PythonParser.AWAIT - 32)) | (1 << (PythonParser.NAME - 32)) | (1 << (PythonParser.ELLIPSIS - 32)) | (1 << (PythonParser.STAR - 32)) | (1 << (PythonParser.OPEN_PAREN - 32)) | (1 << (PythonParser.OPEN_BRACK - 32)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)) | (1 << (PythonParser.OPEN_BRACE - 66)) | (1 << (PythonParser.AT - 66)))) !== 0));
            this.state = 719;
            this.match(PythonParser.DEDENT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_test;
    return this;
}

TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;

TestContext.prototype.or_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Or_testContext);
    } else {
        return this.getTypedRuleContext(Or_testContext,i);
    }
};

TestContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

TestContext.prototype.lambdef = function() {
    return this.getTypedRuleContext(LambdefContext,0);
};

TestContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTest(this);
	}
};

TestContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTest(this);
	}
};

TestContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTest(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestContext = TestContext;

PythonParser.prototype.test = function() {

    var localctx = new TestContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, PythonParser.RULE_test);
    var _la = 0; // Token type
    try {
        this.state = 732;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 723;
            this.or_test();
            this.state = 729;
            _la = this._input.LA(1);
            if(_la===PythonParser.IF) {
                this.state = 724;
                this.match(PythonParser.IF);
                this.state = 725;
                this.or_test();
                this.state = 726;
                this.match(PythonParser.ELSE);
                this.state = 727;
                this.test();
            }

            break;
        case PythonParser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 731;
            this.lambdef();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Test_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_test_nocond;
    return this;
}

Test_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_nocondContext.prototype.constructor = Test_nocondContext;

Test_nocondContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Test_nocondContext.prototype.lambdef_nocond = function() {
    return this.getTypedRuleContext(Lambdef_nocondContext,0);
};

Test_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTest_nocond(this);
	}
};

Test_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTest_nocond(this);
	}
};

Test_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTest_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Test_nocondContext = Test_nocondContext;

PythonParser.prototype.test_nocond = function() {

    var localctx = new Test_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, PythonParser.RULE_test_nocond);
    try {
        this.state = 736;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 734;
            this.or_test();
            break;
        case PythonParser.LAMBDA:
            this.enterOuterAlt(localctx, 2);
            this.state = 735;
            this.lambdef_nocond();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LambdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_lambdef;
    return this;
}

LambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdefContext.prototype.constructor = LambdefContext;

LambdefContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

LambdefContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

LambdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterLambdef(this);
	}
};

LambdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitLambdef(this);
	}
};

LambdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitLambdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.LambdefContext = LambdefContext;

PythonParser.prototype.lambdef = function() {

    var localctx = new LambdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, PythonParser.RULE_lambdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 738;
        this.match(PythonParser.LAMBDA);
        this.state = 740;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 739;
            this.varargslist();
        }

        this.state = 742;
        this.match(PythonParser.COLON);
        this.state = 743;
        this.test();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Lambdef_nocondContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_lambdef_nocond;
    return this;
}

Lambdef_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambdef_nocondContext.prototype.constructor = Lambdef_nocondContext;

Lambdef_nocondContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Lambdef_nocondContext.prototype.varargslist = function() {
    return this.getTypedRuleContext(VarargslistContext,0);
};

Lambdef_nocondContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitLambdef_nocond(this);
	}
};

Lambdef_nocondContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitLambdef_nocond(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Lambdef_nocondContext = Lambdef_nocondContext;

PythonParser.prototype.lambdef_nocond = function() {

    var localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, PythonParser.RULE_lambdef_nocond);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 745;
        this.match(PythonParser.LAMBDA);
        this.state = 747;
        _la = this._input.LA(1);
        if(((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (PythonParser.NAME - 40)) | (1 << (PythonParser.STAR - 40)) | (1 << (PythonParser.POWER - 40)))) !== 0)) {
            this.state = 746;
            this.varargslist();
        }

        this.state = 749;
        this.match(PythonParser.COLON);
        this.state = 750;
        this.test_nocond();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Or_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_or_test;
    return this;
}

Or_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_testContext.prototype.constructor = Or_testContext;

Or_testContext.prototype.and_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_testContext);
    } else {
        return this.getTypedRuleContext(And_testContext,i);
    }
};

Or_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterOr_test(this);
	}
};

Or_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitOr_test(this);
	}
};

Or_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitOr_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Or_testContext = Or_testContext;

PythonParser.prototype.or_test = function() {

    var localctx = new Or_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, PythonParser.RULE_or_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 752;
        this.and_test();
        this.state = 757;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.OR) {
            this.state = 753;
            this.match(PythonParser.OR);
            this.state = 754;
            this.and_test();
            this.state = 759;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_and_test;
    return this;
}

And_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_testContext.prototype.constructor = And_testContext;

And_testContext.prototype.not_test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Not_testContext);
    } else {
        return this.getTypedRuleContext(Not_testContext,i);
    }
};

And_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnd_test(this);
	}
};

And_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnd_test(this);
	}
};

And_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnd_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.And_testContext = And_testContext;

PythonParser.prototype.and_test = function() {

    var localctx = new And_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, PythonParser.RULE_and_test);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 760;
        this.not_test();
        this.state = 765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.AND) {
            this.state = 761;
            this.match(PythonParser.AND);
            this.state = 762;
            this.not_test();
            this.state = 767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Not_testContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_not_test;
    return this;
}

Not_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_testContext.prototype.constructor = Not_testContext;

Not_testContext.prototype.not_test = function() {
    return this.getTypedRuleContext(Not_testContext,0);
};

Not_testContext.prototype.comparison = function() {
    return this.getTypedRuleContext(ComparisonContext,0);
};

Not_testContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterNot_test(this);
	}
};

Not_testContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitNot_test(this);
	}
};

Not_testContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitNot_test(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Not_testContext = Not_testContext;

PythonParser.prototype.not_test = function() {

    var localctx = new Not_testContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, PythonParser.RULE_not_test);
    try {
        this.state = 771;
        switch(this._input.LA(1)) {
        case PythonParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 768;
            this.match(PythonParser.NOT);
            this.state = 769;
            this.not_test();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 770;
            this.comparison();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ComparisonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comparison;
    return this;
}

ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;

ComparisonContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ComparisonContext.prototype.comp_op = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Comp_opContext);
    } else {
        return this.getTypedRuleContext(Comp_opContext,i);
    }
};

ComparisonContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComparison(this);
	}
};

ComparisonContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComparison(this);
	}
};

ComparisonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComparison(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ComparisonContext = ComparisonContext;

PythonParser.prototype.comparison = function() {

    var localctx = new ComparisonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, PythonParser.RULE_comparison);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 773;
        this.expr();
        this.state = 779;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.IN) | (1 << PythonParser.NOT) | (1 << PythonParser.IS))) !== 0) || ((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (PythonParser.LESS_THAN - 74)) | (1 << (PythonParser.GREATER_THAN - 74)) | (1 << (PythonParser.EQUALS - 74)) | (1 << (PythonParser.GT_EQ - 74)) | (1 << (PythonParser.LT_EQ - 74)) | (1 << (PythonParser.NOT_EQ_1 - 74)) | (1 << (PythonParser.NOT_EQ_2 - 74)))) !== 0)) {
            this.state = 774;
            this.comp_op();
            this.state = 775;
            this.expr();
            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_op;
    return this;
}

Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;


Comp_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_op(this);
	}
};

Comp_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_op(this);
	}
};

Comp_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_opContext = Comp_opContext;

PythonParser.prototype.comp_op = function() {

    var localctx = new Comp_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, PythonParser.RULE_comp_op);
    try {
        this.state = 795;
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 782;
            this.match(PythonParser.LESS_THAN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 783;
            this.match(PythonParser.GREATER_THAN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 784;
            this.match(PythonParser.EQUALS);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 785;
            this.match(PythonParser.GT_EQ);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 786;
            this.match(PythonParser.LT_EQ);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 787;
            this.match(PythonParser.NOT_EQ_1);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 788;
            this.match(PythonParser.NOT_EQ_2);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 789;
            this.match(PythonParser.IN);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 790;
            this.match(PythonParser.NOT);
            this.state = 791;
            this.match(PythonParser.IN);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 792;
            this.match(PythonParser.IS);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 793;
            this.match(PythonParser.IS);
            this.state = 794;
            this.match(PythonParser.NOT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Star_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_star_expr;
    return this;
}

Star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Star_exprContext.prototype.constructor = Star_exprContext;

Star_exprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

Star_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterStar_expr(this);
	}
};

Star_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitStar_expr(this);
	}
};

Star_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitStar_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Star_exprContext = Star_exprContext;

PythonParser.prototype.star_expr = function() {

    var localctx = new Star_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, PythonParser.RULE_star_expr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(PythonParser.STAR);
        this.state = 798;
        this.expr();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.xor_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Xor_exprContext);
    } else {
        return this.getTypedRuleContext(Xor_exprContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExpr(this);
	}
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExpr(this);
	}
};

ExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ExprContext = ExprContext;

PythonParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, PythonParser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.xor_expr();
        this.state = 805;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.OR_OP) {
            this.state = 801;
            this.match(PythonParser.OR_OP);
            this.state = 802;
            this.xor_expr();
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Xor_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_xor_expr;
    return this;
}

Xor_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xor_exprContext.prototype.constructor = Xor_exprContext;

Xor_exprContext.prototype.and_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(And_exprContext);
    } else {
        return this.getTypedRuleContext(And_exprContext,i);
    }
};

Xor_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterXor_expr(this);
	}
};

Xor_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitXor_expr(this);
	}
};

Xor_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitXor_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Xor_exprContext = Xor_exprContext;

PythonParser.prototype.xor_expr = function() {

    var localctx = new Xor_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, PythonParser.RULE_xor_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.and_expr();
        this.state = 813;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.XOR) {
            this.state = 809;
            this.match(PythonParser.XOR);
            this.state = 810;
            this.and_expr();
            this.state = 815;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function And_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_and_expr;
    return this;
}

And_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_exprContext.prototype.constructor = And_exprContext;

And_exprContext.prototype.shift_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Shift_exprContext);
    } else {
        return this.getTypedRuleContext(Shift_exprContext,i);
    }
};

And_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAnd_expr(this);
	}
};

And_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAnd_expr(this);
	}
};

And_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAnd_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.And_exprContext = And_exprContext;

PythonParser.prototype.and_expr = function() {

    var localctx = new And_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, PythonParser.RULE_and_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this.shift_expr();
        this.state = 821;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.AND_OP) {
            this.state = 817;
            this.match(PythonParser.AND_OP);
            this.state = 818;
            this.shift_expr();
            this.state = 823;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shift_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_shift_expr;
    return this;
}

Shift_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_exprContext.prototype.constructor = Shift_exprContext;

Shift_exprContext.prototype.arith_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Arith_exprContext);
    } else {
        return this.getTypedRuleContext(Arith_exprContext,i);
    }
};

Shift_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterShift_expr(this);
	}
};

Shift_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitShift_expr(this);
	}
};

Shift_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitShift_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Shift_exprContext = Shift_exprContext;

PythonParser.prototype.shift_expr = function() {

    var localctx = new Shift_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, PythonParser.RULE_shift_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.arith_expr();
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.LEFT_SHIFT || _la===PythonParser.RIGHT_SHIFT) {
            this.state = 825;
            _la = this._input.LA(1);
            if(!(_la===PythonParser.LEFT_SHIFT || _la===PythonParser.RIGHT_SHIFT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 826;
            this.arith_expr();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Arith_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arith_expr;
    return this;
}

Arith_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arith_exprContext.prototype.constructor = Arith_exprContext;

Arith_exprContext.prototype.term = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TermContext);
    } else {
        return this.getTypedRuleContext(TermContext,i);
    }
};

Arith_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArith_expr(this);
	}
};

Arith_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArith_expr(this);
	}
};

Arith_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArith_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Arith_exprContext = Arith_exprContext;

PythonParser.prototype.arith_expr = function() {

    var localctx = new Arith_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, PythonParser.RULE_arith_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.term();
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===PythonParser.ADD || _la===PythonParser.MINUS) {
            this.state = 833;
            _la = this._input.LA(1);
            if(!(_la===PythonParser.ADD || _la===PythonParser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 834;
            this.term();
            this.state = 839;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_term;
    return this;
}

TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;

TermContext.prototype.factor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FactorContext);
    } else {
        return this.getTypedRuleContext(FactorContext,i);
    }
};

TermContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTerm(this);
	}
};

TermContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTerm(this);
	}
};

TermContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTerm(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TermContext = TermContext;

PythonParser.prototype.term = function() {

    var localctx = new TermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, PythonParser.RULE_term);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this.factor();
        this.state = 845;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (PythonParser.STAR - 51)) | (1 << (PythonParser.DIV - 51)) | (1 << (PythonParser.MOD - 51)) | (1 << (PythonParser.IDIV - 51)) | (1 << (PythonParser.AT - 51)))) !== 0)) {
            this.state = 841;
            _la = this._input.LA(1);
            if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (PythonParser.STAR - 51)) | (1 << (PythonParser.DIV - 51)) | (1 << (PythonParser.MOD - 51)) | (1 << (PythonParser.IDIV - 51)) | (1 << (PythonParser.AT - 51)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 842;
            this.factor();
            this.state = 847;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_factor;
    return this;
}

FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;

FactorContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

FactorContext.prototype.power = function() {
    return this.getTypedRuleContext(PowerContext,0);
};

FactorContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterFactor(this);
	}
};

FactorContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitFactor(this);
	}
};

FactorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitFactor(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.FactorContext = FactorContext;

PythonParser.prototype.factor = function() {

    var localctx = new FactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, PythonParser.RULE_factor);
    var _la = 0; // Token type
    try {
        this.state = 851;
        switch(this._input.LA(1)) {
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            _la = this._input.LA(1);
            if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (PythonParser.ADD - 66)) | (1 << (PythonParser.MINUS - 66)) | (1 << (PythonParser.NOT_OP - 66)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 849;
            this.factor();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 850;
            this.power();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_power;
    return this;
}

PowerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerContext.prototype.constructor = PowerContext;

PowerContext.prototype.atom_expr = function() {
    return this.getTypedRuleContext(Atom_exprContext,0);
};

PowerContext.prototype.factor = function() {
    return this.getTypedRuleContext(FactorContext,0);
};

PowerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterPower(this);
	}
};

PowerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitPower(this);
	}
};

PowerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitPower(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.PowerContext = PowerContext;

PythonParser.prototype.power = function() {

    var localctx = new PowerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, PythonParser.RULE_power);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 853;
        this.atom_expr();
        this.state = 856;
        _la = this._input.LA(1);
        if(_la===PythonParser.POWER) {
            this.state = 854;
            this.match(PythonParser.POWER);
            this.state = 855;
            this.factor();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Atom_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_atom_expr;
    return this;
}

Atom_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atom_exprContext.prototype.constructor = Atom_exprContext;

Atom_exprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

Atom_exprContext.prototype.AWAIT = function() {
    return this.getToken(PythonParser.AWAIT, 0);
};

Atom_exprContext.prototype.trailer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TrailerContext);
    } else {
        return this.getTypedRuleContext(TrailerContext,i);
    }
};

Atom_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAtom_expr(this);
	}
};

Atom_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAtom_expr(this);
	}
};

Atom_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAtom_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Atom_exprContext = Atom_exprContext;

PythonParser.prototype.atom_expr = function() {

    var localctx = new Atom_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, PythonParser.RULE_atom_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        _la = this._input.LA(1);
        if(_la===PythonParser.AWAIT) {
            this.state = 858;
            this.match(PythonParser.AWAIT);
        }

        this.state = 861;
        this.atom();
        this.state = 865;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (PythonParser.DOT - 49)) | (1 << (PythonParser.OPEN_PAREN - 49)) | (1 << (PythonParser.OPEN_BRACK - 49)))) !== 0)) {
            this.state = 862;
            this.trailer();
            this.state = 867;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

AtomContext.prototype.NUMBER = function() {
    return this.getToken(PythonParser.NUMBER, 0);
};

AtomContext.prototype.yield_expr = function() {
    return this.getTypedRuleContext(Yield_exprContext,0);
};

AtomContext.prototype.testlist_comp = function() {
    return this.getTypedRuleContext(Testlist_compContext,0);
};

AtomContext.prototype.dictorsetmaker = function() {
    return this.getTypedRuleContext(DictorsetmakerContext,0);
};

AtomContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(PythonParser.STRING);
    } else {
        return this.getToken(PythonParser.STRING, i);
    }
};


AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterAtom(this);
	}
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitAtom(this);
	}
};

AtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.AtomContext = AtomContext;

PythonParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, PythonParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 895;
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.state = 868;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 871;
            switch (this._input.LA(1)) {
            case PythonParser.YIELD:
            	this.state = 869;
            	this.yield_expr();
            	break;
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.STAR:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
            	this.state = 870;
            	this.testlist_comp();
            	break;
            case PythonParser.CLOSE_PAREN:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 873;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACK:
            this.state = 874;
            this.match(PythonParser.OPEN_BRACK);
            this.state = 876;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 875;
                this.testlist_comp();
            }

            this.state = 878;
            this.match(PythonParser.CLOSE_BRACK);
            break;
        case PythonParser.OPEN_BRACE:
            this.state = 879;
            this.match(PythonParser.OPEN_BRACE);
            this.state = 881;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 880;
                this.dictorsetmaker();
            }

            this.state = 883;
            this.match(PythonParser.CLOSE_BRACE);
            break;
        case PythonParser.NAME:
            this.state = 884;
            this.match(PythonParser.NAME);
            break;
        case PythonParser.NUMBER:
            this.state = 885;
            this.match(PythonParser.NUMBER);
            break;
        case PythonParser.STRING:
            this.state = 887; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 886;
                this.match(PythonParser.STRING);
                this.state = 889; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===PythonParser.STRING);
            break;
        case PythonParser.ELLIPSIS:
            this.state = 891;
            this.match(PythonParser.ELLIPSIS);
            break;
        case PythonParser.NONE:
            this.state = 892;
            this.match(PythonParser.NONE);
            break;
        case PythonParser.TRUE:
            this.state = 893;
            this.match(PythonParser.TRUE);
            break;
        case PythonParser.FALSE:
            this.state = 894;
            this.match(PythonParser.FALSE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Testlist_compContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist_comp;
    return this;
}

Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;

Testlist_compContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

Testlist_compContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

Testlist_compContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Testlist_compContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist_comp(this);
	}
};

Testlist_compContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist_comp(this);
	}
};

Testlist_compContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist_comp(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Testlist_compContext = Testlist_compContext;

PythonParser.prototype.testlist_comp = function() {

    var localctx = new Testlist_compContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, PythonParser.RULE_testlist_comp);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 897;
            this.test();
            break;
        case PythonParser.STAR:
            this.state = 898;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 915;
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
        case PythonParser.ASYNC:
            this.state = 901;
            this.comp_for();
            break;
        case PythonParser.CLOSE_PAREN:
        case PythonParser.COMMA:
        case PythonParser.CLOSE_BRACK:
            this.state = 909;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 902;
                    this.match(PythonParser.COMMA);
                    this.state = 905;
                    switch(this._input.LA(1)) {
                    case PythonParser.STRING:
                    case PythonParser.NUMBER:
                    case PythonParser.LAMBDA:
                    case PythonParser.NOT:
                    case PythonParser.NONE:
                    case PythonParser.TRUE:
                    case PythonParser.FALSE:
                    case PythonParser.AWAIT:
                    case PythonParser.NAME:
                    case PythonParser.ELLIPSIS:
                    case PythonParser.OPEN_PAREN:
                    case PythonParser.OPEN_BRACK:
                    case PythonParser.ADD:
                    case PythonParser.MINUS:
                    case PythonParser.NOT_OP:
                    case PythonParser.OPEN_BRACE:
                        this.state = 903;
                        this.test();
                        break;
                    case PythonParser.STAR:
                        this.state = 904;
                        this.star_expr();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    } 
                }
                this.state = 911;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
            }

            this.state = 913;
            _la = this._input.LA(1);
            if(_la===PythonParser.COMMA) {
                this.state = 912;
                this.match(PythonParser.COMMA);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TrailerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_trailer;
    return this;
}

TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;

TrailerContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

TrailerContext.prototype.subscriptlist = function() {
    return this.getTypedRuleContext(SubscriptlistContext,0);
};

TrailerContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

TrailerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTrailer(this);
	}
};

TrailerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTrailer(this);
	}
};

TrailerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTrailer(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TrailerContext = TrailerContext;

PythonParser.prototype.trailer = function() {

    var localctx = new TrailerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, PythonParser.RULE_trailer);
    var _la = 0; // Token type
    try {
        this.state = 928;
        switch(this._input.LA(1)) {
        case PythonParser.OPEN_PAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 917;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 919;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 918;
                this.arglist();
            }

            this.state = 921;
            this.match(PythonParser.CLOSE_PAREN);
            break;
        case PythonParser.OPEN_BRACK:
            this.enterOuterAlt(localctx, 2);
            this.state = 922;
            this.match(PythonParser.OPEN_BRACK);
            this.state = 923;
            this.subscriptlist();
            this.state = 924;
            this.match(PythonParser.CLOSE_BRACK);
            break;
        case PythonParser.DOT:
            this.enterOuterAlt(localctx, 3);
            this.state = 926;
            this.match(PythonParser.DOT);
            this.state = 927;
            this.match(PythonParser.NAME);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscriptlist;
    return this;
}

SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;

SubscriptlistContext.prototype.subscript = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SubscriptContext);
    } else {
        return this.getTypedRuleContext(SubscriptContext,i);
    }
};

SubscriptlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSubscriptlist(this);
	}
};

SubscriptlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSubscriptlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptlistContext = SubscriptlistContext;

PythonParser.prototype.subscriptlist = function() {

    var localctx = new SubscriptlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, PythonParser.RULE_subscriptlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 930;
        this.subscript();
        this.state = 935;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 931;
                this.match(PythonParser.COMMA);
                this.state = 932;
                this.subscript(); 
            }
            this.state = 937;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
        }

        this.state = 939;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 938;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubscriptContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_subscript;
    return this;
}

SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;

SubscriptContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

SubscriptContext.prototype.sliceop = function() {
    return this.getTypedRuleContext(SliceopContext,0);
};

SubscriptContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSubscript(this);
	}
};

SubscriptContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSubscript(this);
	}
};

SubscriptContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSubscript(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SubscriptContext = SubscriptContext;

PythonParser.prototype.subscript = function() {

    var localctx = new SubscriptContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, PythonParser.RULE_subscript);
    var _la = 0; // Token type
    try {
        this.state = 952;
        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 941;
            this.test();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 943;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 942;
                this.test();
            }

            this.state = 945;
            this.match(PythonParser.COLON);
            this.state = 947;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 946;
                this.test();
            }

            this.state = 950;
            _la = this._input.LA(1);
            if(_la===PythonParser.COLON) {
                this.state = 949;
                this.sliceop();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SliceopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_sliceop;
    return this;
}

SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;

SliceopContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

SliceopContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterSliceop(this);
	}
};

SliceopContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitSliceop(this);
	}
};

SliceopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitSliceop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.SliceopContext = SliceopContext;

PythonParser.prototype.sliceop = function() {

    var localctx = new SliceopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, PythonParser.RULE_sliceop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 954;
        this.match(PythonParser.COLON);
        this.state = 956;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 955;
            this.test();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_exprlist;
    return this;
}

ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;

ExprlistContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

ExprlistContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

ExprlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterExprlist(this);
	}
};

ExprlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitExprlist(this);
	}
};

ExprlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitExprlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ExprlistContext = ExprlistContext;

PythonParser.prototype.exprlist = function() {

    var localctx = new ExprlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, PythonParser.RULE_exprlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 960;
        switch(this._input.LA(1)) {
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.state = 958;
            this.expr();
            break;
        case PythonParser.STAR:
            this.state = 959;
            this.star_expr();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 969;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,139,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 962;
                this.match(PythonParser.COMMA);
                this.state = 965;
                switch(this._input.LA(1)) {
                case PythonParser.STRING:
                case PythonParser.NUMBER:
                case PythonParser.NONE:
                case PythonParser.TRUE:
                case PythonParser.FALSE:
                case PythonParser.AWAIT:
                case PythonParser.NAME:
                case PythonParser.ELLIPSIS:
                case PythonParser.OPEN_PAREN:
                case PythonParser.OPEN_BRACK:
                case PythonParser.ADD:
                case PythonParser.MINUS:
                case PythonParser.NOT_OP:
                case PythonParser.OPEN_BRACE:
                    this.state = 963;
                    this.expr();
                    break;
                case PythonParser.STAR:
                    this.state = 964;
                    this.star_expr();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 971;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,139,this._ctx);
        }

        this.state = 973;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 972;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TestlistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_testlist;
    return this;
}

TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;

TestlistContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

TestlistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterTestlist(this);
	}
};

TestlistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitTestlist(this);
	}
};

TestlistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitTestlist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.TestlistContext = TestlistContext;

PythonParser.prototype.testlist = function() {

    var localctx = new TestlistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, PythonParser.RULE_testlist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.test();
        this.state = 980;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 976;
                this.match(PythonParser.COMMA);
                this.state = 977;
                this.test(); 
            }
            this.state = 982;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
        }

        this.state = 984;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 983;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DictorsetmakerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_dictorsetmaker;
    return this;
}

DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;

DictorsetmakerContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

DictorsetmakerContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

DictorsetmakerContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

DictorsetmakerContext.prototype.star_expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Star_exprContext);
    } else {
        return this.getTypedRuleContext(Star_exprContext,i);
    }
};

DictorsetmakerContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitDictorsetmaker(this);
	}
};

DictorsetmakerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitDictorsetmaker(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.DictorsetmakerContext = DictorsetmakerContext;

PythonParser.prototype.dictorsetmaker = function() {

    var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, PythonParser.RULE_dictorsetmaker);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1034;
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        switch(la_) {
        case 1:
            this.state = 992;
            switch(this._input.LA(1)) {
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 986;
                this.test();
                this.state = 987;
                this.match(PythonParser.COLON);
                this.state = 988;
                this.test();
                break;
            case PythonParser.POWER:
                this.state = 990;
                this.match(PythonParser.POWER);
                this.state = 991;
                this.expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1012;
            switch(this._input.LA(1)) {
            case PythonParser.FOR:
            case PythonParser.ASYNC:
                this.state = 994;
                this.comp_for();
                break;
            case PythonParser.COMMA:
            case PythonParser.CLOSE_BRACE:
                this.state = 1006;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 995;
                        this.match(PythonParser.COMMA);
                        this.state = 1002;
                        switch(this._input.LA(1)) {
                        case PythonParser.STRING:
                        case PythonParser.NUMBER:
                        case PythonParser.LAMBDA:
                        case PythonParser.NOT:
                        case PythonParser.NONE:
                        case PythonParser.TRUE:
                        case PythonParser.FALSE:
                        case PythonParser.AWAIT:
                        case PythonParser.NAME:
                        case PythonParser.ELLIPSIS:
                        case PythonParser.OPEN_PAREN:
                        case PythonParser.OPEN_BRACK:
                        case PythonParser.ADD:
                        case PythonParser.MINUS:
                        case PythonParser.NOT_OP:
                        case PythonParser.OPEN_BRACE:
                            this.state = 996;
                            this.test();
                            this.state = 997;
                            this.match(PythonParser.COLON);
                            this.state = 998;
                            this.test();
                            break;
                        case PythonParser.POWER:
                            this.state = 1000;
                            this.match(PythonParser.POWER);
                            this.state = 1001;
                            this.expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1008;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
                }

                this.state = 1010;
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 1009;
                    this.match(PythonParser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.state = 1016;
            switch(this._input.LA(1)) {
            case PythonParser.STRING:
            case PythonParser.NUMBER:
            case PythonParser.LAMBDA:
            case PythonParser.NOT:
            case PythonParser.NONE:
            case PythonParser.TRUE:
            case PythonParser.FALSE:
            case PythonParser.AWAIT:
            case PythonParser.NAME:
            case PythonParser.ELLIPSIS:
            case PythonParser.OPEN_PAREN:
            case PythonParser.OPEN_BRACK:
            case PythonParser.ADD:
            case PythonParser.MINUS:
            case PythonParser.NOT_OP:
            case PythonParser.OPEN_BRACE:
                this.state = 1014;
                this.test();
                break;
            case PythonParser.STAR:
                this.state = 1015;
                this.star_expr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1032;
            switch(this._input.LA(1)) {
            case PythonParser.FOR:
            case PythonParser.ASYNC:
                this.state = 1018;
                this.comp_for();
                break;
            case PythonParser.COMMA:
            case PythonParser.CLOSE_BRACE:
                this.state = 1026;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 1019;
                        this.match(PythonParser.COMMA);
                        this.state = 1022;
                        switch(this._input.LA(1)) {
                        case PythonParser.STRING:
                        case PythonParser.NUMBER:
                        case PythonParser.LAMBDA:
                        case PythonParser.NOT:
                        case PythonParser.NONE:
                        case PythonParser.TRUE:
                        case PythonParser.FALSE:
                        case PythonParser.AWAIT:
                        case PythonParser.NAME:
                        case PythonParser.ELLIPSIS:
                        case PythonParser.OPEN_PAREN:
                        case PythonParser.OPEN_BRACK:
                        case PythonParser.ADD:
                        case PythonParser.MINUS:
                        case PythonParser.NOT_OP:
                        case PythonParser.OPEN_BRACE:
                            this.state = 1020;
                            this.test();
                            break;
                        case PythonParser.STAR:
                            this.state = 1021;
                            this.star_expr();
                            break;
                        default:
                            throw new antlr4.error.NoViableAltException(this);
                        } 
                    }
                    this.state = 1028;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
                }

                this.state = 1030;
                _la = this._input.LA(1);
                if(_la===PythonParser.COMMA) {
                    this.state = 1029;
                    this.match(PythonParser.COMMA);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassdefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_classdef;
    return this;
}

ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;

ClassdefContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

ClassdefContext.prototype.suite = function() {
    return this.getTypedRuleContext(SuiteContext,0);
};

ClassdefContext.prototype.arglist = function() {
    return this.getTypedRuleContext(ArglistContext,0);
};

ClassdefContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterClassdef(this);
	}
};

ClassdefContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitClassdef(this);
	}
};

ClassdefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitClassdef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ClassdefContext = ClassdefContext;

PythonParser.prototype.classdef = function() {

    var localctx = new ClassdefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, PythonParser.RULE_classdef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1036;
        this.match(PythonParser.CLASS);
        this.state = 1037;
        this.match(PythonParser.NAME);
        this.state = 1043;
        _la = this._input.LA(1);
        if(_la===PythonParser.OPEN_PAREN) {
            this.state = 1038;
            this.match(PythonParser.OPEN_PAREN);
            this.state = 1040;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.STAR - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.POWER - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
                this.state = 1039;
                this.arglist();
            }

            this.state = 1042;
            this.match(PythonParser.CLOSE_PAREN);
        }

        this.state = 1045;
        this.match(PythonParser.COLON);
        this.state = 1046;
        this.suite();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArglistContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_arglist;
    return this;
}

ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;

ArglistContext.prototype.argument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentContext);
    } else {
        return this.getTypedRuleContext(ArgumentContext,i);
    }
};

ArglistContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArglist(this);
	}
};

ArglistContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArglist(this);
	}
};

ArglistContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArglist(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArglistContext = ArglistContext;

PythonParser.prototype.arglist = function() {

    var localctx = new ArglistContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, PythonParser.RULE_arglist);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1048;
        this.argument();
        this.state = 1053;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1049;
                this.match(PythonParser.COMMA);
                this.state = 1050;
                this.argument(); 
            }
            this.state = 1055;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
        }

        this.state = 1057;
        _la = this._input.LA(1);
        if(_la===PythonParser.COMMA) {
            this.state = 1056;
            this.match(PythonParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_argument;
    return this;
}

ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;

ArgumentContext.prototype.test = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TestContext);
    } else {
        return this.getTypedRuleContext(TestContext,i);
    }
};

ArgumentContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

ArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterArgument(this);
	}
};

ArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitArgument(this);
	}
};

ArgumentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitArgument(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.ArgumentContext = ArgumentContext;

PythonParser.prototype.argument = function() {

    var localctx = new ArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, PythonParser.RULE_argument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1071;
        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1059;
            this.test();
            this.state = 1061;
            _la = this._input.LA(1);
            if(_la===PythonParser.FOR || _la===PythonParser.ASYNC) {
                this.state = 1060;
                this.comp_for();
            }

            break;

        case 2:
            this.state = 1063;
            this.test();
            this.state = 1064;
            this.match(PythonParser.ASSIGN);
            this.state = 1065;
            this.test();
            break;

        case 3:
            this.state = 1067;
            this.match(PythonParser.POWER);
            this.state = 1068;
            this.test();
            break;

        case 4:
            this.state = 1069;
            this.match(PythonParser.STAR);
            this.state = 1070;
            this.test();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_iterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_iter;
    return this;
}

Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;

Comp_iterContext.prototype.comp_for = function() {
    return this.getTypedRuleContext(Comp_forContext,0);
};

Comp_iterContext.prototype.comp_if = function() {
    return this.getTypedRuleContext(Comp_ifContext,0);
};

Comp_iterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_iter(this);
	}
};

Comp_iterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_iter(this);
	}
};

Comp_iterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_iter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_iterContext = Comp_iterContext;

PythonParser.prototype.comp_iter = function() {

    var localctx = new Comp_iterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, PythonParser.RULE_comp_iter);
    try {
        this.state = 1075;
        switch(this._input.LA(1)) {
        case PythonParser.FOR:
        case PythonParser.ASYNC:
            this.enterOuterAlt(localctx, 1);
            this.state = 1073;
            this.comp_for();
            break;
        case PythonParser.IF:
            this.enterOuterAlt(localctx, 2);
            this.state = 1074;
            this.comp_if();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_forContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_for;
    return this;
}

Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;

Comp_forContext.prototype.exprlist = function() {
    return this.getTypedRuleContext(ExprlistContext,0);
};

Comp_forContext.prototype.or_test = function() {
    return this.getTypedRuleContext(Or_testContext,0);
};

Comp_forContext.prototype.ASYNC = function() {
    return this.getToken(PythonParser.ASYNC, 0);
};

Comp_forContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_forContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_for(this);
	}
};

Comp_forContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_for(this);
	}
};

Comp_forContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_for(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_forContext = Comp_forContext;

PythonParser.prototype.comp_for = function() {

    var localctx = new Comp_forContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, PythonParser.RULE_comp_for);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1078;
        _la = this._input.LA(1);
        if(_la===PythonParser.ASYNC) {
            this.state = 1077;
            this.match(PythonParser.ASYNC);
        }

        this.state = 1080;
        this.match(PythonParser.FOR);
        this.state = 1081;
        this.exprlist();
        this.state = 1082;
        this.match(PythonParser.IN);
        this.state = 1083;
        this.or_test();
        this.state = 1085;
        _la = this._input.LA(1);
        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (PythonParser.IF - 13)) | (1 << (PythonParser.FOR - 13)) | (1 << (PythonParser.ASYNC - 13)))) !== 0)) {
            this.state = 1084;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Comp_ifContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_comp_if;
    return this;
}

Comp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_ifContext.prototype.constructor = Comp_ifContext;

Comp_ifContext.prototype.test_nocond = function() {
    return this.getTypedRuleContext(Test_nocondContext,0);
};

Comp_ifContext.prototype.comp_iter = function() {
    return this.getTypedRuleContext(Comp_iterContext,0);
};

Comp_ifContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterComp_if(this);
	}
};

Comp_ifContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitComp_if(this);
	}
};

Comp_ifContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitComp_if(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Comp_ifContext = Comp_ifContext;

PythonParser.prototype.comp_if = function() {

    var localctx = new Comp_ifContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, PythonParser.RULE_comp_if);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1087;
        this.match(PythonParser.IF);
        this.state = 1088;
        this.test_nocond();
        this.state = 1090;
        _la = this._input.LA(1);
        if(((((_la - 13)) & ~0x1f) == 0 && ((1 << (_la - 13)) & ((1 << (PythonParser.IF - 13)) | (1 << (PythonParser.FOR - 13)) | (1 << (PythonParser.ASYNC - 13)))) !== 0)) {
            this.state = 1089;
            this.comp_iter();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Encoding_declContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_encoding_decl;
    return this;
}

Encoding_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Encoding_declContext.prototype.constructor = Encoding_declContext;

Encoding_declContext.prototype.NAME = function() {
    return this.getToken(PythonParser.NAME, 0);
};

Encoding_declContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterEncoding_decl(this);
	}
};

Encoding_declContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitEncoding_decl(this);
	}
};

Encoding_declContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitEncoding_decl(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Encoding_declContext = Encoding_declContext;

PythonParser.prototype.encoding_decl = function() {

    var localctx = new Encoding_declContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, PythonParser.RULE_encoding_decl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1092;
        this.match(PythonParser.NAME);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_exprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_expr;
    return this;
}

Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;

Yield_exprContext.prototype.yield_arg = function() {
    return this.getTypedRuleContext(Yield_argContext,0);
};

Yield_exprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_expr(this);
	}
};

Yield_exprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_expr(this);
	}
};

Yield_exprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_expr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_exprContext = Yield_exprContext;

PythonParser.prototype.yield_expr = function() {

    var localctx = new Yield_exprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, PythonParser.RULE_yield_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1094;
        this.match(PythonParser.YIELD);
        this.state = 1096;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PythonParser.STRING) | (1 << PythonParser.NUMBER) | (1 << PythonParser.FROM) | (1 << PythonParser.LAMBDA) | (1 << PythonParser.NOT) | (1 << PythonParser.NONE) | (1 << PythonParser.TRUE) | (1 << PythonParser.FALSE))) !== 0) || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (PythonParser.AWAIT - 38)) | (1 << (PythonParser.NAME - 38)) | (1 << (PythonParser.ELLIPSIS - 38)) | (1 << (PythonParser.OPEN_PAREN - 38)) | (1 << (PythonParser.OPEN_BRACK - 38)) | (1 << (PythonParser.ADD - 38)) | (1 << (PythonParser.MINUS - 38)))) !== 0) || _la===PythonParser.NOT_OP || _la===PythonParser.OPEN_BRACE) {
            this.state = 1095;
            this.yield_arg();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Yield_argContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PythonParser.RULE_yield_arg;
    return this;
}

Yield_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_argContext.prototype.constructor = Yield_argContext;

Yield_argContext.prototype.test = function() {
    return this.getTypedRuleContext(TestContext,0);
};

Yield_argContext.prototype.testlist = function() {
    return this.getTypedRuleContext(TestlistContext,0);
};

Yield_argContext.prototype.enterRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.enterYield_arg(this);
	}
};

Yield_argContext.prototype.exitRule = function(listener) {
    if(listener instanceof PythonListener ) {
        listener.exitYield_arg(this);
	}
};

Yield_argContext.prototype.accept = function(visitor) {
    if ( visitor instanceof PythonVisitor ) {
        return visitor.visitYield_arg(this);
    } else {
        return visitor.visitChildren(this);
    }
};




PythonParser.Yield_argContext = Yield_argContext;

PythonParser.prototype.yield_arg = function() {

    var localctx = new Yield_argContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, PythonParser.RULE_yield_arg);
    try {
        this.state = 1101;
        switch(this._input.LA(1)) {
        case PythonParser.FROM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1098;
            this.match(PythonParser.FROM);
            this.state = 1099;
            this.test();
            break;
        case PythonParser.STRING:
        case PythonParser.NUMBER:
        case PythonParser.LAMBDA:
        case PythonParser.NOT:
        case PythonParser.NONE:
        case PythonParser.TRUE:
        case PythonParser.FALSE:
        case PythonParser.AWAIT:
        case PythonParser.NAME:
        case PythonParser.ELLIPSIS:
        case PythonParser.OPEN_PAREN:
        case PythonParser.OPEN_BRACK:
        case PythonParser.ADD:
        case PythonParser.MINUS:
        case PythonParser.NOT_OP:
        case PythonParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1100;
            this.testlist();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PythonParser = PythonParser;
